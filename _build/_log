### Starting build.
# Target: types.mli.depends, tags: { package(js_of_ocaml), package(js_of_ocaml-lwt), package(js_of_ocaml.syntax), package(oUnit), syntax(camlp4o), extension:mli, file:types.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -syntax camlp4o -package js_of_ocaml.syntax -package js_of_ocaml -package js_of_ocaml-lwt -package oUnit -modules types.mli > types.mli.depends # cached
# Target: types.cmi, tags: { package(js_of_ocaml), package(js_of_ocaml-lwt), package(js_of_ocaml.syntax), package(oUnit), syntax(camlp4o), byte, compile, extension:mli, file:types.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -syntax camlp4o -package js_of_ocaml.syntax -package js_of_ocaml -package js_of_ocaml-lwt -package oUnit -o types.cmi types.mli # cached
# Target: types.ml.depends, tags: { package(js_of_ocaml), package(js_of_ocaml-lwt), package(js_of_ocaml.syntax), package(oUnit), syntax(camlp4o), extension:ml, file:types.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -syntax camlp4o -package js_of_ocaml.syntax -package js_of_ocaml -package js_of_ocaml-lwt -package oUnit -modules types.ml > types.ml.depends # cached
# Target: types.cmo, tags: { package(js_of_ocaml), package(js_of_ocaml-lwt), package(js_of_ocaml.syntax), package(oUnit), syntax(camlp4o), byte, compile, extension:cmo, extension:ml, file:types.cmo, file:types.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -syntax camlp4o -package js_of_ocaml.syntax -package js_of_ocaml -package js_of_ocaml-lwt -package oUnit -o types.cmo types.ml # cached
# Target: state.mli.depends, tags: { package(js_of_ocaml), package(js_of_ocaml-lwt), package(js_of_ocaml.syntax), package(oUnit), syntax(camlp4o), extension:mli, file:state.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -syntax camlp4o -package js_of_ocaml.syntax -package js_of_ocaml -package js_of_ocaml-lwt -package oUnit -modules state.mli > state.mli.depends # cached
# Target: state.cmi, tags: { package(js_of_ocaml), package(js_of_ocaml-lwt), package(js_of_ocaml.syntax), package(oUnit), syntax(camlp4o), byte, compile, extension:mli, file:state.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -syntax camlp4o -package js_of_ocaml.syntax -package js_of_ocaml -package js_of_ocaml-lwt -package oUnit -o state.cmi state.mli # cached
# Target: state.ml.depends, tags: { package(js_of_ocaml), package(js_of_ocaml-lwt), package(js_of_ocaml.syntax), package(oUnit), syntax(camlp4o), extension:ml, file:state.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -syntax camlp4o -package js_of_ocaml.syntax -package js_of_ocaml -package js_of_ocaml-lwt -package oUnit -modules state.ml > state.ml.depends # cached
# Target: ai.mli.depends, tags: { package(js_of_ocaml), package(js_of_ocaml-lwt), package(js_of_ocaml.syntax), package(oUnit), syntax(camlp4o), extension:mli, file:ai.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -syntax camlp4o -package js_of_ocaml.syntax -package js_of_ocaml -package js_of_ocaml-lwt -package oUnit -modules ai.mli > ai.mli.depends # cached
# Target: ai.cmi, tags: { package(js_of_ocaml), package(js_of_ocaml-lwt), package(js_of_ocaml.syntax), package(oUnit), syntax(camlp4o), byte, compile, extension:mli, file:ai.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -syntax camlp4o -package js_of_ocaml.syntax -package js_of_ocaml -package js_of_ocaml-lwt -package oUnit -o ai.cmi ai.mli # cached
# Target: billiards.mli.depends, tags: { package(js_of_ocaml), package(js_of_ocaml-lwt), package(js_of_ocaml.syntax), package(oUnit), syntax(camlp4o), extension:mli, file:billiards.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -syntax camlp4o -package js_of_ocaml.syntax -package js_of_ocaml -package js_of_ocaml-lwt -package oUnit -modules billiards.mli > billiards.mli.depends # cached
# Target: billiards.cmi, tags: { package(js_of_ocaml), package(js_of_ocaml-lwt), package(js_of_ocaml.syntax), package(oUnit), syntax(camlp4o), byte, compile, extension:mli, file:billiards.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -syntax camlp4o -package js_of_ocaml.syntax -package js_of_ocaml -package js_of_ocaml-lwt -package oUnit -o billiards.cmi billiards.mli # cached
# Target: command.mli.depends, tags: { package(js_of_ocaml), package(js_of_ocaml-lwt), package(js_of_ocaml.syntax), package(oUnit), syntax(camlp4o), extension:mli, file:command.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -syntax camlp4o -package js_of_ocaml.syntax -package js_of_ocaml -package js_of_ocaml-lwt -package oUnit -modules command.mli > command.mli.depends # cached
# Target: command.cmi, tags: { package(js_of_ocaml), package(js_of_ocaml-lwt), package(js_of_ocaml.syntax), package(oUnit), syntax(camlp4o), byte, compile, extension:mli, file:command.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -syntax camlp4o -package js_of_ocaml.syntax -package js_of_ocaml -package js_of_ocaml-lwt -package oUnit -o command.cmi command.mli # cached
# Target: player.mli.depends, tags: { package(js_of_ocaml), package(js_of_ocaml-lwt), package(js_of_ocaml.syntax), package(oUnit), syntax(camlp4o), extension:mli, file:player.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -syntax camlp4o -package js_of_ocaml.syntax -package js_of_ocaml -package js_of_ocaml-lwt -package oUnit -modules player.mli > player.mli.depends # cached
# Target: player.cmi, tags: { package(js_of_ocaml), package(js_of_ocaml-lwt), package(js_of_ocaml.syntax), package(oUnit), syntax(camlp4o), byte, compile, extension:mli, file:player.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -syntax camlp4o -package js_of_ocaml.syntax -package js_of_ocaml -package js_of_ocaml-lwt -package oUnit -o player.cmi player.mli # cached
# Target: state.cmo, tags: { package(js_of_ocaml), package(js_of_ocaml-lwt), package(js_of_ocaml.syntax), package(oUnit), syntax(camlp4o), byte, compile, extension:cmo, extension:ml, file:state.cmo, file:state.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -syntax camlp4o -package js_of_ocaml.syntax -package js_of_ocaml -package js_of_ocaml-lwt -package oUnit -o state.cmo state.ml # cached
# Target: command.ml.depends, tags: { package(js_of_ocaml), package(js_of_ocaml-lwt), package(js_of_ocaml.syntax), package(oUnit), syntax(camlp4o), extension:ml, file:command.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -syntax camlp4o -package js_of_ocaml.syntax -package js_of_ocaml -package js_of_ocaml-lwt -package oUnit -modules command.ml > command.ml.depends # cached
# Target: command.cmo, tags: { package(js_of_ocaml), package(js_of_ocaml-lwt), package(js_of_ocaml.syntax), package(oUnit), syntax(camlp4o), byte, compile, extension:cmo, extension:ml, file:command.cmo, file:command.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -syntax camlp4o -package js_of_ocaml.syntax -package js_of_ocaml -package js_of_ocaml-lwt -package oUnit -o command.cmo command.ml # cached
# Target: billiards.ml.depends, tags: { package(js_of_ocaml), package(js_of_ocaml-lwt), package(js_of_ocaml.syntax), package(oUnit), syntax(camlp4o), extension:ml, file:billiards.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -syntax camlp4o -package js_of_ocaml.syntax -package js_of_ocaml -package js_of_ocaml-lwt -package oUnit -modules billiards.ml > billiards.ml.depends # cached
# Target: billiards.cmo, tags: { package(js_of_ocaml), package(js_of_ocaml-lwt), package(js_of_ocaml.syntax), package(oUnit), syntax(camlp4o), byte, compile, extension:cmo, extension:ml, file:billiards.cmo, file:billiards.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -syntax camlp4o -package js_of_ocaml.syntax -package js_of_ocaml -package js_of_ocaml-lwt -package oUnit -o billiards.cmo billiards.ml # cached
# Target: gui.mli.depends, tags: { package(js_of_ocaml), package(js_of_ocaml-lwt), package(js_of_ocaml.syntax), package(oUnit), syntax(camlp4o), extension:mli, file:gui.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -syntax camlp4o -package js_of_ocaml.syntax -package js_of_ocaml -package js_of_ocaml-lwt -package oUnit -modules gui.mli > gui.mli.depends # cached
# Target: gui.cmi, tags: { package(js_of_ocaml), package(js_of_ocaml-lwt), package(js_of_ocaml.syntax), package(oUnit), syntax(camlp4o), byte, compile, extension:mli, file:gui.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -syntax camlp4o -package js_of_ocaml.syntax -package js_of_ocaml -package js_of_ocaml-lwt -package oUnit -o gui.cmi gui.mli # cached
# Target: gui.ml.depends, tags: { package(js_of_ocaml), package(js_of_ocaml-lwt), package(js_of_ocaml.syntax), package(oUnit), syntax(camlp4o), extension:ml, file:gui.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -syntax camlp4o -package js_of_ocaml.syntax -package js_of_ocaml -package js_of_ocaml-lwt -package oUnit -modules gui.ml > gui.ml.depends # cached
# Target: gui.cmo, tags: { package(js_of_ocaml), package(js_of_ocaml-lwt), package(js_of_ocaml.syntax), package(oUnit), syntax(camlp4o), byte, compile, extension:cmo, extension:ml, file:gui.cmo, file:gui.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -syntax camlp4o -package js_of_ocaml.syntax -package js_of_ocaml -package js_of_ocaml-lwt -package oUnit -o gui.cmo gui.ml # cached
# Target: game.mli.depends, tags: { package(js_of_ocaml), package(js_of_ocaml-lwt), package(js_of_ocaml.syntax), package(oUnit), syntax(camlp4o), extension:mli, file:game.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -syntax camlp4o -package js_of_ocaml.syntax -package js_of_ocaml -package js_of_ocaml-lwt -package oUnit -modules game.mli > game.mli.depends # cached
# Target: game.cmi, tags: { package(js_of_ocaml), package(js_of_ocaml-lwt), package(js_of_ocaml.syntax), package(oUnit), syntax(camlp4o), byte, compile, extension:mli, file:game.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -syntax camlp4o -package js_of_ocaml.syntax -package js_of_ocaml -package js_of_ocaml-lwt -package oUnit -o game.cmi game.mli # cached
# Target: game.ml.depends, tags: { package(js_of_ocaml), package(js_of_ocaml-lwt), package(js_of_ocaml.syntax), package(oUnit), syntax(camlp4o), extension:ml, file:game.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -syntax camlp4o -package js_of_ocaml.syntax -package js_of_ocaml -package js_of_ocaml-lwt -package oUnit -modules game.ml > game.ml.depends # cached
# Target: game.cmo, tags: { package(js_of_ocaml), package(js_of_ocaml-lwt), package(js_of_ocaml.syntax), package(oUnit), syntax(camlp4o), byte, compile, extension:cmo, extension:ml, file:game.cmo, file:game.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -syntax camlp4o -package js_of_ocaml.syntax -package js_of_ocaml -package js_of_ocaml-lwt -package oUnit -o game.cmo game.ml # cached
# Target: player.ml.depends, tags: { package(js_of_ocaml), package(js_of_ocaml-lwt), package(js_of_ocaml.syntax), package(oUnit), syntax(camlp4o), extension:ml, file:player.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -syntax camlp4o -package js_of_ocaml.syntax -package js_of_ocaml -package js_of_ocaml-lwt -package oUnit -modules player.ml > player.ml.depends # cached
# Target: player.cmo, tags: { package(js_of_ocaml), package(js_of_ocaml-lwt), package(js_of_ocaml.syntax), package(oUnit), syntax(camlp4o), byte, compile, extension:cmo, extension:ml, file:player.cmo, file:player.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -syntax camlp4o -package js_of_ocaml.syntax -package js_of_ocaml -package js_of_ocaml-lwt -package oUnit -o player.cmo player.ml # cached
# Compilation successful.
