// Generated by js_of_ocaml 3.0.1
(function(joo_global_object)
   {"use strict";
    function raw_array_sub(a,i,l)
     {var b=new Array(l);for(var j=0;j < l;j++)b[j] = a[i + j];return b}
    function caml_subarray_to_string(a,i,len)
     {var f=String.fromCharCode;
      if(i == 0 && len <= 4096 && len == a.length)return f.apply(null,a);
      var s="";
      for(;0 < len;i += 1024,len -= 1024)
       s += f.apply(null,raw_array_sub(a,i,Math.min(len,1024)));
      return s}
    function caml_convert_string_to_array(s)
     {if(joo_global_object.Uint8Array)
       var a=new (joo_global_object.Uint8Array)(s.l);
      else
       var a=new Array(s.l);
      var b=s.c,l=b.length,i=0;
      for(;i < l;i++)a[i] = b.charCodeAt(i);
      for(l = s.l;i < l;i++)a[i] = 0;
      s.c = a;
      s.t = 4;
      return a}
    function caml_blit_string(s1,i1,s2,i2,len)
     {if(len == 0)return 0;
      if(i2 == 0 && (len >= s2.l || s2.t == 2 && len >= s2.c.length))
       {s2.c
        =
        s1.t == 4
         ?caml_subarray_to_string(s1.c,i1,len)
         :i1 == 0 && s1.c.length == len?s1.c:s1.c.substr(i1,len);
        s2.t = s2.c.length == s2.l?0:2}
      else
       if(s2.t == 2 && i2 == s2.c.length)
        {s2.c
         +=
         s1.t == 4
          ?caml_subarray_to_string(s1.c,i1,len)
          :i1 == 0 && s1.c.length == len?s1.c:s1.c.substr(i1,len);
         s2.t = s2.c.length == s2.l?0:2}
       else
        {if(s2.t != 4)caml_convert_string_to_array(s2);
         var c1=s1.c,c2=s2.c;
         if(s1.t == 4)
          if(i2 <= i1)
           for(var i=0;i < len;i++)c2[i2 + i] = c1[i1 + i];
          else
           for(var i=len - 1;i >= 0;i--)c2[i2 + i] = c1[i1 + i];
         else
          {var l=Math.min(len,c1.length - i1);
           for(var i=0;i < l;i++)c2[i2 + i] = c1.charCodeAt(i1 + i);
           for(;i < len;i++)c2[i2 + i] = 0}}
      return 0}
    var caml_blit_bytes=caml_blit_string;
    function caml_raise_with_arg(tag,arg){throw [0,tag,arg]}
    function caml_str_repeat(n,s)
     {if(s.repeat)return s.repeat(n);
      var r="",l=0;
      if(n == 0)return r;
      for(;;)
       {if(n & 1)r += s;
        n >>= 1;
        if(n == 0)return r;
        s += s;
        l++;
        if(l == 9)s.slice(0,1)}}
    function caml_convert_string_to_bytes(s)
     {if(s.t == 2)
       s.c += caml_str_repeat(s.l - s.c.length,"\0");
      else
       s.c = caml_subarray_to_string(s.c,0,s.c.length);
      s.t = 0}
    function caml_is_ascii(s)
     {if(s.length < 24)
       {for(var i=0;i < s.length;i++)if(s.charCodeAt(i) > 127)return false;
        return true}
      else
       return !/[^\x00-\x7f]/.test(s)}
    function caml_utf16_of_utf8(s)
     {for(var b="",t="",c,c1,c2,v,i=0,l=s.length;i < l;i++)
       {c1 = s.charCodeAt(i);
        if(c1 < 128)
         {for(var j=i + 1;j < l && (c1 = s.charCodeAt(j)) < 128;j++);
          if(j - i > 512)
           {t.substr(0,1);b += t;t = "";b += s.slice(i,j)}
          else
           t += s.slice(i,j);
          if(j == l)break;
          i = j}
        v = 1;
        if(++i < l && ((c2 = s.charCodeAt(i)) & -64) == 128)
         {c = c2 + (c1 << 6);
          if(c1 < 224)
           {v = c - 12416;if(v < 128)v = 1}
          else
           {v = 2;
            if(++i < l && ((c2 = s.charCodeAt(i)) & -64) == 128)
             {c = c2 + (c << 6);
              if(c1 < 240)
               {v = c - 925824;if(v < 2048 || v >= 55295 && v < 57344)v = 2}
              else
               {v = 3;
                if
                 (++i
                  <
                  l
                  &&
                  ((c2 = s.charCodeAt(i)) & -64)
                  ==
                  128
                  &&
                  c1
                  <
                  245)
                 {v = c2 - 63447168 + (c << 6);
                  if(v < 65536 || v > 1114111)v = 3}}}}}
        if(v < 4)
         {i -= v;t += "\ufffd"}
        else
         if(v > 65535)
          t += String.fromCharCode(55232 + (v >> 10),56320 + (v & 1023));
         else
          t += String.fromCharCode(v);
        if(t.length > 1024){t.substr(0,1);b += t;t = ""}}
      return b + t}
    function caml_to_js_string(s)
     {switch(s.t)
       {case 9:return s.c;
        default:caml_convert_string_to_bytes(s);case 0:
         if(caml_is_ascii(s.c)){s.t = 9;return s.c}s.t = 8;
        case 8:return caml_utf16_of_utf8(s.c)
        }}
    function MlString(tag,contents,length)
     {this.t = tag;this.c = contents;this.l = length}
    MlString.prototype.toString = function(){return caml_to_js_string(this)};
    function caml_new_string(s){return new MlString(0,s,s.length)}
    function caml_raise_with_string(tag,msg)
     {caml_raise_with_arg(tag,caml_new_string(msg))}
    var caml_global_data=[0];
    function caml_invalid_argument(msg)
     {caml_raise_with_string(caml_global_data.Invalid_argument,msg)}
    function caml_string_bound_error()
     {caml_invalid_argument("index out of bounds")}
    function caml_bytes_unsafe_set(s,i,c)
     {c &= 255;
      if(s.t != 4)
       {if(i == s.c.length)
         {s.c += String.fromCharCode(c);if(i + 1 == s.l)s.t = 0;return 0}
        caml_convert_string_to_array(s)}
      s.c[i] = c;
      return 0}
    function caml_bytes_set(s,i,c)
     {if(i >>> 0 >= s.l)caml_string_bound_error();
      return caml_bytes_unsafe_set(s,i,c)}
    function raw_array_append_one(a,x)
     {var l=a.length,b=new Array(l + 1),i=0;
      for(;i < l;i++)b[i] = a[i];
      b[i] = x;
      return b}
    function caml_call_gen(f,args)
     {if(f.fun)return caml_call_gen(f.fun,args);
      var n=f.length,argsLen=args.length,d=n - argsLen;
      if(d == 0)
       return f.apply(null,args);
      else
       if(d < 0)
        return caml_call_gen
                (f.apply(null,raw_array_sub(args,0,n)),
                 raw_array_sub(args,n,argsLen - n));
       else
        return function(x)
         {return caml_call_gen(f,raw_array_append_one(args,x))}}
    function caml_array_bound_error()
     {caml_invalid_argument("index out of bounds")}
    function caml_check_bound(array,index)
     {if(index >>> 0 >= array.length - 1)caml_array_bound_error();
      return array}
    function caml_classify_float(x)
     {if(isFinite(x))
       {if(Math.abs(x) >= 2.22507385850720138e-308)return 0;
        if(x != 0)return 1;
        return 2}
      return isNaN(x)?4:3}
    function caml_int64_compare(x,y)
     {var x3=x[3] << 16,y3=y[3] << 16;
      if(x3 > y3)return 1;
      if(x3 < y3)return -1;
      if(x[2] > y[2])return 1;
      if(x[2] < y[2])return -1;
      if(x[1] > y[1])return 1;
      if(x[1] < y[1])return -1;
      return 0}
    function caml_int_compare(a,b)
     {if(a < b)return -1;if(a == b)return 0;return 1}
    function caml_string_compare(s1,s2)
     {s1.t & 6 && caml_convert_string_to_bytes(s1);
      s2.t & 6 && caml_convert_string_to_bytes(s2);
      return s1.c < s2.c?-1:s1.c > s2.c?1:0}
    function caml_compare_val(a,b,total)
     {var stack=[];
      for(;;)
       {if(!(total && a === b))
         if(a instanceof MlString)
          if(b instanceof MlString)
           {if(a !== b){var x=caml_string_compare(a,b);if(x != 0)return x}}
          else
           return 1;
         else
          if(a instanceof Array && a[0] === (a[0] | 0))
           {var ta=a[0];
            if(ta === 254)ta = 0;
            if(ta === 250)
             {a = a[1];continue}
            else
             if(b instanceof Array && b[0] === (b[0] | 0))
              {var tb=b[0];
               if(tb === 254)tb = 0;
               if(tb === 250)
                {b = b[1];continue}
               else
                if(ta != tb)
                 return ta < tb?-1:1;
                else
                 switch(ta)
                  {case 248:
                    var x=caml_int_compare(a[2],b[2]);if(x != 0)return x;break;
                   case 251:caml_invalid_argument("equal: abstract value");
                   case 255:
                    var x=caml_int64_compare(a,b);if(x != 0)return x;break;
                   default:
                    if(a.length != b.length)return a.length < b.length?-1:1;
                    if(a.length > 1)stack.push(a,b,1)}}
             else
              return 1}
          else
           if
            (b instanceof MlString
             ||
             b instanceof Array
             &&
             b[0]
             ===
             (b[0] | 0))
            return -1;
           else
            if(typeof a != "number" && a && a.compare)
             return a.compare(b,total);
            else
             if(typeof a == "function")
              caml_invalid_argument("compare: functional value");
             else
              {if(a < b)return -1;
               if(a > b)return 1;
               if(a != b)
                {if(!total)return NaN;if(a == a)return 1;if(b == b)return -1}}
        if(stack.length == 0)return 0;
        var i=stack.pop();
        b = stack.pop();
        a = stack.pop();
        if(i + 1 < a.length)stack.push(a,b,i + 1);
        a = a[i];
        b = b[i]}}
    function caml_compare(a,b){return caml_compare_val(a,b,true)}
    function caml_create_bytes(len)
     {if(len < 0)caml_invalid_argument("Bytes.create");
      return new MlString(len?2:9,"",len)}
    function caml_equal(x,y){return +(caml_compare_val(x,y,false) == 0)}
    function caml_fill_string(s,i,l,c)
     {if(l > 0)
       if(i == 0 && (l >= s.l || s.t == 2 && l >= s.c.length))
        if(c == 0)
         {s.c = "";s.t = 2}
        else
         {s.c = caml_str_repeat(l,String.fromCharCode(c));s.t = l == s.l?0:2}
       else
        {if(s.t != 4)caml_convert_string_to_array(s);
         for(l += i;i < l;i++)s.c[i] = c}
      return 0}
    var caml_fill_bytes=caml_fill_string;
    function caml_bytes_of_string(s)
     {if((s.t & 6) != 0)caml_convert_string_to_bytes(s);return s.c}
    function caml_parse_format(fmt)
     {fmt = caml_bytes_of_string(fmt);
      var len=fmt.length;
      if(len > 31)caml_invalid_argument("format_int: format too long");
      var
       f=
        {justify:"+",
         signstyle:"-",
         filler:" ",
         alternate:false,
         base:0,
         signedconv:false,
         width:0,
         uppercase:false,
         sign:1,
         prec:-1,
         conv:"f"};
      for(var i=0;i < len;i++)
       {var c=fmt.charAt(i);
        switch(c)
         {case "-":f.justify = "-";break;
          case "+":
          case " ":f.signstyle = c;break;
          case "0":f.filler = "0";break;
          case "#":f.alternate = true;break;
          case "1":
          case "2":
          case "3":
          case "4":
          case "5":
          case "6":
          case "7":
          case "8":
          case "9":
           f.width = 0;
           while(c = fmt.charCodeAt(i) - 48,c >= 0 && c <= 9)
            {f.width = f.width * 10 + c;i++}
           i--;
           break;
          case ".":
           f.prec = 0;
           i++;
           while(c = fmt.charCodeAt(i) - 48,c >= 0 && c <= 9)
            {f.prec = f.prec * 10 + c;i++}
           i--;
          case "d":
          case "i":f.signedconv = true;
          case "u":f.base = 10;break;
          case "x":f.base = 16;break;
          case "X":f.base = 16;f.uppercase = true;break;
          case "o":f.base = 8;break;
          case "e":
          case "f":
          case "g":f.signedconv = true;f.conv = c;break;
          case "E":
          case "F":
          case "G":
           f.signedconv = true;
           f.uppercase = true;
           f.conv = c.toLowerCase();
           break
          }}
      return f}
    function caml_finish_formatting(f,rawbuffer)
     {if(f.uppercase)rawbuffer = rawbuffer.toUpperCase();
      var len=rawbuffer.length;
      if(f.signedconv && (f.sign < 0 || f.signstyle != "-"))len++;
      if(f.alternate){if(f.base == 8)len += 1;if(f.base == 16)len += 2}
      var buffer="";
      if(f.justify == "+" && f.filler == " ")
       for(var i=len;i < f.width;i++)buffer += " ";
      if(f.signedconv)
       if(f.sign < 0)
        buffer += "-";
       else
        if(f.signstyle != "-")buffer += f.signstyle;
      if(f.alternate && f.base == 8)buffer += "0";
      if(f.alternate && f.base == 16)buffer += "0x";
      if(f.justify == "+" && f.filler == "0")
       for(var i=len;i < f.width;i++)buffer += "0";
      buffer += rawbuffer;
      if(f.justify == "-")for(var i=len;i < f.width;i++)buffer += " ";
      return caml_new_string(buffer)}
    function caml_format_float(fmt,x)
     {var s,f=caml_parse_format(fmt),prec=f.prec < 0?6:f.prec;
      if(x < 0 || x == 0 && 1 / x == -Infinity){f.sign = -1;x = -x}
      if(isNaN(x))
       {s = "nan";f.filler = " "}
      else
       if(!isFinite(x))
        {s = "inf";f.filler = " "}
       else
        switch(f.conv)
         {case "e":
           var s=x.toExponential(prec),i=s.length;
           if(s.charAt(i - 3) == "e")
            s = s.slice(0,i - 1) + "0" + s.slice(i - 1);
           break;
          case "f":s = x.toFixed(prec);break;
          case "g":
           prec = prec?prec:1;
           s = x.toExponential(prec - 1);
           var j=s.indexOf("e"),exp=+s.slice(j + 1);
           if(exp < -4 || x >= 1e+21 || x.toFixed(0).length > prec)
            {var i=j - 1;
             while(s.charAt(i) == "0")i--;
             if(s.charAt(i) == ".")i--;
             s = s.slice(0,i + 1) + s.slice(j);
             i = s.length;
             if(s.charAt(i - 3) == "e")
              s = s.slice(0,i - 1) + "0" + s.slice(i - 1);
             break}
           else
            {var p=prec;
             if(exp < 0)
              {p -= exp + 1;s = x.toFixed(p)}
             else
              while(s = x.toFixed(p),s.length > prec + 1)p--;
             if(p)
              {var i=s.length - 1;
               while(s.charAt(i) == "0")i--;
               if(s.charAt(i) == ".")i--;
               s = s.slice(0,i + 1)}}
           break
          }
      return caml_finish_formatting(f,s)}
    function caml_format_int(fmt,i)
     {if(caml_bytes_of_string(fmt) == "%d")return caml_new_string("" + i);
      var f=caml_parse_format(fmt);
      if(i < 0)if(f.signedconv){f.sign = -1;i = -i}else i >>>= 0;
      var s=i.toString(f.base);
      if(f.prec >= 0)
       {f.filler = " ";
        var n=f.prec - s.length;
        if(n > 0)s = caml_str_repeat(n,"0") + s}
      return caml_finish_formatting(f,s)}
    var caml_oo_last_id=0;
    function caml_fresh_oo_id(){return caml_oo_last_id++}
    function caml_greaterequal(x,y)
     {return +(caml_compare_val(x,y,false) >= 0)}
    function caml_utf8_of_utf16(s)
     {for(var b="",t=b,c,d,i=0,l=s.length;i < l;i++)
       {c = s.charCodeAt(i);
        if(c < 128)
         {for(var j=i + 1;j < l && (c = s.charCodeAt(j)) < 128;j++);
          if(j - i > 512)
           {t.substr(0,1);b += t;t = "";b += s.slice(i,j)}
          else
           t += s.slice(i,j);
          if(j == l)break;
          i = j}
        if(c < 2048)
         {t += String.fromCharCode(192 | c >> 6);
          t += String.fromCharCode(128 | c & 63)}
        else
         if(c < 55296 || c >= 57343)
          t
          +=
          String.fromCharCode(224 | c >> 12,128 | c >> 6 & 63,128 | c & 63);
         else
          if
           (c
            >=
            56319
            ||
            i
            +
            1
            ==
            l
            ||
            (d = s.charCodeAt(i + 1))
            <
            56320
            ||
            d
            >
            57343)
           t += "\xef\xbf\xbd";
          else
           {i++;
            c = (c << 10) + d - 56613888;
            t
            +=
            String.fromCharCode
             (240 | c >> 18,128 | c >> 12 & 63,128 | c >> 6 & 63,128 | c & 63)}
        if(t.length > 1024){t.substr(0,1);b += t;t = ""}}
      return b + t}
    function caml_js_to_string(s)
     {var tag=9;
      if(!caml_is_ascii(s))tag = 8,s = caml_utf8_of_utf16(s);
      return new MlString(tag,s,s.length)}
    function caml_hexstring_of_float(x,prec,style)
     {if(!isFinite(x))
       {if(isNaN(x))return caml_js_to_string("nan");
        return caml_js_to_string(x > 0?"infinity":"-infinity")}
      var sign=x == 0 && 1 / x == -Infinity?1:x >= 0?0:1;
      if(sign)x = -x;
      var exp=0;
      if(x == 0)
       ;
      else
       if(x < 1)
        while(x < 1 && exp > -1022){x *= 2;exp--}
       else
        while(x >= 2){x /= 2;exp++}
      var exp_sign=exp < 0?"":"+",sign_str="";
      if(sign)
       sign_str = "-";
      else
       switch(style)
        {case 43:sign_str = "+";break;
         case 32:sign_str = " ";break;
         default:break}
      if(prec >= 0 && prec < 13)
       {var cst=Math.pow(2,prec * 4);x = Math.round(x * cst) / cst}
      var x_str=x.toString(16);
      if(prec >= 0)
       {var idx=x_str.indexOf(".");
        if(idx < 0)
         x_str += "." + caml_str_repeat(prec,"0");
        else
         {var size=idx + 1 + prec;
          if(x_str.length < size)
           x_str += caml_str_repeat(size - x_str.length,"0");
          else
           x_str = x_str.substr(0,size)}}
      return caml_js_to_string
              (sign_str + "0x" + x_str + "p" + exp_sign + exp.toString(10))}
    function caml_int64_is_zero(x){return (x[3] | x[2] | x[1]) == 0}
    function caml_int64_of_int32(x)
     {return [255,x & 16777215,x >> 24 & 16777215,x >> 31 & 65535]}
    function caml_obj_dup(x)
     {var l=x.length,a=new Array(l);
      for(var i=0;i < l;i++)a[i] = x[i];
      return a}
    function caml_int64_sub(x,y)
     {var
       z1=x[1] - y[1],
       z2=x[2] - y[2] + (z1 >> 24),
       z3=x[3] - y[3] + (z2 >> 24);
      return [255,z1 & 16777215,z2 & 16777215,z3 & 65535]}
    function caml_int64_ucompare(x,y)
     {if(x[3] > y[3])return 1;
      if(x[3] < y[3])return -1;
      if(x[2] > y[2])return 1;
      if(x[2] < y[2])return -1;
      if(x[1] > y[1])return 1;
      if(x[1] < y[1])return -1;
      return 0}
    function caml_int64_lsl1(x)
     {x[3] = x[3] << 1 | x[2] >> 23;
      x[2] = (x[2] << 1 | x[1] >> 23) & 16777215;
      x[1] = x[1] << 1 & 16777215}
    function caml_int64_lsr1(x)
     {x[1] = (x[1] >>> 1 | x[2] << 23) & 16777215;
      x[2] = (x[2] >>> 1 | x[3] << 23) & 16777215;
      x[3] = x[3] >>> 1}
    function caml_int64_udivmod(x,y)
     {var
       offset=0,
       modulus=caml_obj_dup(x),
       divisor=caml_obj_dup(y),
       quotient=[255,0,0,0];
      while(caml_int64_ucompare(modulus,divisor) > 0)
       {offset++;caml_int64_lsl1(divisor)}
      while(offset >= 0)
       {offset--;
        caml_int64_lsl1(quotient);
        if(caml_int64_ucompare(modulus,divisor) >= 0)
         {quotient[1]++;modulus = caml_int64_sub(modulus,divisor)}
        caml_int64_lsr1(divisor)}
      return [0,quotient,modulus]}
    function caml_int64_to_int32(x){return x[1] | x[2] << 24}
    function caml_int64_is_negative(x){return x[3] << 16 < 0}
    function caml_int64_neg(x)
     {var y1=-x[1],y2=-x[2] + (y1 >> 24),y3=-x[3] + (y2 >> 24);
      return [255,y1 & 16777215,y2 & 16777215,y3 & 65535]}
    function caml_int64_format(fmt,x)
     {var f=caml_parse_format(fmt);
      if(f.signedconv && caml_int64_is_negative(x))
       {f.sign = -1;x = caml_int64_neg(x)}
      var
       buffer="",
       wbase=caml_int64_of_int32(f.base),
       cvtbl="0123456789abcdef";
      do
       {var p=caml_int64_udivmod(x,wbase);
        x = p[1];
        buffer = cvtbl.charAt(caml_int64_to_int32(p[2])) + buffer}
      while
       (!caml_int64_is_zero(x));
      if(f.prec >= 0)
       {f.filler = " ";
        var n=f.prec - buffer.length;
        if(n > 0)buffer = caml_str_repeat(n,"0") + buffer}
      return caml_finish_formatting(f,buffer)}
    function caml_js_from_array(a){return raw_array_sub(a,1,a.length - 1)}
    function caml_js_call(f,o,args)
     {return f.apply(o,caml_js_from_array(args))}
    function caml_js_wrap_callback(f)
     {return function()
       {return arguments.length > 0
                ?caml_call_gen(f,arguments)
                :caml_call_gen(f,[undefined])}}
    function caml_lessequal(x,y){return +(caml_compare_val(x,y,false) <= 0)}
    function caml_make_vect(len,init)
     {var len=len + 1 | 0,b=new Array(len);
      b[0] = 0;
      for(var i=1;i < len;i++)b[i] = init;
      return b}
    function caml_string_of_array(a){return new MlString(4,a,a.length)}
    var
     caml_md5_string=
      function()
        {function add(x,y){return x + y | 0}
         function xx(q,a,b,x,s,t)
          {a = add(add(a,q),add(x,t));return add(a << s | a >>> 32 - s,b)}
         function ff(a,b,c,d,x,s,t){return xx(b & c | ~b & d,a,b,x,s,t)}
         function gg(a,b,c,d,x,s,t){return xx(b & d | c & ~d,a,b,x,s,t)}
         function hh(a,b,c,d,x,s,t){return xx(b ^ c ^ d,a,b,x,s,t)}
         function ii(a,b,c,d,x,s,t){return xx(c ^ (b | ~d),a,b,x,s,t)}
         function md5(buffer,length)
          {var i=length;
           buffer[i >> 2] |= 128 << 8 * (i & 3);
           for(i = (i & ~3) + 8;(i & 63) < 60;i += 4)buffer[(i >> 2) - 1] = 0;
           buffer[(i >> 2) - 1] = length << 3;
           buffer[i >> 2] = length >> 29 & 536870911;
           var w=[1732584193,4023233417,2562383102,271733878];
           for(i = 0;i < buffer.length;i += 16)
            {var a=w[0],b=w[1],c=w[2],d=w[3];
             a = ff(a,b,c,d,buffer[i + 0],7,3614090360);
             d = ff(d,a,b,c,buffer[i + 1],12,3905402710);
             c = ff(c,d,a,b,buffer[i + 2],17,606105819);
             b = ff(b,c,d,a,buffer[i + 3],22,3250441966);
             a = ff(a,b,c,d,buffer[i + 4],7,4118548399);
             d = ff(d,a,b,c,buffer[i + 5],12,1200080426);
             c = ff(c,d,a,b,buffer[i + 6],17,2821735955);
             b = ff(b,c,d,a,buffer[i + 7],22,4249261313);
             a = ff(a,b,c,d,buffer[i + 8],7,1770035416);
             d = ff(d,a,b,c,buffer[i + 9],12,2336552879);
             c = ff(c,d,a,b,buffer[i + 10],17,4294925233);
             b = ff(b,c,d,a,buffer[i + 11],22,2304563134);
             a = ff(a,b,c,d,buffer[i + 12],7,1804603682);
             d = ff(d,a,b,c,buffer[i + 13],12,4254626195);
             c = ff(c,d,a,b,buffer[i + 14],17,2792965006);
             b = ff(b,c,d,a,buffer[i + 15],22,1236535329);
             a = gg(a,b,c,d,buffer[i + 1],5,4129170786);
             d = gg(d,a,b,c,buffer[i + 6],9,3225465664);
             c = gg(c,d,a,b,buffer[i + 11],14,643717713);
             b = gg(b,c,d,a,buffer[i + 0],20,3921069994);
             a = gg(a,b,c,d,buffer[i + 5],5,3593408605);
             d = gg(d,a,b,c,buffer[i + 10],9,38016083);
             c = gg(c,d,a,b,buffer[i + 15],14,3634488961);
             b = gg(b,c,d,a,buffer[i + 4],20,3889429448);
             a = gg(a,b,c,d,buffer[i + 9],5,568446438);
             d = gg(d,a,b,c,buffer[i + 14],9,3275163606);
             c = gg(c,d,a,b,buffer[i + 3],14,4107603335);
             b = gg(b,c,d,a,buffer[i + 8],20,1163531501);
             a = gg(a,b,c,d,buffer[i + 13],5,2850285829);
             d = gg(d,a,b,c,buffer[i + 2],9,4243563512);
             c = gg(c,d,a,b,buffer[i + 7],14,1735328473);
             b = gg(b,c,d,a,buffer[i + 12],20,2368359562);
             a = hh(a,b,c,d,buffer[i + 5],4,4294588738);
             d = hh(d,a,b,c,buffer[i + 8],11,2272392833);
             c = hh(c,d,a,b,buffer[i + 11],16,1839030562);
             b = hh(b,c,d,a,buffer[i + 14],23,4259657740);
             a = hh(a,b,c,d,buffer[i + 1],4,2763975236);
             d = hh(d,a,b,c,buffer[i + 4],11,1272893353);
             c = hh(c,d,a,b,buffer[i + 7],16,4139469664);
             b = hh(b,c,d,a,buffer[i + 10],23,3200236656);
             a = hh(a,b,c,d,buffer[i + 13],4,681279174);
             d = hh(d,a,b,c,buffer[i + 0],11,3936430074);
             c = hh(c,d,a,b,buffer[i + 3],16,3572445317);
             b = hh(b,c,d,a,buffer[i + 6],23,76029189);
             a = hh(a,b,c,d,buffer[i + 9],4,3654602809);
             d = hh(d,a,b,c,buffer[i + 12],11,3873151461);
             c = hh(c,d,a,b,buffer[i + 15],16,530742520);
             b = hh(b,c,d,a,buffer[i + 2],23,3299628645);
             a = ii(a,b,c,d,buffer[i + 0],6,4096336452);
             d = ii(d,a,b,c,buffer[i + 7],10,1126891415);
             c = ii(c,d,a,b,buffer[i + 14],15,2878612391);
             b = ii(b,c,d,a,buffer[i + 5],21,4237533241);
             a = ii(a,b,c,d,buffer[i + 12],6,1700485571);
             d = ii(d,a,b,c,buffer[i + 3],10,2399980690);
             c = ii(c,d,a,b,buffer[i + 10],15,4293915773);
             b = ii(b,c,d,a,buffer[i + 1],21,2240044497);
             a = ii(a,b,c,d,buffer[i + 8],6,1873313359);
             d = ii(d,a,b,c,buffer[i + 15],10,4264355552);
             c = ii(c,d,a,b,buffer[i + 6],15,2734768916);
             b = ii(b,c,d,a,buffer[i + 13],21,1309151649);
             a = ii(a,b,c,d,buffer[i + 4],6,4149444226);
             d = ii(d,a,b,c,buffer[i + 11],10,3174756917);
             c = ii(c,d,a,b,buffer[i + 2],15,718787259);
             b = ii(b,c,d,a,buffer[i + 9],21,3951481745);
             w[0] = add(a,w[0]);
             w[1] = add(b,w[1]);
             w[2] = add(c,w[2]);
             w[3] = add(d,w[3])}
           var t=new Array(16);
           for(var i=0;i < 4;i++)
            for(var j=0;j < 4;j++)t[i * 4 + j] = w[i] >> 8 * j & 255;
           return t}
         return function(s,ofs,len)
          {var buf=[];
           switch(s.t & 6)
            {default:caml_convert_string_to_bytes(s);case 0:
              var b=s.c;
              for(var i=0;i < len;i += 4)
               {var j=i + ofs;
                buf[i >> 2]
                =
                b.charCodeAt(j)
                |
                b.charCodeAt(j + 1)
                <<
                8
                |
                b.charCodeAt(j + 2)
                <<
                16
                |
                b.charCodeAt(j + 3)
                <<
                24}
              for(;i < len;i++)
               buf[i >> 2] |= b.charCodeAt(i + ofs) << 8 * (i & 3);
              break;
             case 4:
              var a=s.c;
              for(var i=0;i < len;i += 4)
               {var j=i + ofs;
                buf[i >> 2]
                =
                a[j]
                |
                a[j + 1]
                <<
                8
                |
                a[j + 2]
                <<
                16
                |
                a[j + 3]
                <<
                24}
              for(;i < len;i++)buf[i >> 2] |= a[i + ofs] << 8 * (i & 3)
             }
           return caml_string_of_array(md5(buf,len))}}
       ();
    function caml_ml_bytes_length(s){return s.l}
    function caml_raise_sys_error(msg)
     {caml_raise_with_string(caml_global_data.Sys_error,msg)}
    var caml_ml_channels=new Array();
    function caml_ml_flush(chanid)
     {var chan=caml_ml_channels[chanid];
      if(!chan.opened)caml_raise_sys_error("Cannot flush a closed channel");
      if(!chan.buffer || chan.buffer == "")return 0;
      if
       (chan.fd
        &&
        caml_global_data.fds[chan.fd]
        &&
        caml_global_data.fds[chan.fd].output)
       {var output=caml_global_data.fds[chan.fd].output;
        switch(output.length)
         {case 2:output(chanid,chan.buffer);break;default:output(chan.buffer)}}
      chan.buffer = "";
      return 0}
    if(joo_global_object.process && joo_global_object.process.cwd)
     var caml_current_dir=joo_global_object.process.cwd().replace(/\\/g,"/");
    else
     var caml_current_dir="/static";
    if(caml_current_dir.slice(-1) !== "/")caml_current_dir += "/";
    function caml_make_path(name)
     {name = name instanceof MlString?name.toString():name;
      if(name.charCodeAt(0) != 47)name = caml_current_dir + name;
      var comp=name.split("/"),ncomp=[];
      for(var i=0;i < comp.length;i++)
       switch(comp[i])
        {case "..":if(ncomp.length > 1)ncomp.pop();break;
         case ".":break;
         case "":if(ncomp.length == 0)ncomp.push("");break;
         default:ncomp.push(comp[i]);break}
      ncomp.orig = name;
      return ncomp}
    function caml_raise_no_such_file(name)
     {name = name instanceof MlString?name.toString():name;
      caml_raise_sys_error(name + ": No such file or directory")}
    function caml_string_unsafe_get(s,i)
     {switch(s.t & 6)
       {default:if(i >= s.c.length)return 0;case 0:return s.c.charCodeAt(i);
        case 4:return s.c[i]
        }}
    function caml_string_get(s,i)
     {if(i >>> 0 >= s.l)caml_string_bound_error();
      return caml_string_unsafe_get(s,i)}
    function caml_create_string(len)
     {if(len < 0)caml_invalid_argument("String.create");
      return new MlString(len?2:9,"",len)}
    function caml_ml_string_length(s){return s.l}
    function MlFile(){}
    function MlFakeFile(content){this.data = content}
    MlFakeFile.prototype = new MlFile();
    MlFakeFile.prototype.truncate
    =
    function(len)
     {var old=this.data;
      this.data = caml_create_string(len | 0);
      caml_blit_string(old,0,this.data,0,len)};
    MlFakeFile.prototype.length
    =
    function(){return caml_ml_string_length(this.data)};
    MlFakeFile.prototype.write
    =
    function(offset,buf,pos,len)
     {var clen=this.length();
      if(offset + len >= clen)
       {var new_str=caml_create_string(offset + len),old_data=this.data;
        this.data = new_str;
        caml_blit_string(old_data,0,this.data,0,clen)}
      caml_blit_string(buf,pos,this.data,offset,len);
      return 0};
    MlFakeFile.prototype.read
    =
    function(offset,buf,pos,len)
     {var clen=this.length();
      caml_blit_string(this.data,offset,buf,pos,len);
      return 0};
    MlFakeFile.prototype.read_one
    =
    function(offset){return caml_string_get(this.data,offset)};
    MlFakeFile.prototype.close = function(){};
    MlFakeFile.prototype.constructor = MlFakeFile;
    function MlFakeDevice(root,f)
     {this.content = {};this.root = root;this.lookupFun = f}
    MlFakeDevice.prototype.nm = function(name){return this.root + name};
    MlFakeDevice.prototype.lookup
    =
    function(name)
     {if(!this.content[name] && this.lookupFun)
       {var
         res=
          this.lookupFun(caml_new_string(this.root),caml_new_string(name));
        if(res != 0)this.content[name] = new MlFakeFile(res[1])}};
    MlFakeDevice.prototype.exists
    =
    function(name)
     {if(name == "")return 1;
      var name_slash=name + "/",r=new RegExp("^" + name_slash);
      for(var n in this.content)if(n.match(r))return 1;
      this.lookup(name);
      return this.content[name]?1:0};
    MlFakeDevice.prototype.readdir
    =
    function(name)
     {var
       name_slash=name == ""?"":name + "/",
       r=new RegExp("^" + name_slash + "([^/]*)"),
       seen={},
       a=[];
      for(var n in this.content)
       {var m=n.match(r);if(m && !seen[m[1]]){seen[m[1]] = true;a.push(m[1])}}
      return a};
    MlFakeDevice.prototype.is_dir
    =
    function(name)
     {var
       name_slash=name == ""?"":name + "/",
       r=new RegExp("^" + name_slash + "([^/]*)"),
       a=[];
      for(var n in this.content){var m=n.match(r);if(m)return 1}
      return 0};
    MlFakeDevice.prototype.unlink
    =
    function(name)
     {var ok=this.content[name]?true:false;
      delete this.content[name];
      return ok};
    MlFakeDevice.prototype.open
    =
    function(name,f)
     {if(f.rdonly && f.wronly)
       caml_raise_sys_error
        (this.nm(name)
         +
         " : flags Open_rdonly and Open_wronly are not compatible");
      if(f.text && f.binary)
       caml_raise_sys_error
        (this.nm(name)
         +
         " : flags Open_text and Open_binary are not compatible");
      this.lookup(name);
      if(this.content[name])
       {if(this.is_dir(name))
         caml_raise_sys_error(this.nm(name) + " : is a directory");
        if(f.create && f.excl)
         caml_raise_sys_error(this.nm(name) + " : file already exists");
        var file=this.content[name];
        if(f.truncate)file.truncate();
        return file}
      else
       if(f.create)
        {this.content[name] = new MlFakeFile(caml_create_string(0));
         return this.content[name]}
       else
        caml_raise_no_such_file(this.nm(name))};
    MlFakeDevice.prototype.register
    =
    function(name,content)
     {if(this.content[name])
       caml_raise_sys_error(this.nm(name) + " : file already exists");
      if(content instanceof MlString)
       this.content[name] = new MlFakeFile(content);
      else
       if(content instanceof Array)
        this.content[name] = new MlFakeFile(caml_string_of_array(content));
       else
        if(content.toString)
         {var mlstring=caml_new_string(content.toString());
          this.content[name] = new MlFakeFile(mlstring)}};
    MlFakeDevice.prototype.constructor = MlFakeDevice;
    function caml_array_of_string(s)
     {if(s.t != 4)caml_convert_string_to_array(s);return s.c}
    function caml_string_unsafe_set(s,i,c)
     {c &= 255;
      if(s.t != 4)
       {if(i == s.c.length)
         {s.c += String.fromCharCode(c);if(i + 1 == s.l)s.t = 0;return 0}
        caml_convert_string_to_array(s)}
      s.c[i] = c;
      return 0}
    function caml_string_set(s,i,c)
     {if(i >>> 0 >= s.l)caml_string_bound_error();
      return caml_string_unsafe_set(s,i,c)}
    var Buffer=joo_global_object.Buffer;
    function MlNodeFile(fd){this.fs = require("fs");this.fd = fd}
    MlNodeFile.prototype = new MlFile();
    MlNodeFile.prototype.truncate
    =
    function(len){this.fs.ftruncateSync(this.fd,len | 0)};
    MlNodeFile.prototype.length
    =
    function(){return this.fs.fstatSync(this.fd).size};
    MlNodeFile.prototype.write
    =
    function(offset,buf,buf_offset,len)
     {var a=caml_array_of_string(buf);
      if(!a instanceof joo_global_object.Uint8Array)
       a = new (joo_global_object.Uint8Array)(a);
      var buffer=new Buffer(a);
      this.fs.writeSync(this.fd,buffer,buf_offset,len,offset);
      return 0};
    MlNodeFile.prototype.read
    =
    function(offset,buf,buf_offset,len)
     {var a=caml_array_of_string(buf);
      if(!(a instanceof joo_global_object.Uint8Array))
       a = new (joo_global_object.Uint8Array)(a);
      var buffer=new Buffer(a);
      this.fs.readSync(this.fd,buffer,buf_offset,len,offset);
      for(var i=0;i < len;i++)
       caml_string_set(buf,buf_offset + i,buffer[buf_offset + i]);
      return 0};
    MlNodeFile.prototype.read_one
    =
    function(offset)
     {var a=new (joo_global_object.Uint8Array)(1),buffer=new Buffer(a);
      this.fs.readSync(this.fd,buffer,0,1,offset);
      return buffer[0]};
    MlNodeFile.prototype.close = function(){this.fs.closeSync(this.fd)};
    MlNodeFile.prototype.constructor = MlNodeFile;
    function MlNodeDevice(root){this.fs = require("fs");this.root = root}
    MlNodeDevice.prototype.nm = function(name){return this.root + name};
    MlNodeDevice.prototype.exists
    =
    function(name){return this.fs.existsSync(this.nm(name))?1:0};
    MlNodeDevice.prototype.readdir
    =
    function(name){return this.fs.readdirSync(this.nm(name))};
    MlNodeDevice.prototype.is_dir
    =
    function(name){return this.fs.statSync(this.nm(name)).isDirectory()?1:0};
    MlNodeDevice.prototype.unlink
    =
    function(name)
     {var b=this.fs.existsSync(this.nm(name))?1:0;
      this.fs.unlinkSync(this.nm(name));
      return b};
    MlNodeDevice.prototype.open
    =
    function(name,f)
     {var consts=require("constants"),res=0;
      for(var key in f)
       switch(key)
        {case "rdonly":res |= consts.O_RDONLY;break;
         case "wronly":res |= consts.O_WRONLY;break;
         case "append":res |= consts.O_WRONLY | consts.O_APPEND;break;
         case "create":res |= consts.O_CREAT;break;
         case "truncate":res |= consts.O_TRUNC;break;
         case "excl":res |= consts.O_EXCL;break;
         case "binary":res |= consts.O_BINARY;break;
         case "text":res |= consts.O_TEXT;break;
         case "nonblock":res |= consts.O_NONBLOCK;break
         }
      var fd=this.fs.openSync(this.nm(name),res);
      return new MlNodeFile(fd)};
    MlNodeDevice.prototype.rename
    =
    function(o,n){this.fs.renameSync(this.nm(o),this.nm(n))};
    MlNodeDevice.prototype.constructor = MlNodeDevice;
    var caml_root=caml_current_dir.match(/[^\/]*\//)[0],jsoo_mount_point=[];
    if
     (typeof module
      !==
      "undefined"
      &&
      module.exports
      &&
      typeof require
      !==
      "undefined")
     jsoo_mount_point.push
      ({path:caml_root,device:new MlNodeDevice(caml_root)});
    else
     jsoo_mount_point.push
      ({path:caml_root,device:new MlFakeDevice(caml_root)});
    jsoo_mount_point.push
     ({path:caml_root + "static/",
       device:new MlFakeDevice(caml_root + "static/")});
    function resolve_fs_device(name)
     {var
       path=caml_make_path(name),
       name=path.join("/"),
       name_slash=name + "/",
       res;
      for(var i=0;i < jsoo_mount_point.length;i++)
       {var m=jsoo_mount_point[i];
        if
         (name_slash.search(m.path)
          ==
          0
          &&
          (!res || res.path.length < m.path.length))
         res
         =
         {path:m.path,
          device:m.device,
          rest:name.substring(m.path.length,name.length)}}
      return res}
    function caml_std_output(chanid,s)
     {var
       chan=caml_ml_channels[chanid],
       str=caml_new_string(s),
       slen=caml_ml_string_length(str);
      chan.file.write(chan.offset,str,0,slen);
      chan.offset += slen;
      return 0}
    function js_print_stderr(s)
     {var g=joo_global_object;
      if(g.process && g.process.stdout && g.process.stdout.write)
       g.process.stderr.write(s);
      else
       {if(s.charCodeAt(s.length - 1) == 10)s = s.substr(0,s.length - 1);
        var v=g.console;
        v && v.error && v.error(s)}}
    function js_print_stdout(s)
     {var g=joo_global_object;
      if(g.process && g.process.stdout && g.process.stdout.write)
       g.process.stdout.write(s);
      else
       {if(s.charCodeAt(s.length - 1) == 10)s = s.substr(0,s.length - 1);
        var v=g.console;
        v && v.log && v.log(s)}}
    function caml_sys_open_internal(idx,output,file,flags)
     {if(caml_global_data.fds === undefined)
       caml_global_data.fds = new Array();
      flags = flags?flags:{};
      var info={};
      info.file = file;
      info.offset = flags.append?file.length():0;
      info.flags = flags;
      info.output = output;
      caml_global_data.fds[idx] = info;
      if(!caml_global_data.fd_last_idx || idx > caml_global_data.fd_last_idx)
       caml_global_data.fd_last_idx = idx;
      return idx}
    function caml_sys_open(name,flags,_perms)
     {var f={};
      while(flags)
       {switch(flags[1])
         {case 0:f.rdonly = 1;break;
          case 1:f.wronly = 1;break;
          case 2:f.append = 1;break;
          case 3:f.create = 1;break;
          case 4:f.truncate = 1;break;
          case 5:f.excl = 1;break;
          case 6:f.binary = 1;break;
          case 7:f.text = 1;break;
          case 8:f.nonblock = 1;break
          }
        flags = flags[2]}
      if(f.rdonly && f.wronly)
       caml_raise_sys_error
        (name.toString()
         +
         " : flags Open_rdonly and Open_wronly are not compatible");
      if(f.text && f.binary)
       caml_raise_sys_error
        (name.toString()
         +
         " : flags Open_text and Open_binary are not compatible");
      var
       root=resolve_fs_device(name),
       file=root.device.open(root.rest,f),
       idx=caml_global_data.fd_last_idx?caml_global_data.fd_last_idx:0;
      return caml_sys_open_internal(idx + 1,caml_std_output,file,f)}
    caml_sys_open_internal
     (0,caml_std_output,new MlFakeFile(caml_create_string(0)));
    caml_sys_open_internal
     (1,js_print_stdout,new MlFakeFile(caml_create_string(0)));
    caml_sys_open_internal
     (2,js_print_stderr,new MlFakeFile(caml_create_string(0)));
    function caml_ml_open_descriptor_in(fd)
     {var data=caml_global_data.fds[fd];
      if(data.flags.wronly)caml_raise_sys_error("fd " + fd + " is writeonly");
      var
       channel=
        {file:data.file,
         offset:data.offset,
         fd:fd,
         opened:true,
         out:false,
         refill:null};
      caml_ml_channels[channel.fd] = channel;
      return channel.fd}
    function caml_ml_open_descriptor_out(fd)
     {var data=caml_global_data.fds[fd];
      if(data.flags.rdonly)caml_raise_sys_error("fd " + fd + " is readonly");
      var
       channel=
        {file:data.file,
         offset:data.offset,
         fd:fd,
         opened:true,
         out:true,
         buffer:""};
      caml_ml_channels[channel.fd] = channel;
      return channel.fd}
    function caml_ml_out_channels_list()
     {var l=0;
      for(var c=0;c < caml_ml_channels.length;c++)
       if
        (caml_ml_channels[c]
         &&
         caml_ml_channels[c].opened
         &&
         caml_ml_channels[c].out)
        l = [0,caml_ml_channels[c].fd,l];
      return l}
    function caml_raise_constant(tag){throw tag}
    function caml_raise_zero_divide()
     {caml_raise_constant(caml_global_data.Division_by_zero)}
    function caml_mod(x,y){if(y == 0)caml_raise_zero_divide();return x % y}
    function caml_notequal(x,y){return +(caml_compare_val(x,y,false) != 0)}
    function caml_obj_set_tag(x,tag){x[0] = tag;return 0}
    function caml_obj_tag(x)
     {return x instanceof Array?x[0]:x instanceof MlString?252:1e3}
    function caml_register_global(n,v,name_opt)
     {caml_global_data[n + 1] = v;if(name_opt)caml_global_data[name_opt] = v}
    var caml_named_values={};
    function caml_register_named_value(nm,v)
     {caml_named_values[caml_bytes_of_string(nm)] = v;return 0}
    function caml_string_equal(s1,s2)
     {if(s1 === s2)return 1;
      s1.t & 6 && caml_convert_string_to_bytes(s1);
      s2.t & 6 && caml_convert_string_to_bytes(s2);
      return s1.c == s2.c?1:0}
    function caml_string_notequal(s1,s2){return 1 - caml_string_equal(s1,s2)}
    function caml_sys_const_max_wosize(){return 2147483647 / 4 | 0}
    function caml_sys_get_config(){return [0,caml_new_string("Unix"),32,0]}
    function caml_raise_not_found()
     {caml_raise_constant(caml_global_data.Not_found)}
    function caml_sys_getenv(name)
     {var g=joo_global_object,n=name.toString();
      if(g.process && g.process.env && g.process.env[n] != undefined)
       return caml_js_to_string(g.process.env[n]);
      caml_raise_not_found()}
    function caml_sys_random_seed()
     {var x=new Date() ^ 4294967295 * Math.random();return [0,x]}
    function caml_trampoline(res)
     {var c=1;
      while(res && res.joo_tramp)
       {res = res.joo_tramp.apply(null,res.joo_args);c++}
      return res}
    function caml_trampoline_return(f,args)
     {return {joo_tramp:f,joo_args:args}}
    function caml_return_exn_constant(tag){return tag}
    function caml_named_value(nm){return caml_named_values[nm]}
    function caml_wrap_exception(e)
     {if(e instanceof Array)return e;
      if
       (joo_global_object.RangeError
        &&
        e instanceof joo_global_object.RangeError
        &&
        e.message
        &&
        e.message.match(/maximum call stack/i))
       return caml_return_exn_constant(caml_global_data.Stack_overflow);
      if
       (joo_global_object.InternalError
        &&
        e instanceof joo_global_object.InternalError
        &&
        e.message
        &&
        e.message.match(/too much recursion/i))
       return caml_return_exn_constant(caml_global_data.Stack_overflow);
      if(e instanceof joo_global_object.Error && caml_named_value("jsError"))
       return [0,caml_named_value("jsError"),e];
      return [0,caml_global_data.Failure,caml_js_to_string(String(e))]}
    function unix_inet_addr_of_string(){return 0}
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):caml_call_gen(f,[a0,a1,a2])}
    var
     Out_of_memory=[248,caml_new_string("Out_of_memory"),-1],
     Sys_error=[248,caml_new_string("Sys_error"),-2],
     Failure=[248,caml_new_string("Failure"),-3],
     Invalid_argument=[248,caml_new_string("Invalid_argument"),-4],
     End_of_file=[248,caml_new_string("End_of_file"),-5],
     Division_by_zero=[248,caml_new_string("Division_by_zero"),-6],
     Not_found=[248,caml_new_string("Not_found"),-7],
     Match_failure=[248,caml_new_string("Match_failure"),-8],
     Stack_overflow=[248,caml_new_string("Stack_overflow"),-9],
     Sys_blocked_io=[248,caml_new_string("Sys_blocked_io"),-10],
     Assert_failure=[248,caml_new_string("Assert_failure"),-11],
     Undefined_recursive_module=
      [248,caml_new_string("Undefined_recursive_module"),-12],
     img=caml_new_string("media/billiards.png"),
     img$1=caml_new_string("media/easter_egg.png"),
     img$0=caml_new_string("media/gries.png"),
     playing_field=[0,460,920],
     playing_field$0=[0,460,920];
    caml_register_global
     (11,Undefined_recursive_module,"Undefined_recursive_module");
    caml_register_global(10,Assert_failure,"Assert_failure");
    caml_register_global(9,Sys_blocked_io,"Sys_blocked_io");
    caml_register_global(8,Stack_overflow,"Stack_overflow");
    caml_register_global(7,Match_failure,"Match_failure");
    caml_register_global(6,Not_found,"Not_found");
    caml_register_global(5,Division_by_zero,"Division_by_zero");
    caml_register_global(4,End_of_file,"End_of_file");
    caml_register_global(3,Invalid_argument,"Invalid_argument");
    caml_register_global(2,Failure,"Failure");
    caml_register_global(1,Sys_error,"Sys_error");
    caml_register_global(0,Out_of_memory,"Out_of_memory");
    var
     _e_=caml_new_string("%.12g"),
     _d_=caml_new_string("."),
     _b_=caml_new_string("true"),
     _c_=caml_new_string("false"),
     _g_=caml_new_string("nth"),
     _h_=caml_new_string("List.nth"),
     _f_=caml_new_string("hd"),
     _i_=caml_new_string("\\\\"),
     _j_=caml_new_string("\\'"),
     _k_=caml_new_string("\\b"),
     _l_=caml_new_string("\\t"),
     _m_=caml_new_string("\\n"),
     _n_=caml_new_string("\\r"),
     _q_=caml_new_string("String.blit / Bytes.blit_string"),
     _p_=caml_new_string("Bytes.blit"),
     _o_=caml_new_string("String.sub / Bytes.sub"),
     _r_=caml_new_string("String.contains_from / Bytes.contains_from"),
     _s_=caml_new_string("CamlinternalLazy.Undefined"),
     _t_=caml_new_string("Buffer.add: cannot grow buffer"),
     _C_=caml_new_string("%c"),
     _D_=caml_new_string("%s"),
     _E_=caml_new_string("%i"),
     _F_=caml_new_string("%li"),
     _G_=caml_new_string("%ni"),
     _H_=caml_new_string("%Li"),
     _I_=caml_new_string("%f"),
     _J_=caml_new_string("%B"),
     _K_=caml_new_string("%{"),
     _L_=caml_new_string("%}"),
     _M_=caml_new_string("%("),
     _N_=caml_new_string("%)"),
     _O_=caml_new_string("%a"),
     _P_=caml_new_string("%t"),
     _Q_=caml_new_string("%?"),
     _R_=caml_new_string("%r"),
     _S_=caml_new_string("%_r"),
     _T_=[0,caml_new_string("camlinternalFormat.ml"),846,23],
     _ac_=[0,caml_new_string("camlinternalFormat.ml"),810,21],
     _W_=[0,caml_new_string("camlinternalFormat.ml"),811,21],
     _ad_=[0,caml_new_string("camlinternalFormat.ml"),814,21],
     _X_=[0,caml_new_string("camlinternalFormat.ml"),815,21],
     _ae_=[0,caml_new_string("camlinternalFormat.ml"),818,19],
     _Y_=[0,caml_new_string("camlinternalFormat.ml"),819,19],
     _af_=[0,caml_new_string("camlinternalFormat.ml"),822,22],
     _Z_=[0,caml_new_string("camlinternalFormat.ml"),823,22],
     _ag_=[0,caml_new_string("camlinternalFormat.ml"),827,30],
     ___=[0,caml_new_string("camlinternalFormat.ml"),828,30],
     _aa_=[0,caml_new_string("camlinternalFormat.ml"),832,26],
     _U_=[0,caml_new_string("camlinternalFormat.ml"),833,26],
     _ab_=[0,caml_new_string("camlinternalFormat.ml"),842,28],
     _V_=[0,caml_new_string("camlinternalFormat.ml"),843,28],
     _$_=[0,caml_new_string("camlinternalFormat.ml"),847,23],
     _bd_=caml_new_string("%u"),
     _bb_=[0,caml_new_string("camlinternalFormat.ml"),1525,4],
     _bc_=caml_new_string("Printf: bad conversion %["),
     _be_=[0,caml_new_string("camlinternalFormat.ml"),1593,39],
     _bf_=[0,caml_new_string("camlinternalFormat.ml"),1616,31],
     _bg_=[0,caml_new_string("camlinternalFormat.ml"),1617,31],
     _bh_=caml_new_string("Printf: bad conversion %_"),
     _bi_=caml_new_string("@{"),
     _bj_=caml_new_string("@["),
     _a$_=caml_new_string("nan"),
     _ba_=caml_new_string("."),
     _a9_=caml_new_string("neg_infinity"),
     _a__=caml_new_string("infinity"),
     _a8_=caml_new_string("%.12g"),
     _aV_=caml_new_string("%nd"),
     _aW_=caml_new_string("%+nd"),
     _aX_=caml_new_string("% nd"),
     _aY_=caml_new_string("%ni"),
     _aZ_=caml_new_string("%+ni"),
     _a0_=caml_new_string("% ni"),
     _a1_=caml_new_string("%nx"),
     _a2_=caml_new_string("%#nx"),
     _a3_=caml_new_string("%nX"),
     _a4_=caml_new_string("%#nX"),
     _a5_=caml_new_string("%no"),
     _a6_=caml_new_string("%#no"),
     _a7_=caml_new_string("%nu"),
     _aI_=caml_new_string("%ld"),
     _aJ_=caml_new_string("%+ld"),
     _aK_=caml_new_string("% ld"),
     _aL_=caml_new_string("%li"),
     _aM_=caml_new_string("%+li"),
     _aN_=caml_new_string("% li"),
     _aO_=caml_new_string("%lx"),
     _aP_=caml_new_string("%#lx"),
     _aQ_=caml_new_string("%lX"),
     _aR_=caml_new_string("%#lX"),
     _aS_=caml_new_string("%lo"),
     _aT_=caml_new_string("%#lo"),
     _aU_=caml_new_string("%lu"),
     _av_=caml_new_string("%Ld"),
     _aw_=caml_new_string("%+Ld"),
     _ax_=caml_new_string("% Ld"),
     _ay_=caml_new_string("%Li"),
     _az_=caml_new_string("%+Li"),
     _aA_=caml_new_string("% Li"),
     _aB_=caml_new_string("%Lx"),
     _aC_=caml_new_string("%#Lx"),
     _aD_=caml_new_string("%LX"),
     _aE_=caml_new_string("%#LX"),
     _aF_=caml_new_string("%Lo"),
     _aG_=caml_new_string("%#Lo"),
     _aH_=caml_new_string("%Lu"),
     _ai_=caml_new_string("%d"),
     _aj_=caml_new_string("%+d"),
     _ak_=caml_new_string("% d"),
     _al_=caml_new_string("%i"),
     _am_=caml_new_string("%+i"),
     _an_=caml_new_string("% i"),
     _ao_=caml_new_string("%x"),
     _ap_=caml_new_string("%#x"),
     _aq_=caml_new_string("%X"),
     _ar_=caml_new_string("%#X"),
     _as_=caml_new_string("%o"),
     _at_=caml_new_string("%#o"),
     _au_=caml_new_string("%u"),
     _u_=caml_new_string("@]"),
     _v_=caml_new_string("@}"),
     _w_=caml_new_string("@?"),
     _x_=caml_new_string("@\n"),
     _y_=caml_new_string("@."),
     _z_=caml_new_string("@@"),
     _A_=caml_new_string("@%"),
     _B_=caml_new_string("@"),
     _ah_=caml_new_string("CamlinternalFormat.Type_mismatch"),
     _bk_=caml_new_string("x"),
     _ja_=caml_new_string("OCAMLRUNPARAM"),
     _i__=caml_new_string("CAMLRUNPARAM"),
     _bl_=caml_new_string(""),
     _i9_=caml_new_string("TMPDIR"),
     _i8_=caml_new_string("TEMP"),
     _bn_=caml_new_string("Cygwin"),
     _bo_=caml_new_string("Win32"),
     _bp_=caml_new_string("Js.Error"),
     _bq_=caml_new_string("jsError"),
     _bw_=caml_new_string("canvas"),
     _bu_=caml_new_string("audio"),
     _bt_=caml_new_string("img"),
     _bs_=caml_new_string("h1"),
     _br_=caml_new_string("p"),
     _bv_=caml_new_string("Dom_html.Canvas_not_available"),
     _bB_=caml_new_string("E2BIG"),
     _bD_=caml_new_string("EACCES"),
     _bE_=caml_new_string("EAGAIN"),
     _bF_=caml_new_string("EBADF"),
     _bG_=caml_new_string("EBUSY"),
     _bH_=caml_new_string("ECHILD"),
     _bI_=caml_new_string("EDEADLK"),
     _bJ_=caml_new_string("EDOM"),
     _bK_=caml_new_string("EEXIST"),
     _bL_=caml_new_string("EFAULT"),
     _bM_=caml_new_string("EFBIG"),
     _bN_=caml_new_string("EINTR"),
     _bO_=caml_new_string("EINVAL"),
     _bP_=caml_new_string("EIO"),
     _bQ_=caml_new_string("EISDIR"),
     _bR_=caml_new_string("EMFILE"),
     _bS_=caml_new_string("EMLINK"),
     _bT_=caml_new_string("ENAMETOOLONG"),
     _bU_=caml_new_string("ENFILE"),
     _bV_=caml_new_string("ENODEV"),
     _bW_=caml_new_string("ENOENT"),
     _bX_=caml_new_string("ENOEXEC"),
     _bY_=caml_new_string("ENOLCK"),
     _bZ_=caml_new_string("ENOMEM"),
     _b0_=caml_new_string("ENOSPC"),
     _b1_=caml_new_string("ENOSYS"),
     _b2_=caml_new_string("ENOTDIR"),
     _b3_=caml_new_string("ENOTEMPTY"),
     _b4_=caml_new_string("ENOTTY"),
     _b5_=caml_new_string("ENXIO"),
     _b6_=caml_new_string("EPERM"),
     _b7_=caml_new_string("EPIPE"),
     _b8_=caml_new_string("ERANGE"),
     _b9_=caml_new_string("EROFS"),
     _b__=caml_new_string("ESPIPE"),
     _b$_=caml_new_string("ESRCH"),
     _ca_=caml_new_string("EXDEV"),
     _cb_=caml_new_string("EWOULDBLOCK"),
     _cc_=caml_new_string("EINPROGRESS"),
     _cd_=caml_new_string("EALREADY"),
     _ce_=caml_new_string("ENOTSOCK"),
     _cf_=caml_new_string("EDESTADDRREQ"),
     _cg_=caml_new_string("EMSGSIZE"),
     _ch_=caml_new_string("EPROTOTYPE"),
     _ci_=caml_new_string("ENOPROTOOPT"),
     _cj_=caml_new_string("EPROTONOSUPPORT"),
     _ck_=caml_new_string("ESOCKTNOSUPPORT"),
     _cl_=caml_new_string("EOPNOTSUPP"),
     _cm_=caml_new_string("EPFNOSUPPORT"),
     _cn_=caml_new_string("EAFNOSUPPORT"),
     _co_=caml_new_string("EADDRINUSE"),
     _cp_=caml_new_string("EADDRNOTAVAIL"),
     _cq_=caml_new_string("ENETDOWN"),
     _cr_=caml_new_string("ENETUNREACH"),
     _cs_=caml_new_string("ENETRESET"),
     _ct_=caml_new_string("ECONNABORTED"),
     _cu_=caml_new_string("ECONNRESET"),
     _cv_=caml_new_string("ENOBUFS"),
     _cw_=caml_new_string("EISCONN"),
     _cx_=caml_new_string("ENOTCONN"),
     _cy_=caml_new_string("ESHUTDOWN"),
     _cz_=caml_new_string("ETOOMANYREFS"),
     _cA_=caml_new_string("ETIMEDOUT"),
     _cB_=caml_new_string("ECONNREFUSED"),
     _cC_=caml_new_string("EHOSTDOWN"),
     _cD_=caml_new_string("EHOSTUNREACH"),
     _cE_=caml_new_string("ELOOP"),
     _cF_=caml_new_string("EOVERFLOW"),
     _cG_=
      [0,
       [11,caml_new_string("EUNKNOWNERR "),[4,0,0,0,0]],
       caml_new_string("EUNKNOWNERR %d")],
     _bC_=
      [0,
       [11,
        caml_new_string("Unix.Unix_error(Unix."),
        [2,
         0,
         [11,
          caml_new_string(", "),
          [3,0,[11,caml_new_string(", "),[3,0,[12,41,0]]]]]]],
       caml_new_string("Unix.Unix_error(Unix.%s, %S, %S)")],
     _bx_=caml_new_string("Unix.Unix_error"),
     _by_=caml_new_string(""),
     _bz_=caml_new_string(""),
     _bA_=caml_new_string("Unix.Unix_error"),
     _cH_=caml_new_string("0.0.0.0"),
     _cI_=caml_new_string("127.0.0.1"),
     _i7_=caml_new_string("::"),
     _i6_=caml_new_string("::1"),
     _cJ_=caml_new_string(""),
     _cK_=[0,caml_new_string(""),[0,0,0],[0,0,0]],
     _cL_=[0,880,390],
     _cM_=[0,-0,-0],
     _cN_=[0,30,30],
     _cO_=caml_new_string("Cue Ball"),
     _cP_=caml_new_string("media/billiards.png"),
     _cQ_=[0,caml_new_string(""),[0,0,0],[0,0,0]],
     _cR_=[0,412,390],
     _cS_=[0,0,0],
     _cT_=[0,30,30],
     _cU_=caml_new_string("One Ball"),
     _cV_=caml_new_string("media/billiards.png"),
     _cW_=[0,caml_new_string("media/billiards.png"),[0,30,30],[0,100,0]],
     _cX_=[0,308,420],
     _cY_=[0,0,0],
     _cZ_=[0,30,30],
     _c0_=caml_new_string("Two Ball"),
     _c1_=caml_new_string("media/billiards.png"),
     _c2_=[0,caml_new_string("media/billiards.png"),[0,30,30],[0,150,0]],
     _c3_=[0,386,375],
     _c4_=[0,0,0],
     _c5_=[0,30,30],
     _c6_=caml_new_string("Three Ball"),
     _c7_=caml_new_string("media/billiards.png"),
     _c8_=[0,caml_new_string("media/billiards.png"),[0,25,25],[0,200,0]],
     _c9_=[0,334,375],
     _c__=[0,0,0],
     _c$_=[0,30,30],
     _da_=caml_new_string("Four Ball"),
     _db_=caml_new_string("media/billiards.png"),
     _dc_=[0,caml_new_string("media/billiards.png"),[0,30,30],[0,250,0]],
     _dd_=[0,308,360],
     _de_=[0,0,0],
     _df_=[0,30,30],
     _dg_=caml_new_string("Five Ball"),
     _dh_=caml_new_string("media/billiards.png"),
     _di_=[0,caml_new_string("media/billiards.png"),[0,30,30],[0,300,0]],
     _dj_=[0,360,420],
     _dk_=[0,0,0],
     _dl_=[0,30,30],
     _dm_=caml_new_string("Six Ball"),
     _dn_=caml_new_string("media/billiards.png"),
     _do_=[0,caml_new_string("media/billiards.png"),[0,30,30],[0,350,0]],
     _dp_=[0,308,450],
     _dq_=[0,0,0],
     _dr_=[0,30,30],
     _ds_=caml_new_string("Seven Ball"),
     _dt_=caml_new_string("media/billiards.png"),
     _du_=[0,caml_new_string("media/billiards.png"),[0,30,30],[0,400,0]],
     _dv_=[0,360,390],
     _dw_=[0,0,0],
     _dx_=[0,30,30],
     _dy_=caml_new_string("Eight Ball"),
     _dz_=caml_new_string("media/billiards.png"),
     _dA_=[0,caml_new_string("media/billiards.png"),[0,30,30],[0,450,0]],
     _dB_=[0,334,345],
     _dC_=[0,0,0],
     _dD_=[0,30,30],
     _dE_=caml_new_string("Nine Ball"),
     _dF_=caml_new_string("media/billiards.png"),
     _dG_=[0,caml_new_string("media/billiards.png"),[0,30,30],[0,500,0]],
     _dH_=[0,308,390],
     _dI_=[0,0,0],
     _dJ_=[0,30,30],
     _dK_=caml_new_string("Ten Ball"),
     _dL_=caml_new_string("media/billiards.png"),
     _dM_=[0,caml_new_string("media/billiards.png"),[0,30,30],[0,550,0]],
     _dN_=[0,386,405],
     _dO_=[0,0,0],
     _dP_=[0,30,30],
     _dQ_=caml_new_string("Eleven Ball"),
     _dR_=caml_new_string("media/billiards.png"),
     _dS_=[0,caml_new_string("media/billiards.png"),[0,30,30],[0,600,0]],
     _dT_=[0,308,330],
     _dU_=[0,0,0],
     _dV_=[0,30,30],
     _dW_=caml_new_string("Twelve Ball"),
     _dX_=caml_new_string("media/billiards.png"),
     _dY_=[0,caml_new_string("media/billiards.png"),[0,30,30],[0,650,0]],
     _dZ_=[0,334,435],
     _d0_=[0,0,0],
     _d1_=[0,30,30],
     _d2_=caml_new_string("Thirteen Ball"),
     _d3_=caml_new_string("media/billiards.png"),
     _d4_=[0,caml_new_string("media/billiards.png"),[0,30,30],[0,700,0]],
     _d5_=[0,360,360],
     _d6_=[0,0,0],
     _d7_=[0,30,30],
     _d8_=caml_new_string("Fourteen Ball"),
     _d9_=caml_new_string("media/billiards.png"),
     _d__=[0,caml_new_string("media/billiards.png"),[0,30,30],[0,750,0]],
     _d$_=[0,334,405],
     _ea_=[0,0,0],
     _eb_=[0,30,30],
     _ec_=caml_new_string("Fifteen Ball"),
     _ed_=[0,0,0],
     _ee_=caml_new_string("player_1"),
     _ef_=caml_new_string("player_2"),
     _h4_=[0,300,350],
     _iB_=[0,0,0],
     _h5_=[0,1051,0],
     _iA_=[0,0,0],
     _h6_=[0,100,0],
     _iz_=[0,0,0],
     _h7_=caml_new_string(")"),
     _h8_=caml_new_string(", "),
     _h9_=caml_new_string("cue_ball.pos: ("),
     _h__=caml_new_string(")"),
     _h$_=caml_new_string(", "),
     _ia_=caml_new_string("cue_pos: ("),
     _ib_=caml_new_string("state number: "),
     _ic_=caml_new_string("player: "),
     _id_=caml_new_string("ball_moving: "),
     _ie_=caml_new_string(" "),
     _if_=caml_new_string("hit_force: "),
     _ig_=caml_new_string("cue: "),
     _ih_=caml_new_string("cue: "),
     _iy_=[0,0,0],
     _ii_=[0,0,0],
     _ij_=caml_new_string("media/pool_cue.png"),
     _ip_=[0,1170,150],
     _iq_=caml_new_string("media/pool_cue1.png"),
     _ir_=[0,1170,150],
     _is_=caml_new_string("media/pool_cue2.png"),
     _it_=[0,1170,150],
     _iu_=caml_new_string("media/pool_cue3.png"),
     _iv_=[0,1170,150],
     _iw_=caml_new_string("media/pool_cue.png"),
     _ix_=[0,1170,150],
     _ik_=[0,0,0],
     _io_=[0,0,0],
     _il_=[0,0,0],
     _im_=[0,0,0],
     _in_=[0,0,0],
     _h3_=[0,-600,0],
     _h1_=[0,231,7],
     _h2_=[0,843,7],
     _hY_=[0,2e4,2e4],
     _hZ_=[0,0,0],
     _h0_=[0,0,0],
     _hX_=[0,0,0],
     _eg_=caml_new_string(""),
     _eh_=[0,0,0],
     _ei_=[0,30,30],
     _ej_=[0,50,0],
     _ek_=[0,30,30],
     _el_=[0,100,0],
     _em_=[0,30,30],
     _en_=[0,150,0],
     _eo_=[0,30,30],
     _ep_=[0,200,0],
     _eq_=[0,30,30],
     _er_=[0,250,0],
     _es_=[0,30,30],
     _et_=[0,300,0],
     _eu_=[0,30,30],
     _ev_=[0,350,0],
     _ew_=[0,30,30],
     _ex_=[0,400,0],
     _ey_=[0,30,30],
     _ez_=[0,450,0],
     _eA_=[0,30,30],
     _eB_=[0,500,0],
     _eC_=[0,30,30],
     _eD_=[0,550,0],
     _eE_=[0,30,30],
     _eF_=[0,600,0],
     _eG_=[0,30,30],
     _eH_=[0,650,0],
     _eI_=[0,30,30],
     _eJ_=[0,700,0],
     _eK_=[0,30,30],
     _eL_=[0,750,0],
     _eM_=[0,30,30],
     _hm_=caml_new_string(""),
     _hn_=[0,0,100],
     _ho_=[0,30,30],
     _hp_=[0,50,100],
     _hq_=[0,30,30],
     _hr_=[0,100,100],
     _hs_=[0,30,30],
     _ht_=[0,150,100],
     _hu_=[0,30,30],
     _hv_=[0,200,100],
     _hw_=[0,30,30],
     _hx_=[0,250,100],
     _hy_=[0,30,30],
     _hz_=[0,300,100],
     _hA_=[0,30,30],
     _hB_=[0,350,100],
     _hC_=[0,30,30],
     _hD_=[0,400,100],
     _hE_=[0,30,30],
     _hF_=[0,450,100],
     _hG_=[0,30,30],
     _hH_=[0,500,100],
     _hI_=[0,30,30],
     _hJ_=[0,550,100],
     _hK_=[0,30,30],
     _hL_=[0,600,100],
     _hM_=[0,30,30],
     _hN_=[0,650,100],
     _hO_=[0,30,30],
     _hP_=[0,700,100],
     _hQ_=[0,30,30],
     _hR_=[0,750,100],
     _hS_=[0,30,30],
     _gR_=caml_new_string(""),
     _gS_=[0,0,150],
     _gT_=[0,30,30],
     _gU_=[0,50,150],
     _gV_=[0,30,30],
     _gW_=[0,100,150],
     _gX_=[0,30,30],
     _gY_=[0,150,150],
     _gZ_=[0,30,30],
     _g0_=[0,200,150],
     _g1_=[0,30,30],
     _g2_=[0,250,150],
     _g3_=[0,30,30],
     _g4_=[0,300,150],
     _g5_=[0,30,30],
     _g6_=[0,350,150],
     _g7_=[0,30,30],
     _g8_=[0,400,150],
     _g9_=[0,30,30],
     _g__=[0,450,150],
     _g$_=[0,30,30],
     _ha_=[0,500,150],
     _hb_=[0,30,30],
     _hc_=[0,550,150],
     _hd_=[0,30,30],
     _he_=[0,600,150],
     _hf_=[0,30,30],
     _hg_=[0,650,150],
     _hh_=[0,30,30],
     _hi_=[0,700,150],
     _hj_=[0,30,30],
     _hk_=[0,750,150],
     _hl_=[0,30,30],
     _gk_=caml_new_string(""),
     _gl_=[0,0,200],
     _gm_=[0,30,30],
     _gn_=[0,50,200],
     _go_=[0,30,30],
     _gp_=[0,100,200],
     _gq_=[0,30,30],
     _gr_=[0,150,200],
     _gs_=[0,30,30],
     _gt_=[0,200,200],
     _gu_=[0,30,30],
     _gv_=[0,250,200],
     _gw_=[0,30,30],
     _gx_=[0,300,200],
     _gy_=[0,30,30],
     _gz_=[0,350,200],
     _gA_=[0,30,30],
     _gB_=[0,400,200],
     _gC_=[0,30,30],
     _gD_=[0,450,200],
     _gE_=[0,30,30],
     _gF_=[0,500,200],
     _gG_=[0,30,30],
     _gH_=[0,550,200],
     _gI_=[0,30,30],
     _gJ_=[0,600,200],
     _gK_=[0,30,30],
     _gL_=[0,650,200],
     _gM_=[0,30,30],
     _gN_=[0,700,200],
     _gO_=[0,30,30],
     _gP_=[0,750,200],
     _gQ_=[0,30,30],
     _fP_=caml_new_string(""),
     _fQ_=[0,0,250],
     _fR_=[0,30,30],
     _fS_=[0,50,250],
     _fT_=[0,30,30],
     _fU_=[0,100,250],
     _fV_=[0,30,30],
     _fW_=[0,150,250],
     _fX_=[0,30,30],
     _fY_=[0,200,250],
     _fZ_=[0,30,30],
     _f0_=[0,250,250],
     _f1_=[0,30,30],
     _f2_=[0,300,250],
     _f3_=[0,30,30],
     _f4_=[0,350,250],
     _f5_=[0,30,30],
     _f6_=[0,400,250],
     _f7_=[0,30,30],
     _f8_=[0,450,250],
     _f9_=[0,30,30],
     _f__=[0,500,250],
     _f$_=[0,30,30],
     _ga_=[0,550,250],
     _gb_=[0,30,30],
     _gc_=[0,600,250],
     _gd_=[0,30,30],
     _ge_=[0,650,250],
     _gf_=[0,30,30],
     _gg_=[0,700,250],
     _gh_=[0,30,30],
     _gi_=[0,750,250],
     _gj_=[0,30,30],
     _fi_=caml_new_string(""),
     _fj_=[0,0,50],
     _fk_=[0,30,30],
     _fl_=[0,50,50],
     _fm_=[0,30,30],
     _fn_=[0,100,50],
     _fo_=[0,30,30],
     _fp_=[0,150,50],
     _fq_=[0,30,30],
     _fr_=[0,200,50],
     _fs_=[0,30,30],
     _ft_=[0,250,50],
     _fu_=[0,30,30],
     _fv_=[0,300,50],
     _fw_=[0,30,30],
     _fx_=[0,350,50],
     _fy_=[0,30,30],
     _fz_=[0,400,50],
     _fA_=[0,30,30],
     _fB_=[0,450,50],
     _fC_=[0,30,30],
     _fD_=[0,500,50],
     _fE_=[0,30,30],
     _fF_=[0,550,50],
     _fG_=[0,30,30],
     _fH_=[0,600,50],
     _fI_=[0,30,30],
     _fJ_=[0,650,50],
     _fK_=[0,30,30],
     _fL_=[0,700,50],
     _fM_=[0,30,30],
     _fN_=[0,750,50],
     _fO_=[0,30,30],
     _eN_=caml_new_string(""),
     _eO_=[0,0,0],
     _eP_=[0,30,30],
     _eQ_=[0,50,0],
     _eR_=[0,30,30],
     _eS_=[0,100,0],
     _eT_=[0,30,30],
     _eU_=[0,150,0],
     _eV_=[0,30,30],
     _eW_=[0,200,0],
     _eX_=[0,30,30],
     _eY_=[0,250,0],
     _eZ_=[0,30,30],
     _e0_=[0,300,0],
     _e1_=[0,30,30],
     _e2_=[0,350,0],
     _e3_=[0,30,30],
     _e4_=[0,400,0],
     _e5_=[0,30,30],
     _e6_=[0,450,0],
     _e7_=[0,30,30],
     _e8_=[0,500,0],
     _e9_=[0,30,30],
     _e__=[0,550,0],
     _e$_=[0,30,30],
     _fa_=[0,600,0],
     _fb_=[0,30,30],
     _fc_=[0,650,0],
     _fd_=[0,30,30],
     _fe_=[0,700,0],
     _ff_=[0,30,30],
     _fg_=[0,750,0],
     _fh_=[0,30,30],
     _hV_=[0,0,0],
     _hW_=[0,30,30],
     _hT_=[0,0,0],
     _hU_=[0,30,30],
     _iC_=[0,-1,-1],
     _iD_=caml_new_string("billiard not found in findnth"),
     _iI_=[0,2500,2500],
     _iJ_=[0,0,0],
     _iG_=[0,3,3],
     _iH_=[0,2e3,2e3],
     _iF_=caml_new_string("No pocket to be hit"),
     _iE_=caml_new_string("No billiards on board"),
     _iS_=caml_new_string("player not found"),
     _iV_=caml_new_string("no such name"),
     _iZ_=[0,880,390],
     _i0_=[0,0,0],
     _iY_=caml_new_string("player_1"),
     _i1_=caml_new_string("player_1"),
     _i2_=caml_new_string("contain 8 balls situation not found "),
     _iW_=caml_new_string("player_1"),
     _iX_=caml_new_string("player_2"),
     _iT_=caml_new_string("player_1"),
     _iU_=caml_new_string("player_1"),
     _iR_=caml_new_string("player_1"),
     _iQ_=[0,880,390],
     _iN_=caml_new_string("player_2"),
     _iL_=caml_new_string("media/wilhelm_scream.mp3"),
     _iM_=caml_new_string("media/cue.mp3"),
     _iO_=caml_new_string("media/wilhelm_scream.mp3"),
     _iP_=caml_new_string("media/cue.mp3"),
     _iK_=[0,290,0],
     _i3_=[0,0,0],
     _i4_=caml_new_string("default"),
     _i5_=[0,caml_new_string("main.ml"),23,22];
    function erase_rel(param)
     {if(typeof param === "number")
       return 0;
      else
       switch(param[0])
        {case 0:var rest=param[1];return [0,erase_rel(rest)];
         case 1:var rest$0=param[1];return [1,erase_rel(rest$0)];
         case 2:var rest$1=param[1];return [2,erase_rel(rest$1)];
         case 3:var rest$2=param[1];return [3,erase_rel(rest$2)];
         case 4:var rest$3=param[1];return [4,erase_rel(rest$3)];
         case 5:var rest$4=param[1];return [5,erase_rel(rest$4)];
         case 6:var rest$5=param[1];return [6,erase_rel(rest$5)];
         case 7:var rest$6=param[1];return [7,erase_rel(rest$6)];
         case 8:
          var rest$7=param[2],ty=param[1];return [8,ty,erase_rel(rest$7)];
         case 9:
          var rest$8=param[3],ty1=param[1];
          return [9,ty1,ty1,erase_rel(rest$8)];
         case 10:var rest$9=param[1];return [10,erase_rel(rest$9)];
         case 11:var rest$10=param[1];return [11,erase_rel(rest$10)];
         case 12:var rest$11=param[1];return [12,erase_rel(rest$11)];
         case 13:var rest$12=param[1];return [13,erase_rel(rest$12)];
         default:var rest$13=param[1];return [14,erase_rel(rest$13)]}}
    function concat_fmtty(fmtty1,fmtty2)
     {if(typeof fmtty1 === "number")
       return fmtty2;
      else
       switch(fmtty1[0])
        {case 0:var rest=fmtty1[1];return [0,concat_fmtty(rest,fmtty2)];
         case 1:var rest$0=fmtty1[1];return [1,concat_fmtty(rest$0,fmtty2)];
         case 2:var rest$1=fmtty1[1];return [2,concat_fmtty(rest$1,fmtty2)];
         case 3:var rest$2=fmtty1[1];return [3,concat_fmtty(rest$2,fmtty2)];
         case 4:var rest$3=fmtty1[1];return [4,concat_fmtty(rest$3,fmtty2)];
         case 5:var rest$4=fmtty1[1];return [5,concat_fmtty(rest$4,fmtty2)];
         case 6:var rest$5=fmtty1[1];return [6,concat_fmtty(rest$5,fmtty2)];
         case 7:var rest$6=fmtty1[1];return [7,concat_fmtty(rest$6,fmtty2)];
         case 8:
          var rest$7=fmtty1[2],ty=fmtty1[1];
          return [8,ty,concat_fmtty(rest$7,fmtty2)];
         case 9:
          var rest$8=fmtty1[3],ty2=fmtty1[2],ty1=fmtty1[1];
          return [9,ty1,ty2,concat_fmtty(rest$8,fmtty2)];
         case 10:var rest$9=fmtty1[1];return [10,concat_fmtty(rest$9,fmtty2)];
         case 11:
          var rest$10=fmtty1[1];return [11,concat_fmtty(rest$10,fmtty2)];
         case 12:
          var rest$11=fmtty1[1];return [12,concat_fmtty(rest$11,fmtty2)];
         case 13:
          var rest$12=fmtty1[1];return [13,concat_fmtty(rest$12,fmtty2)];
         default:
          var rest$13=fmtty1[1];return [14,concat_fmtty(rest$13,fmtty2)]}}
    function concat_fmt(fmt1,fmt2)
     {if(typeof fmt1 === "number")
       return fmt2;
      else
       switch(fmt1[0])
        {case 0:var rest=fmt1[1];return [0,concat_fmt(rest,fmt2)];
         case 1:var rest$0=fmt1[1];return [1,concat_fmt(rest$0,fmt2)];
         case 2:
          var rest$1=fmt1[2],pad=fmt1[1];
          return [2,pad,concat_fmt(rest$1,fmt2)];
         case 3:
          var rest$2=fmt1[2],pad$0=fmt1[1];
          return [3,pad$0,concat_fmt(rest$2,fmt2)];
         case 4:
          var rest$3=fmt1[4],prec=fmt1[3],pad$1=fmt1[2],iconv=fmt1[1];
          return [4,iconv,pad$1,prec,concat_fmt(rest$3,fmt2)];
         case 5:
          var rest$4=fmt1[4],prec$0=fmt1[3],pad$2=fmt1[2],iconv$0=fmt1[1];
          return [5,iconv$0,pad$2,prec$0,concat_fmt(rest$4,fmt2)];
         case 6:
          var rest$5=fmt1[4],prec$1=fmt1[3],pad$3=fmt1[2],iconv$1=fmt1[1];
          return [6,iconv$1,pad$3,prec$1,concat_fmt(rest$5,fmt2)];
         case 7:
          var rest$6=fmt1[4],prec$2=fmt1[3],pad$4=fmt1[2],iconv$2=fmt1[1];
          return [7,iconv$2,pad$4,prec$2,concat_fmt(rest$6,fmt2)];
         case 8:
          var rest$7=fmt1[4],prec$3=fmt1[3],pad$5=fmt1[2],fconv=fmt1[1];
          return [8,fconv,pad$5,prec$3,concat_fmt(rest$7,fmt2)];
         case 9:
          var rest$8=fmt1[2],pad$6=fmt1[1];
          return [9,pad$6,concat_fmt(rest$8,fmt2)];
         case 10:var rest$9=fmt1[1];return [10,concat_fmt(rest$9,fmt2)];
         case 11:
          var rest$10=fmt1[2],str=fmt1[1];
          return [11,str,concat_fmt(rest$10,fmt2)];
         case 12:
          var rest$11=fmt1[2],chr=fmt1[1];
          return [12,chr,concat_fmt(rest$11,fmt2)];
         case 13:
          var rest$12=fmt1[3],fmtty=fmt1[2],pad$7=fmt1[1];
          return [13,pad$7,fmtty,concat_fmt(rest$12,fmt2)];
         case 14:
          var rest$13=fmt1[3],fmtty$0=fmt1[2],pad$8=fmt1[1];
          return [14,pad$8,fmtty$0,concat_fmt(rest$13,fmt2)];
         case 15:var rest$14=fmt1[1];return [15,concat_fmt(rest$14,fmt2)];
         case 16:var rest$15=fmt1[1];return [16,concat_fmt(rest$15,fmt2)];
         case 17:
          var rest$16=fmt1[2],fmting_lit=fmt1[1];
          return [17,fmting_lit,concat_fmt(rest$16,fmt2)];
         case 18:
          var rest$17=fmt1[2],fmting_gen=fmt1[1];
          return [18,fmting_gen,concat_fmt(rest$17,fmt2)];
         case 19:var rest$18=fmt1[1];return [19,concat_fmt(rest$18,fmt2)];
         case 20:
          var rest$19=fmt1[3],char_set=fmt1[2],width_opt=fmt1[1];
          return [20,width_opt,char_set,concat_fmt(rest$19,fmt2)];
         case 21:
          var rest$20=fmt1[2],counter=fmt1[1];
          return [21,counter,concat_fmt(rest$20,fmt2)];
         case 22:var rest$21=fmt1[1];return [22,concat_fmt(rest$21,fmt2)];
         case 23:
          var rest$22=fmt1[2],ign=fmt1[1];
          return [23,ign,concat_fmt(rest$22,fmt2)];
         default:
          var rest$23=fmt1[3],f=fmt1[2],arity=fmt1[1];
          return [24,arity,f,concat_fmt(rest$23,fmt2)]}}
    function failwith(s){throw [0,Failure,s]}
    function invalid_arg(s){throw [0,Invalid_argument,s]}
    caml_fresh_oo_id(0);
    function min(x,y){return caml_lessequal(x,y)?x:y}
    function max(x,y){return caml_greaterequal(x,y)?x:y}
    function abs(x){return 0 <= x?x:-x | 0}
    function _a_(s1,s2)
     {var
       l1=caml_ml_string_length(s1),
       l2=caml_ml_string_length(s2),
       s=caml_create_bytes(l1 + l2 | 0);
      caml_blit_string(s1,0,s,0,l1);
      caml_blit_string(s2,0,s,l1,l2);
      return s}
    function string_of_bool(b){return b?_b_:_c_}
    function string_of_float(f)
     {var s=caml_format_float(_e_,f),l=caml_ml_string_length(s),i=0;
      for(;;)
       {if(l <= i)return _a_(s,_d_);
        var
         match=caml_string_get(s,i),
         switch$0=48 <= match?58 <= match?0:1:45 === match?1:0;
        if(switch$0){var i$0=i + 1 | 0,i=i$0;continue}
        return s}}
    function append(l1,l2)
     {if(l1){var tl=l1[2],hd=l1[1];return [0,hd,append(tl,l2)]}return l2}
    caml_ml_open_descriptor_in(0);
    caml_ml_open_descriptor_out(1);
    caml_ml_open_descriptor_out(2);
    function do_at_exit(param)
     {function iter(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var l=param$0[2],a=param$0[1];
            try
             {caml_ml_flush(a)}
            catch(_m5_)
             {_m5_ = caml_wrap_exception(_m5_);
              if(_m5_[1] !== Sys_error)throw _m5_}
            var param$0=l;
            continue}
          return 0}}
      return iter(caml_ml_out_channels_list(0))}
    function length(l)
     {var len=0,param=l;
      for(;;)
       {if(param)
         {var param$0=param[2],len$0=len + 1 | 0,len=len$0,param=param$0;
          continue}
        return len}}
    function nth(l,n)
     {if(0 <= n)
       {var l$0=l,n$0=n;
        for(;;)
         {if(l$0)
           {var l$1=l$0[2],a=l$0[1];
            if(0 === n$0)return a;
            var n$1=n$0 - 1 | 0,l$0=l$1,n$0=n$1;
            continue}
          return failwith(_g_)}}
      return invalid_arg(_h_)}
    function rev(l)
     {var l1=l,l2=0;
      for(;;)
       {if(l1){var l1$0=l1[2],a=l1[1],l2$0=[0,a,l2],l1=l1$0,l2=l2$0;continue}
        return l2}}
    function map(f,param)
     {if(param)
       {var l=param[2],a=param[1],r=caml_call1(f,a);return [0,r,map(f,l)]}
      return 0}
    function fold_left(f,accu,l)
     {var accu$0=accu,l$0=l;
      for(;;)
       {if(l$0)
         {var
           l$1=l$0[2],
           a=l$0[1],
           accu$1=caml_call2(f,accu$0,a),
           accu$0=accu$1,
           l$0=l$1;
          continue}
        return accu$0}}
    function mem(x,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],a=param$0[1],_m4_=0 === caml_compare(a,x)?1:0;
          if(_m4_)return _m4_;
          var param$0=l;
          continue}
        return 0}}
    function find_all(p)
     {var accu=0;
      return function(param$0)
       {var accu$0=accu,param=param$0;
        for(;;)
         {if(param)
           {var l=param[2],x=param[1];
            if(caml_call1(p,x))
             {var accu$1=[0,x,accu$0],accu$0=accu$1,param=l;continue}
            var param=l;
            continue}
          return rev(accu$0)}}}
    function make(n,c)
     {var s=caml_create_bytes(n);caml_fill_bytes(s,0,n,c);return s}
    function sub_string(b,ofs,len)
     {if(0 <= ofs)
       if(0 <= len)
        if(!((caml_ml_bytes_length(b) - len | 0) < ofs))
         {var r=caml_create_bytes(len);
          caml_blit_bytes(b,ofs,r,0,len);
          return r}
      return invalid_arg(_o_)}
    function blit(s1,ofs1,s2,ofs2,len)
     {if(0 <= len)
       if(0 <= ofs1)
        if(!((caml_ml_bytes_length(s1) - len | 0) < ofs1))
         if(0 <= ofs2)
          if(!((caml_ml_bytes_length(s2) - len | 0) < ofs2))
           return caml_blit_bytes(s1,ofs1,s2,ofs2,len);
      return invalid_arg(_p_)}
    function blit$0(s1,ofs1,s2,ofs2,len)
     {if(0 <= len)
       if(0 <= ofs1)
        if(!((caml_ml_string_length(s1) - len | 0) < ofs1))
         if(0 <= ofs2)
          if(!((caml_ml_bytes_length(s2) - len | 0) < ofs2))
           return caml_blit_string(s1,ofs1,s2,ofs2,len);
      return invalid_arg(_q_)}
    function index_rec(s,lim,i,c)
     {var i$0=i;
      for(;;)
       {if(lim <= i$0)throw Not_found;
        if(caml_string_unsafe_get(s,i$0) === c)return i$0;
        var i$1=i$0 + 1 | 0,i$0=i$1;
        continue}}
    function contains_from(s,i,c)
     {var l=caml_ml_string_length(s);
      if(0 <= i)
       if(!(l < i))
        try
         {index_rec(s,l,i,c);var _m2_=1;return _m2_}
        catch(_m3_)
         {_m3_ = caml_wrap_exception(_m3_);
          if(_m3_ === Not_found)return 0;
          throw _m3_}
      return invalid_arg(_r_)}
    function contains(s,c){return contains_from(s,0,c)}
    var
     match=caml_sys_get_config(0),
     os_type=match[1],
     max_array_length=caml_sys_const_max_wosize(0),
     max_string_length=(4 * max_array_length | 0) - 1 | 0;
    caml_fresh_oo_id(0);
    caml_fresh_oo_id(0);
    var Undefined=[248,_s_,caml_fresh_oo_id(0)];
    function raise_undefined(param){throw Undefined}
    function force_lazy_block(blk)
     {var closure=blk[1];
      blk[1] = raise_undefined;
      try
       {var result=caml_call1(closure,0);
        blk[1] = result;
        caml_obj_set_tag(blk,250);
        return result}
      catch(e)
       {e = caml_wrap_exception(e);blk[1] = function(param){throw e};throw e}}
    function resize(b,more)
     {var len=b[3],new_len=[0,len];
      for(;;)
       {if(new_len[1] < (b[2] + more | 0))
         {new_len[1] = 2 * new_len[1] | 0;continue}
        if(max_string_length < new_len[1])
         if((b[2] + more | 0) <= max_string_length)
          new_len[1] = max_string_length;
         else
          failwith(_t_);
        var new_buffer=caml_create_bytes(new_len[1]);
        blit(b[1],0,new_buffer,0,b[2]);
        b[1] = new_buffer;
        b[3] = new_len[1];
        return 0}}
    function add_string(b,s)
     {var len=caml_ml_string_length(s),new_position=b[2] + len | 0;
      if(b[3] < new_position)resize(b,len);
      blit$0(s,0,b[1],b[2],len);
      b[2] = new_position;
      return 0}
    var default_float_precision=-6;
    function buffer_create(init_size)
     {return [0,0,caml_create_bytes(init_size)]}
    function buffer_check_size(buf,overhead)
     {var
       len=caml_ml_bytes_length(buf[2]),
       min_len=buf[1] + overhead | 0,
       _m0_=len < min_len?1:0;
      if(_m0_)
       {var
         new_len=max(len * 2 | 0,min_len),
         new_str=caml_create_bytes(new_len);
        blit(buf[2],0,new_str,0,len);
        buf[2] = new_str;
        var _m1_=0}
      else
       var _m1_=_m0_;
      return _m1_}
    function buffer_add_char(buf,c)
     {buffer_check_size(buf,1);
      caml_bytes_set(buf[2],buf[1],c);
      buf[1] = buf[1] + 1 | 0;
      return 0}
    function buffer_add_string(buf,s)
     {var str_len=caml_ml_string_length(s);
      buffer_check_size(buf,str_len);
      blit$0(s,0,buf[2],buf[1],str_len);
      buf[1] = buf[1] + str_len | 0;
      return 0}
    function buffer_contents(buf){return sub_string(buf[2],0,buf[1])}
    function bprint_fmtty(buf,fmtty)
     {var fmtty$0=fmtty;
      for(;;)
       if(typeof fmtty$0 === "number")
        return 0;
       else
        switch(fmtty$0[0])
         {case 0:
           var fmtty$1=fmtty$0[1];
           buffer_add_string(buf,_C_);
           var fmtty$0=fmtty$1;
           continue;
          case 1:
           var fmtty$2=fmtty$0[1];
           buffer_add_string(buf,_D_);
           var fmtty$0=fmtty$2;
           continue;
          case 2:
           var fmtty$3=fmtty$0[1];
           buffer_add_string(buf,_E_);
           var fmtty$0=fmtty$3;
           continue;
          case 3:
           var fmtty$4=fmtty$0[1];
           buffer_add_string(buf,_F_);
           var fmtty$0=fmtty$4;
           continue;
          case 4:
           var fmtty$5=fmtty$0[1];
           buffer_add_string(buf,_G_);
           var fmtty$0=fmtty$5;
           continue;
          case 5:
           var fmtty$6=fmtty$0[1];
           buffer_add_string(buf,_H_);
           var fmtty$0=fmtty$6;
           continue;
          case 6:
           var fmtty$7=fmtty$0[1];
           buffer_add_string(buf,_I_);
           var fmtty$0=fmtty$7;
           continue;
          case 7:
           var fmtty$8=fmtty$0[1];
           buffer_add_string(buf,_J_);
           var fmtty$0=fmtty$8;
           continue;
          case 8:
           var fmtty$9=fmtty$0[2],sub_fmtty=fmtty$0[1];
           buffer_add_string(buf,_K_);
           bprint_fmtty(buf,sub_fmtty);
           buffer_add_string(buf,_L_);
           var fmtty$0=fmtty$9;
           continue;
          case 9:
           var fmtty$10=fmtty$0[3],sub_fmtty$0=fmtty$0[1];
           buffer_add_string(buf,_M_);
           bprint_fmtty(buf,sub_fmtty$0);
           buffer_add_string(buf,_N_);
           var fmtty$0=fmtty$10;
           continue;
          case 10:
           var fmtty$11=fmtty$0[1];
           buffer_add_string(buf,_O_);
           var fmtty$0=fmtty$11;
           continue;
          case 11:
           var fmtty$12=fmtty$0[1];
           buffer_add_string(buf,_P_);
           var fmtty$0=fmtty$12;
           continue;
          case 12:
           var fmtty$13=fmtty$0[1];
           buffer_add_string(buf,_Q_);
           var fmtty$0=fmtty$13;
           continue;
          case 13:
           var fmtty$14=fmtty$0[1];
           buffer_add_string(buf,_R_);
           var fmtty$0=fmtty$14;
           continue;
          default:
           var fmtty$15=fmtty$0[1];
           buffer_add_string(buf,_S_);
           var fmtty$0=fmtty$15;
           continue}}
    function symm(param)
     {if(typeof param === "number")
       return 0;
      else
       switch(param[0])
        {case 0:var rest=param[1];return [0,symm(rest)];
         case 1:var rest$0=param[1];return [1,symm(rest$0)];
         case 2:var rest$1=param[1];return [2,symm(rest$1)];
         case 3:var rest$2=param[1];return [3,symm(rest$2)];
         case 4:var rest$3=param[1];return [4,symm(rest$3)];
         case 5:var rest$4=param[1];return [5,symm(rest$4)];
         case 6:var rest$5=param[1];return [6,symm(rest$5)];
         case 7:var rest$6=param[1];return [7,symm(rest$6)];
         case 8:var rest$7=param[2],ty=param[1];return [8,ty,symm(rest$7)];
         case 9:
          var rest$8=param[3],ty2=param[2],ty1=param[1];
          return [9,ty2,ty1,symm(rest$8)];
         case 10:var rest$9=param[1];return [10,symm(rest$9)];
         case 11:var rest$10=param[1];return [11,symm(rest$10)];
         case 12:var rest$11=param[1];return [12,symm(rest$11)];
         case 13:var rest$12=param[1];return [13,symm(rest$12)];
         default:var rest$13=param[1];return [14,symm(rest$13)]}}
    function fmtty_rel_det(param)
     {if(typeof param === "number")
       {var
         _mC_=function(param){return 0},
         _mD_=function(param){return 0},
         _mE_=function(param){return 0};
        return [0,function(param){return 0},_mE_,_mD_,_mC_]}
      else
       switch(param[0])
        {case 0:
          var
           rest=param[1],
           match=fmtty_rel_det(rest),
           de=match[4],
           ed=match[3],
           af=match[2],
           fa=match[1],
           _mF_=function(param){caml_call1(af,0);return 0};
          return [0,function(param){caml_call1(fa,0);return 0},_mF_,ed,de];
         case 1:
          var
           rest$0=param[1],
           match$0=fmtty_rel_det(rest$0),
           de$0=match$0[4],
           ed$0=match$0[3],
           af$0=match$0[2],
           fa$0=match$0[1],
           _mG_=function(param){caml_call1(af$0,0);return 0};
          return [0,
                  function(param){caml_call1(fa$0,0);return 0},
                  _mG_,
                  ed$0,
                  de$0];
         case 2:
          var
           rest$1=param[1],
           match$1=fmtty_rel_det(rest$1),
           de$1=match$1[4],
           ed$1=match$1[3],
           af$1=match$1[2],
           fa$1=match$1[1],
           _mH_=function(param){caml_call1(af$1,0);return 0};
          return [0,
                  function(param){caml_call1(fa$1,0);return 0},
                  _mH_,
                  ed$1,
                  de$1];
         case 3:
          var
           rest$2=param[1],
           match$2=fmtty_rel_det(rest$2),
           de$2=match$2[4],
           ed$2=match$2[3],
           af$2=match$2[2],
           fa$2=match$2[1],
           _mI_=function(param){caml_call1(af$2,0);return 0};
          return [0,
                  function(param){caml_call1(fa$2,0);return 0},
                  _mI_,
                  ed$2,
                  de$2];
         case 4:
          var
           rest$3=param[1],
           match$3=fmtty_rel_det(rest$3),
           de$3=match$3[4],
           ed$3=match$3[3],
           af$3=match$3[2],
           fa$3=match$3[1],
           _mJ_=function(param){caml_call1(af$3,0);return 0};
          return [0,
                  function(param){caml_call1(fa$3,0);return 0},
                  _mJ_,
                  ed$3,
                  de$3];
         case 5:
          var
           rest$4=param[1],
           match$4=fmtty_rel_det(rest$4),
           de$4=match$4[4],
           ed$4=match$4[3],
           af$4=match$4[2],
           fa$4=match$4[1],
           _mK_=function(param){caml_call1(af$4,0);return 0};
          return [0,
                  function(param){caml_call1(fa$4,0);return 0},
                  _mK_,
                  ed$4,
                  de$4];
         case 6:
          var
           rest$5=param[1],
           match$5=fmtty_rel_det(rest$5),
           de$5=match$5[4],
           ed$5=match$5[3],
           af$5=match$5[2],
           fa$5=match$5[1],
           _mL_=function(param){caml_call1(af$5,0);return 0};
          return [0,
                  function(param){caml_call1(fa$5,0);return 0},
                  _mL_,
                  ed$5,
                  de$5];
         case 7:
          var
           rest$6=param[1],
           match$6=fmtty_rel_det(rest$6),
           de$6=match$6[4],
           ed$6=match$6[3],
           af$6=match$6[2],
           fa$6=match$6[1],
           _mM_=function(param){caml_call1(af$6,0);return 0};
          return [0,
                  function(param){caml_call1(fa$6,0);return 0},
                  _mM_,
                  ed$6,
                  de$6];
         case 8:
          var
           rest$7=param[2],
           match$7=fmtty_rel_det(rest$7),
           de$7=match$7[4],
           ed$7=match$7[3],
           af$7=match$7[2],
           fa$7=match$7[1],
           _mN_=function(param){caml_call1(af$7,0);return 0};
          return [0,
                  function(param){caml_call1(fa$7,0);return 0},
                  _mN_,
                  ed$7,
                  de$7];
         case 9:
          var
           rest$8=param[3],
           ty2=param[2],
           ty1=param[1],
           match$8=fmtty_rel_det(rest$8),
           de$8=match$8[4],
           ed$8=match$8[3],
           af$8=match$8[2],
           fa$8=match$8[1],
           ty=trans(symm(ty1),ty2),
           match$9=fmtty_rel_det(ty),
           jd=match$9[4],
           dj=match$9[3],
           ga=match$9[2],
           ag=match$9[1],
           _mO_=function(param){caml_call1(jd,0);caml_call1(de$8,0);return 0},
           _mP_=function(param){caml_call1(ed$8,0);caml_call1(dj,0);return 0},
           _mQ_=function(param){caml_call1(ga,0);caml_call1(af$8,0);return 0};
          return [0,
                  function(param)
                   {caml_call1(fa$8,0);caml_call1(ag,0);return 0},
                  _mQ_,
                  _mP_,
                  _mO_];
         case 10:
          var
           rest$9=param[1],
           match$10=fmtty_rel_det(rest$9),
           de$9=match$10[4],
           ed$9=match$10[3],
           af$9=match$10[2],
           fa$9=match$10[1],
           _mR_=function(param){caml_call1(af$9,0);return 0};
          return [0,
                  function(param){caml_call1(fa$9,0);return 0},
                  _mR_,
                  ed$9,
                  de$9];
         case 11:
          var
           rest$10=param[1],
           match$11=fmtty_rel_det(rest$10),
           de$10=match$11[4],
           ed$10=match$11[3],
           af$10=match$11[2],
           fa$10=match$11[1],
           _mS_=function(param){caml_call1(af$10,0);return 0};
          return [0,
                  function(param){caml_call1(fa$10,0);return 0},
                  _mS_,
                  ed$10,
                  de$10];
         case 12:
          var
           rest$11=param[1],
           match$12=fmtty_rel_det(rest$11),
           de$11=match$12[4],
           ed$11=match$12[3],
           af$11=match$12[2],
           fa$11=match$12[1],
           _mT_=function(param){caml_call1(af$11,0);return 0};
          return [0,
                  function(param){caml_call1(fa$11,0);return 0},
                  _mT_,
                  ed$11,
                  de$11];
         case 13:
          var
           rest$12=param[1],
           match$13=fmtty_rel_det(rest$12),
           de$12=match$13[4],
           ed$12=match$13[3],
           af$12=match$13[2],
           fa$12=match$13[1],
           _mU_=function(param){caml_call1(de$12,0);return 0},
           _mV_=function(param){caml_call1(ed$12,0);return 0},
           _mW_=function(param){caml_call1(af$12,0);return 0};
          return [0,
                  function(param){caml_call1(fa$12,0);return 0},
                  _mW_,
                  _mV_,
                  _mU_];
         default:
          var
           rest$13=param[1],
           match$14=fmtty_rel_det(rest$13),
           de$13=match$14[4],
           ed$13=match$14[3],
           af$13=match$14[2],
           fa$13=match$14[1],
           _mX_=function(param){caml_call1(de$13,0);return 0},
           _mY_=function(param){caml_call1(ed$13,0);return 0},
           _mZ_=function(param){caml_call1(af$13,0);return 0};
          return [0,
                  function(param){caml_call1(fa$13,0);return 0},
                  _mZ_,
                  _mY_,
                  _mX_]}}
    function trans(ty1,match)
     {if(typeof ty1 === "number")
       if(typeof match === "number")
        return 0;
       else
        switch(match[0])
         {case 10:var switch$0=0;break;
          case 11:var switch$0=1;break;
          case 12:var switch$0=2;break;
          case 13:var switch$0=3;break;
          case 14:var switch$0=4;break;
          case 8:var switch$0=5;break;
          case 9:var switch$0=6;break;
          default:throw [0,Assert_failure,_T_]}
      else
       switch(ty1[0])
        {case 0:
          var _mj_=ty1[1];
          if(typeof match === "number")
           var switch$1=1;
          else
           switch(match[0])
            {case 0:var rest2=match[1];return [0,trans(_mj_,rest2)];
             case 8:var switch$0=5,switch$1=0;break;
             case 9:var switch$0=6,switch$1=0;break;
             case 10:var switch$0=0,switch$1=0;break;
             case 11:var switch$0=1,switch$1=0;break;
             case 12:var switch$0=2,switch$1=0;break;
             case 13:var switch$0=3,switch$1=0;break;
             case 14:var switch$0=4,switch$1=0;break;
             default:var switch$1=1}
          if(switch$1)var switch$0=7;
          break;
         case 1:
          var _mk_=ty1[1];
          if(typeof match === "number")
           var switch$2=1;
          else
           switch(match[0])
            {case 1:var rest2$0=match[1];return [1,trans(_mk_,rest2$0)];
             case 8:var switch$0=5,switch$2=0;break;
             case 9:var switch$0=6,switch$2=0;break;
             case 10:var switch$0=0,switch$2=0;break;
             case 11:var switch$0=1,switch$2=0;break;
             case 12:var switch$0=2,switch$2=0;break;
             case 13:var switch$0=3,switch$2=0;break;
             case 14:var switch$0=4,switch$2=0;break;
             default:var switch$2=1}
          if(switch$2)var switch$0=7;
          break;
         case 2:
          var _ml_=ty1[1];
          if(typeof match === "number")
           var switch$3=1;
          else
           switch(match[0])
            {case 2:var rest2$1=match[1];return [2,trans(_ml_,rest2$1)];
             case 8:var switch$0=5,switch$3=0;break;
             case 9:var switch$0=6,switch$3=0;break;
             case 10:var switch$0=0,switch$3=0;break;
             case 11:var switch$0=1,switch$3=0;break;
             case 12:var switch$0=2,switch$3=0;break;
             case 13:var switch$0=3,switch$3=0;break;
             case 14:var switch$0=4,switch$3=0;break;
             default:var switch$3=1}
          if(switch$3)var switch$0=7;
          break;
         case 3:
          var _mm_=ty1[1];
          if(typeof match === "number")
           var switch$4=1;
          else
           switch(match[0])
            {case 3:var rest2$2=match[1];return [3,trans(_mm_,rest2$2)];
             case 8:var switch$0=5,switch$4=0;break;
             case 9:var switch$0=6,switch$4=0;break;
             case 10:var switch$0=0,switch$4=0;break;
             case 11:var switch$0=1,switch$4=0;break;
             case 12:var switch$0=2,switch$4=0;break;
             case 13:var switch$0=3,switch$4=0;break;
             case 14:var switch$0=4,switch$4=0;break;
             default:var switch$4=1}
          if(switch$4)var switch$0=7;
          break;
         case 4:
          var _mn_=ty1[1];
          if(typeof match === "number")
           var switch$5=1;
          else
           switch(match[0])
            {case 4:var rest2$3=match[1];return [4,trans(_mn_,rest2$3)];
             case 8:var switch$0=5,switch$5=0;break;
             case 9:var switch$0=6,switch$5=0;break;
             case 10:var switch$0=0,switch$5=0;break;
             case 11:var switch$0=1,switch$5=0;break;
             case 12:var switch$0=2,switch$5=0;break;
             case 13:var switch$0=3,switch$5=0;break;
             case 14:var switch$0=4,switch$5=0;break;
             default:var switch$5=1}
          if(switch$5)var switch$0=7;
          break;
         case 5:
          var _mo_=ty1[1];
          if(typeof match === "number")
           var switch$6=1;
          else
           switch(match[0])
            {case 5:var rest2$4=match[1];return [5,trans(_mo_,rest2$4)];
             case 8:var switch$0=5,switch$6=0;break;
             case 9:var switch$0=6,switch$6=0;break;
             case 10:var switch$0=0,switch$6=0;break;
             case 11:var switch$0=1,switch$6=0;break;
             case 12:var switch$0=2,switch$6=0;break;
             case 13:var switch$0=3,switch$6=0;break;
             case 14:var switch$0=4,switch$6=0;break;
             default:var switch$6=1}
          if(switch$6)var switch$0=7;
          break;
         case 6:
          var _mp_=ty1[1];
          if(typeof match === "number")
           var switch$7=1;
          else
           switch(match[0])
            {case 6:var rest2$5=match[1];return [6,trans(_mp_,rest2$5)];
             case 8:var switch$0=5,switch$7=0;break;
             case 9:var switch$0=6,switch$7=0;break;
             case 10:var switch$0=0,switch$7=0;break;
             case 11:var switch$0=1,switch$7=0;break;
             case 12:var switch$0=2,switch$7=0;break;
             case 13:var switch$0=3,switch$7=0;break;
             case 14:var switch$0=4,switch$7=0;break;
             default:var switch$7=1}
          if(switch$7)var switch$0=7;
          break;
         case 7:
          var _mq_=ty1[1];
          if(typeof match === "number")
           var switch$8=1;
          else
           switch(match[0])
            {case 7:var rest2$6=match[1];return [7,trans(_mq_,rest2$6)];
             case 8:var switch$0=5,switch$8=0;break;
             case 9:var switch$0=6,switch$8=0;break;
             case 10:var switch$0=0,switch$8=0;break;
             case 11:var switch$0=1,switch$8=0;break;
             case 12:var switch$0=2,switch$8=0;break;
             case 13:var switch$0=3,switch$8=0;break;
             case 14:var switch$0=4,switch$8=0;break;
             default:var switch$8=1}
          if(switch$8)var switch$0=7;
          break;
         case 8:
          var _mr_=ty1[2],_ms_=ty1[1];
          if(typeof match === "number")
           var switch$9=1;
          else
           switch(match[0])
            {case 8:
              var rest2$7=match[2],ty2=match[1],_mt_=trans(_mr_,rest2$7);
              return [8,trans(_ms_,ty2),_mt_];
             case 10:var switch$0=0,switch$9=0;break;
             case 11:var switch$0=1,switch$9=0;break;
             case 12:var switch$0=2,switch$9=0;break;
             case 13:var switch$0=3,switch$9=0;break;
             case 14:var switch$0=4,switch$9=0;break;
             default:var switch$9=1}
          if(switch$9)throw [0,Assert_failure,_aa_];
          break;
         case 9:
          var _mu_=ty1[3],_mv_=ty1[2],_mw_=ty1[1];
          if(typeof match === "number")
           var switch$10=1;
          else
           switch(match[0])
            {case 8:var switch$0=5,switch$10=0;break;
             case 9:
              var
               rest2$8=match[3],
               ty22=match[2],
               ty21=match[1],
               ty=trans(symm(_mv_),ty21),
               match$0=fmtty_rel_det(ty),
               f4=match$0[4],
               f2=match$0[2];
              caml_call1(f2,0);
              caml_call1(f4,0);
              return [9,_mw_,ty22,trans(_mu_,rest2$8)];
             case 10:var switch$0=0,switch$10=0;break;
             case 11:var switch$0=1,switch$10=0;break;
             case 12:var switch$0=2,switch$10=0;break;
             case 13:var switch$0=3,switch$10=0;break;
             case 14:var switch$0=4,switch$10=0;break;
             default:var switch$10=1}
          if(switch$10)throw [0,Assert_failure,_ab_];
          break;
         case 10:
          var _mx_=ty1[1];
          if(typeof match !== "number" && 10 === match[0])
           {var rest2$9=match[1];return [10,trans(_mx_,rest2$9)]}
          throw [0,Assert_failure,_ac_];
         case 11:
          var _my_=ty1[1];
          if(typeof match === "number")
           var switch$11=1;
          else
           switch(match[0])
            {case 10:var switch$0=0,switch$11=0;break;
             case 11:var rest2$10=match[1];return [11,trans(_my_,rest2$10)];
             default:var switch$11=1}
          if(switch$11)throw [0,Assert_failure,_ad_];
          break;
         case 12:
          var _mz_=ty1[1];
          if(typeof match === "number")
           var switch$12=1;
          else
           switch(match[0])
            {case 10:var switch$0=0,switch$12=0;break;
             case 11:var switch$0=1,switch$12=0;break;
             case 12:var rest2$11=match[1];return [12,trans(_mz_,rest2$11)];
             default:var switch$12=1}
          if(switch$12)throw [0,Assert_failure,_ae_];
          break;
         case 13:
          var _mA_=ty1[1];
          if(typeof match === "number")
           var switch$13=1;
          else
           switch(match[0])
            {case 10:var switch$0=0,switch$13=0;break;
             case 11:var switch$0=1,switch$13=0;break;
             case 12:var switch$0=2,switch$13=0;break;
             case 13:var rest2$12=match[1];return [13,trans(_mA_,rest2$12)];
             default:var switch$13=1}
          if(switch$13)throw [0,Assert_failure,_af_];
          break;
         default:
          var _mB_=ty1[1];
          if(typeof match === "number")
           var switch$14=1;
          else
           switch(match[0])
            {case 10:var switch$0=0,switch$14=0;break;
             case 11:var switch$0=1,switch$14=0;break;
             case 12:var switch$0=2,switch$14=0;break;
             case 13:var switch$0=3,switch$14=0;break;
             case 14:var rest2$13=match[1];return [14,trans(_mB_,rest2$13)];
             default:var switch$14=1}
          if(switch$14)throw [0,Assert_failure,_ag_]}
      switch(switch$0)
       {case 0:throw [0,Assert_failure,_W_];
        case 1:throw [0,Assert_failure,_X_];
        case 2:throw [0,Assert_failure,_Y_];
        case 3:throw [0,Assert_failure,_Z_];
        case 4:throw [0,Assert_failure,___];
        case 5:throw [0,Assert_failure,_U_];
        case 6:throw [0,Assert_failure,_V_];
        default:throw [0,Assert_failure,_$_]}}
    var Type_mismatch=[248,_ah_,caml_fresh_oo_id(0)];
    function type_padding(pad,match)
     {if(typeof pad === "number")
       return [0,0,match];
      else
       {if(0 === pad[0])
         {var w=pad[2],padty=pad[1];return [0,[0,padty,w],match]}
        if(typeof match !== "number" && 2 === match[0])
         {var rest=match[1],padty$0=pad[1];return [0,[1,padty$0],rest]}
        throw Type_mismatch}}
    function type_padprec(pad,prec,fmtty)
     {var match=type_padding(pad,fmtty);
      if(typeof prec === "number")
       {if(0 === prec)
         {var rest=match[2],pad$0=match[1];return [0,pad$0,0,rest]}
        var _mi_=match[2];
        if(typeof _mi_ !== "number" && 2 === _mi_[0])
         {var rest$0=_mi_[1],pad$1=match[1];return [0,pad$1,1,rest$0]}
        throw Type_mismatch}
      var rest$1=match[2],pad$2=match[1],p=prec[1];
      return [0,pad$2,[0,p],rest$1]}
    function type_ignored_param_one(ign,fmt,fmtty)
     {var match=type_format_gen(fmt,fmtty),fmtty$0=match[2],fmt$0=match[1];
      return [0,[23,ign,fmt$0],fmtty$0]}
    function type_format_gen(fmt,fmtty)
     {if(typeof fmt === "number")
       return [0,0,fmtty];
      else
       switch(fmt[0])
        {case 0:
          if(typeof fmtty !== "number" && 0 === fmtty[0])
           {var
             fmtty_rest=fmtty[1],
             fmt_rest=fmt[1],
             match=type_format_gen(fmt_rest,fmtty_rest),
             fmtty$0=match[2],
             fmt$0=match[1];
            return [0,[0,fmt$0],fmtty$0]}
          break;
         case 1:
          if(typeof fmtty !== "number" && 0 === fmtty[0])
           {var
             fmtty_rest$0=fmtty[1],
             fmt_rest$0=fmt[1],
             match$0=type_format_gen(fmt_rest$0,fmtty_rest$0),
             fmtty$1=match$0[2],
             fmt$1=match$0[1];
            return [0,[1,fmt$1],fmtty$1]}
          break;
         case 2:
          var
           fmt_rest$1=fmt[2],
           pad=fmt[1],
           _lP_=type_padding(pad,fmtty),
           _lQ_=_lP_[2],
           _lR_=_lP_[1];
          if(typeof _lQ_ !== "number" && 1 === _lQ_[0])
           {var
             fmtty_rest$1=_lQ_[1],
             match$1=type_format_gen(fmt_rest$1,fmtty_rest$1),
             fmtty$2=match$1[2],
             fmt$2=match$1[1];
            return [0,[2,_lR_,fmt$2],fmtty$2]}
          throw Type_mismatch;
         case 3:
          var
           fmt_rest$2=fmt[2],
           pad$0=fmt[1],
           _lS_=type_padding(pad$0,fmtty),
           _lT_=_lS_[2],
           _lU_=_lS_[1];
          if(typeof _lT_ !== "number" && 1 === _lT_[0])
           {var
             fmtty_rest$2=_lT_[1],
             match$2=type_format_gen(fmt_rest$2,fmtty_rest$2),
             fmtty$3=match$2[2],
             fmt$3=match$2[1];
            return [0,[3,_lU_,fmt$3],fmtty$3]}
          throw Type_mismatch;
         case 4:
          var
           fmt_rest$3=fmt[4],
           prec=fmt[3],
           pad$1=fmt[2],
           iconv=fmt[1],
           _lV_=type_padprec(pad$1,prec,fmtty),
           _lW_=_lV_[3],
           _lX_=_lV_[2],
           _lY_=_lV_[1];
          if(typeof _lW_ !== "number" && 2 === _lW_[0])
           {var
             fmtty_rest$3=_lW_[1],
             match$3=type_format_gen(fmt_rest$3,fmtty_rest$3),
             fmtty$4=match$3[2],
             fmt$4=match$3[1];
            return [0,[4,iconv,_lY_,_lX_,fmt$4],fmtty$4]}
          throw Type_mismatch;
         case 5:
          var
           fmt_rest$4=fmt[4],
           prec$0=fmt[3],
           pad$2=fmt[2],
           iconv$0=fmt[1],
           _lZ_=type_padprec(pad$2,prec$0,fmtty),
           _l0_=_lZ_[3],
           _l1_=_lZ_[2],
           _l2_=_lZ_[1];
          if(typeof _l0_ !== "number" && 3 === _l0_[0])
           {var
             fmtty_rest$4=_l0_[1],
             match$4=type_format_gen(fmt_rest$4,fmtty_rest$4),
             fmtty$5=match$4[2],
             fmt$5=match$4[1];
            return [0,[5,iconv$0,_l2_,_l1_,fmt$5],fmtty$5]}
          throw Type_mismatch;
         case 6:
          var
           fmt_rest$5=fmt[4],
           prec$1=fmt[3],
           pad$3=fmt[2],
           iconv$1=fmt[1],
           _l3_=type_padprec(pad$3,prec$1,fmtty),
           _l4_=_l3_[3],
           _l5_=_l3_[2],
           _l6_=_l3_[1];
          if(typeof _l4_ !== "number" && 4 === _l4_[0])
           {var
             fmtty_rest$5=_l4_[1],
             match$5=type_format_gen(fmt_rest$5,fmtty_rest$5),
             fmtty$6=match$5[2],
             fmt$6=match$5[1];
            return [0,[6,iconv$1,_l6_,_l5_,fmt$6],fmtty$6]}
          throw Type_mismatch;
         case 7:
          var
           fmt_rest$6=fmt[4],
           prec$2=fmt[3],
           pad$4=fmt[2],
           iconv$2=fmt[1],
           _l7_=type_padprec(pad$4,prec$2,fmtty),
           _l8_=_l7_[3],
           _l9_=_l7_[2],
           _l__=_l7_[1];
          if(typeof _l8_ !== "number" && 5 === _l8_[0])
           {var
             fmtty_rest$6=_l8_[1],
             match$6=type_format_gen(fmt_rest$6,fmtty_rest$6),
             fmtty$7=match$6[2],
             fmt$7=match$6[1];
            return [0,[7,iconv$2,_l__,_l9_,fmt$7],fmtty$7]}
          throw Type_mismatch;
         case 8:
          var
           fmt_rest$7=fmt[4],
           prec$3=fmt[3],
           pad$5=fmt[2],
           fconv=fmt[1],
           _l$_=type_padprec(pad$5,prec$3,fmtty),
           _ma_=_l$_[3],
           _mb_=_l$_[2],
           _mc_=_l$_[1];
          if(typeof _ma_ !== "number" && 6 === _ma_[0])
           {var
             fmtty_rest$7=_ma_[1],
             match$7=type_format_gen(fmt_rest$7,fmtty_rest$7),
             fmtty$8=match$7[2],
             fmt$8=match$7[1];
            return [0,[8,fconv,_mc_,_mb_,fmt$8],fmtty$8]}
          throw Type_mismatch;
         case 9:
          var
           fmt_rest$8=fmt[2],
           pad$6=fmt[1],
           _md_=type_padding(pad$6,fmtty),
           _me_=_md_[2],
           _mf_=_md_[1];
          if(typeof _me_ !== "number" && 7 === _me_[0])
           {var
             fmtty_rest$8=_me_[1],
             match$8=type_format_gen(fmt_rest$8,fmtty_rest$8),
             fmtty$9=match$8[2],
             fmt$9=match$8[1];
            return [0,[9,_mf_,fmt$9],fmtty$9]}
          throw Type_mismatch;
         case 10:
          var
           fmt_rest$9=fmt[1],
           match$9=type_format_gen(fmt_rest$9,fmtty),
           fmtty$10=match$9[2],
           fmt$10=match$9[1];
          return [0,[10,fmt$10],fmtty$10];
         case 11:
          var
           fmt_rest$10=fmt[2],
           str=fmt[1],
           match$10=type_format_gen(fmt_rest$10,fmtty),
           fmtty$11=match$10[2],
           fmt$11=match$10[1];
          return [0,[11,str,fmt$11],fmtty$11];
         case 12:
          var
           fmt_rest$11=fmt[2],
           chr=fmt[1],
           match$11=type_format_gen(fmt_rest$11,fmtty),
           fmtty$12=match$11[2],
           fmt$12=match$11[1];
          return [0,[12,chr,fmt$12],fmtty$12];
         case 13:
          if(typeof fmtty !== "number" && 8 === fmtty[0])
           {var
             fmtty_rest$9=fmtty[2],
             sub_fmtty=fmtty[1],
             fmt_rest$12=fmt[3],
             sub_fmtty$0=fmt[2],
             pad_opt=fmt[1];
            if(caml_notequal([0,sub_fmtty$0],[0,sub_fmtty]))
             throw Type_mismatch;
            var
             match$12=type_format_gen(fmt_rest$12,fmtty_rest$9),
             fmtty$13=match$12[2],
             fmt$13=match$12[1];
            return [0,[13,pad_opt,sub_fmtty,fmt$13],fmtty$13]}
          break;
         case 14:
          if(typeof fmtty !== "number" && 9 === fmtty[0])
           {var
             fmtty_rest$10=fmtty[3],
             sub_fmtty1=fmtty[1],
             fmt_rest$13=fmt[3],
             sub_fmtty$1=fmt[2],
             pad_opt$0=fmt[1],
             _mg_=[0,erase_rel(sub_fmtty1)];
            if(caml_notequal([0,erase_rel(sub_fmtty$1)],_mg_))
             throw Type_mismatch;
            var
             match$13=type_format_gen(fmt_rest$13,erase_rel(fmtty_rest$10)),
             fmtty$14=match$13[2],
             fmt$14=match$13[1];
            return [0,[14,pad_opt$0,sub_fmtty1,fmt$14],fmtty$14]}
          break;
         case 15:
          if(typeof fmtty !== "number" && 10 === fmtty[0])
           {var
             fmtty_rest$11=fmtty[1],
             fmt_rest$14=fmt[1],
             match$14=type_format_gen(fmt_rest$14,fmtty_rest$11),
             fmtty$15=match$14[2],
             fmt$15=match$14[1];
            return [0,[15,fmt$15],fmtty$15]}
          break;
         case 16:
          if(typeof fmtty !== "number" && 11 === fmtty[0])
           {var
             fmtty_rest$12=fmtty[1],
             fmt_rest$15=fmt[1],
             match$15=type_format_gen(fmt_rest$15,fmtty_rest$12),
             fmtty$16=match$15[2],
             fmt$16=match$15[1];
            return [0,[16,fmt$16],fmtty$16]}
          break;
         case 17:
          var
           fmt_rest$16=fmt[2],
           formatting_lit=fmt[1],
           match$16=type_format_gen(fmt_rest$16,fmtty),
           fmtty$17=match$16[2],
           fmt$17=match$16[1];
          return [0,[17,formatting_lit,fmt$17],fmtty$17];
         case 18:
          var fmt_rest$17=fmt[2],formatting_gen=fmt[1];
          if(0 === formatting_gen[0])
           {var
             match$20=formatting_gen[1],
             str$0=match$20[2],
             fmt1=match$20[1],
             match$21=type_format_gen(fmt1,fmtty),
             fmtty2=match$21[2],
             fmt2=match$21[1],
             match$22=type_format_gen(fmt_rest$17,fmtty2),
             fmtty3=match$22[2],
             fmt3=match$22[1];
            return [0,[18,[0,[0,fmt2,str$0]],fmt3],fmtty3]}
          var
           match$23=formatting_gen[1],
           str$1=match$23[2],
           fmt1$0=match$23[1],
           match$24=type_format_gen(fmt1$0,fmtty),
           fmtty2$0=match$24[2],
           fmt2$0=match$24[1],
           match$25=type_format_gen(fmt_rest$17,fmtty2$0),
           fmtty3$0=match$25[2],
           fmt3$0=match$25[1];
          return [0,[18,[1,[0,fmt2$0,str$1]],fmt3$0],fmtty3$0];
         case 19:
          if(typeof fmtty !== "number" && 13 === fmtty[0])
           {var
             fmtty_rest$13=fmtty[1],
             fmt_rest$18=fmt[1],
             match$17=type_format_gen(fmt_rest$18,fmtty_rest$13),
             fmtty$18=match$17[2],
             fmt$18=match$17[1];
            return [0,[19,fmt$18],fmtty$18]}
          break;
         case 20:
          if(typeof fmtty !== "number" && 1 === fmtty[0])
           {var
             fmtty_rest$14=fmtty[1],
             fmt_rest$19=fmt[3],
             char_set=fmt[2],
             width_opt=fmt[1],
             match$18=type_format_gen(fmt_rest$19,fmtty_rest$14),
             fmtty$19=match$18[2],
             fmt$19=match$18[1];
            return [0,[20,width_opt,char_set,fmt$19],fmtty$19]}
          break;
         case 21:
          if(typeof fmtty !== "number" && 2 === fmtty[0])
           {var
             fmtty_rest$15=fmtty[1],
             fmt_rest$20=fmt[2],
             counter=fmt[1],
             match$19=type_format_gen(fmt_rest$20,fmtty_rest$15),
             fmtty$20=match$19[2],
             fmt$20=match$19[1];
            return [0,[21,counter,fmt$20],fmtty$20]}
          break;
         case 23:
          var rest=fmt[2],ign=fmt[1];
          if(typeof ign === "number")
           switch(ign)
            {case 0:return type_ignored_param_one(ign,rest,fmtty);
             case 1:return type_ignored_param_one(ign,rest,fmtty);
             case 2:
              if(typeof fmtty !== "number" && 14 === fmtty[0])
               {var
                 fmtty_rest$16=fmtty[1],
                 match$26=type_format_gen(rest,fmtty_rest$16),
                 fmtty$21=match$26[2],
                 fmt$21=match$26[1];
                return [0,[23,2,fmt$21],fmtty$21]}
              throw Type_mismatch;
             default:return type_ignored_param_one(ign,rest,fmtty)}
          else
           switch(ign[0])
            {case 0:return type_ignored_param_one(ign,rest,fmtty);
             case 1:return type_ignored_param_one(ign,rest,fmtty);
             case 2:return type_ignored_param_one(ign,rest,fmtty);
             case 3:return type_ignored_param_one(ign,rest,fmtty);
             case 4:return type_ignored_param_one(ign,rest,fmtty);
             case 5:return type_ignored_param_one(ign,rest,fmtty);
             case 6:return type_ignored_param_one(ign,rest,fmtty);
             case 7:return type_ignored_param_one(ign,rest,fmtty);
             case 8:
              var sub_fmtty$2=ign[2],pad_opt$1=ign[1];
              return type_ignored_param_one
                      ([8,pad_opt$1,sub_fmtty$2],rest,fmtty);
             case 9:
              var
               sub_fmtty$3=ign[2],
               pad_opt$2=ign[1],
               _mh_=type_ignored_format_substitution(sub_fmtty$3,rest,fmtty),
               match$27=_mh_[2],
               fmtty$22=match$27[2],
               fmt$22=match$27[1],
               sub_fmtty$4=_mh_[1];
              return [0,[23,[9,pad_opt$2,sub_fmtty$4],fmt$22],fmtty$22];
             case 10:return type_ignored_param_one(ign,rest,fmtty);
             default:return type_ignored_param_one(ign,rest,fmtty)}
         }
      throw Type_mismatch}
    function type_ignored_format_substitution(sub_fmtty,fmt,match)
     {if(typeof sub_fmtty === "number")
       return [0,0,type_format_gen(fmt,match)];
      else
       switch(sub_fmtty[0])
        {case 0:
          if(typeof match !== "number" && 0 === match[0])
           {var
             fmtty_rest=match[1],
             sub_fmtty_rest=sub_fmtty[1],
             match$0=
              type_ignored_format_substitution(sub_fmtty_rest,fmt,fmtty_rest),
             fmt$0=match$0[2],
             sub_fmtty_rest$0=match$0[1];
            return [0,[0,sub_fmtty_rest$0],fmt$0]}
          break;
         case 1:
          if(typeof match !== "number" && 1 === match[0])
           {var
             fmtty_rest$0=match[1],
             sub_fmtty_rest$1=sub_fmtty[1],
             match$1=
              type_ignored_format_substitution
               (sub_fmtty_rest$1,fmt,fmtty_rest$0),
             fmt$1=match$1[2],
             sub_fmtty_rest$2=match$1[1];
            return [0,[1,sub_fmtty_rest$2],fmt$1]}
          break;
         case 2:
          if(typeof match !== "number" && 2 === match[0])
           {var
             fmtty_rest$1=match[1],
             sub_fmtty_rest$3=sub_fmtty[1],
             match$2=
              type_ignored_format_substitution
               (sub_fmtty_rest$3,fmt,fmtty_rest$1),
             fmt$2=match$2[2],
             sub_fmtty_rest$4=match$2[1];
            return [0,[2,sub_fmtty_rest$4],fmt$2]}
          break;
         case 3:
          if(typeof match !== "number" && 3 === match[0])
           {var
             fmtty_rest$2=match[1],
             sub_fmtty_rest$5=sub_fmtty[1],
             match$3=
              type_ignored_format_substitution
               (sub_fmtty_rest$5,fmt,fmtty_rest$2),
             fmt$3=match$3[2],
             sub_fmtty_rest$6=match$3[1];
            return [0,[3,sub_fmtty_rest$6],fmt$3]}
          break;
         case 4:
          if(typeof match !== "number" && 4 === match[0])
           {var
             fmtty_rest$3=match[1],
             sub_fmtty_rest$7=sub_fmtty[1],
             match$4=
              type_ignored_format_substitution
               (sub_fmtty_rest$7,fmt,fmtty_rest$3),
             fmt$4=match$4[2],
             sub_fmtty_rest$8=match$4[1];
            return [0,[4,sub_fmtty_rest$8],fmt$4]}
          break;
         case 5:
          if(typeof match !== "number" && 5 === match[0])
           {var
             fmtty_rest$4=match[1],
             sub_fmtty_rest$9=sub_fmtty[1],
             match$5=
              type_ignored_format_substitution
               (sub_fmtty_rest$9,fmt,fmtty_rest$4),
             fmt$5=match$5[2],
             sub_fmtty_rest$10=match$5[1];
            return [0,[5,sub_fmtty_rest$10],fmt$5]}
          break;
         case 6:
          if(typeof match !== "number" && 6 === match[0])
           {var
             fmtty_rest$5=match[1],
             sub_fmtty_rest$11=sub_fmtty[1],
             match$6=
              type_ignored_format_substitution
               (sub_fmtty_rest$11,fmt,fmtty_rest$5),
             fmt$6=match$6[2],
             sub_fmtty_rest$12=match$6[1];
            return [0,[6,sub_fmtty_rest$12],fmt$6]}
          break;
         case 7:
          if(typeof match !== "number" && 7 === match[0])
           {var
             fmtty_rest$6=match[1],
             sub_fmtty_rest$13=sub_fmtty[1],
             match$7=
              type_ignored_format_substitution
               (sub_fmtty_rest$13,fmt,fmtty_rest$6),
             fmt$7=match$7[2],
             sub_fmtty_rest$14=match$7[1];
            return [0,[7,sub_fmtty_rest$14],fmt$7]}
          break;
         case 8:
          if(typeof match !== "number" && 8 === match[0])
           {var
             fmtty_rest$7=match[2],
             sub2_fmtty=match[1],
             sub_fmtty_rest$15=sub_fmtty[2],
             sub2_fmtty$0=sub_fmtty[1];
            if(caml_notequal([0,sub2_fmtty$0],[0,sub2_fmtty]))
             throw Type_mismatch;
            var
             match$8=
              type_ignored_format_substitution
               (sub_fmtty_rest$15,fmt,fmtty_rest$7),
             fmt$8=match$8[2],
             sub_fmtty_rest$16=match$8[1];
            return [0,[8,sub2_fmtty,sub_fmtty_rest$16],fmt$8]}
          break;
         case 9:
          if(typeof match !== "number" && 9 === match[0])
           {var
             fmtty_rest$8=match[3],
             sub2_fmtty$1=match[2],
             sub1_fmtty=match[1],
             sub_fmtty_rest$17=sub_fmtty[3],
             sub2_fmtty$2=sub_fmtty[2],
             sub1_fmtty$0=sub_fmtty[1],
             _lN_=[0,erase_rel(sub1_fmtty)];
            if(caml_notequal([0,erase_rel(sub1_fmtty$0)],_lN_))
             throw Type_mismatch;
            var _lO_=[0,erase_rel(sub2_fmtty$1)];
            if(caml_notequal([0,erase_rel(sub2_fmtty$2)],_lO_))
             throw Type_mismatch;
            var
             sub_fmtty$0=trans(symm(sub1_fmtty),sub2_fmtty$1),
             match$9=fmtty_rel_det(sub_fmtty$0),
             f4=match$9[4],
             f2=match$9[2];
            caml_call1(f2,0);
            caml_call1(f4,0);
            var
             match$10=
              type_ignored_format_substitution
               (erase_rel(sub_fmtty_rest$17),fmt,fmtty_rest$8),
             fmt$9=match$10[2],
             sub_fmtty_rest$18=match$10[1];
            return [0,
                    [9,sub1_fmtty,sub2_fmtty$1,symm(sub_fmtty_rest$18)],
                    fmt$9]}
          break;
         case 10:
          if(typeof match !== "number" && 10 === match[0])
           {var
             fmtty_rest$9=match[1],
             sub_fmtty_rest$19=sub_fmtty[1],
             match$11=
              type_ignored_format_substitution
               (sub_fmtty_rest$19,fmt,fmtty_rest$9),
             fmt$10=match$11[2],
             sub_fmtty_rest$20=match$11[1];
            return [0,[10,sub_fmtty_rest$20],fmt$10]}
          break;
         case 11:
          if(typeof match !== "number" && 11 === match[0])
           {var
             fmtty_rest$10=match[1],
             sub_fmtty_rest$21=sub_fmtty[1],
             match$12=
              type_ignored_format_substitution
               (sub_fmtty_rest$21,fmt,fmtty_rest$10),
             fmt$11=match$12[2],
             sub_fmtty_rest$22=match$12[1];
            return [0,[11,sub_fmtty_rest$22],fmt$11]}
          break;
         case 13:
          if(typeof match !== "number" && 13 === match[0])
           {var
             fmtty_rest$11=match[1],
             sub_fmtty_rest$23=sub_fmtty[1],
             match$13=
              type_ignored_format_substitution
               (sub_fmtty_rest$23,fmt,fmtty_rest$11),
             fmt$12=match$13[2],
             sub_fmtty_rest$24=match$13[1];
            return [0,[13,sub_fmtty_rest$24],fmt$12]}
          break;
         case 14:
          if(typeof match !== "number" && 14 === match[0])
           {var
             fmtty_rest$12=match[1],
             sub_fmtty_rest$25=sub_fmtty[1],
             match$14=
              type_ignored_format_substitution
               (sub_fmtty_rest$25,fmt,fmtty_rest$12),
             fmt$13=match$14[2],
             sub_fmtty_rest$26=match$14[1];
            return [0,[14,sub_fmtty_rest$26],fmt$13]}
          break
         }
      throw Type_mismatch}
    function fix_padding(padty,width,str)
     {var
       len=caml_ml_string_length(str),
       padty$0=0 <= width?padty:0,
       width$0=abs(width);
      if(width$0 <= len)return str;
      var _lM_=2 === padty$0?48:32,res=make(width$0,_lM_);
      switch(padty$0)
       {case 0:blit$0(str,0,res,0,len);break;
        case 1:blit$0(str,0,res,width$0 - len | 0,len);break;
        default:
         if(0 < len)
          {if(43 === caml_string_get(str,0))
            var switch$1=1;
           else
            if(45 === caml_string_get(str,0))
             var switch$1=1;
            else
             if(32 === caml_string_get(str,0))
              var switch$1=1;
             else
              var switch$0=0,switch$1=0;
           if(switch$1)
            {caml_bytes_set(res,0,caml_string_get(str,0));
             blit$0(str,1,res,(width$0 - len | 0) + 1 | 0,len - 1 | 0);
             var switch$0=1}}
         else
          var switch$0=0;
         if(!switch$0)
          {if(1 < len)
            if(48 === caml_string_get(str,0))
             {if(120 === caml_string_get(str,1))
               var switch$3=1;
              else
               if(88 === caml_string_get(str,1))
                var switch$3=1;
               else
                var switch$2=0,switch$3=0;
              if(switch$3)
               {caml_bytes_set(res,1,caml_string_get(str,1));
                blit$0(str,2,res,(width$0 - len | 0) + 2 | 0,len - 2 | 0);
                var switch$2=1}}
            else
             var switch$2=0;
           else
            var switch$2=0;
           if(!switch$2)blit$0(str,0,res,width$0 - len | 0,len)}}
      return res}
    function fix_int_precision(prec,str)
     {var
       prec$0=abs(prec),
       len=caml_ml_string_length(str),
       c=caml_string_get(str,0);
      if(58 <= c)
       var switch$0=71 <= c?5 < (c - 97 | 0) >>> 0?1:0:65 <= c?0:1;
      else
       {if(32 === c)
         var switch$1=1;
        else
         if(43 <= c)
          {var switcher=c - 43 | 0;
           switch(switcher)
            {case 5:
              if(len < (prec$0 + 2 | 0))
               if(1 < len)
                {var
                  switch$2=
                   120 === caml_string_get(str,1)
                    ?0
                    :88 === caml_string_get(str,1)?0:1;
                 if(!switch$2)
                  {var res$1=make(prec$0 + 2 | 0,48);
                   caml_bytes_set(res$1,1,caml_string_get(str,1));
                   blit$0(str,2,res$1,(prec$0 - len | 0) + 4 | 0,len - 2 | 0);
                   return res$1}}
              var switch$0=0,switch$1=0;
              break;
             case 0:
             case 2:var switch$1=1;break;
             case 1:
             case 3:
             case 4:var switch$0=1,switch$1=0;break;
             default:var switch$0=0,switch$1=0}}
         else
          var switch$0=1,switch$1=0;
        if(switch$1)
         {if(len < (prec$0 + 1 | 0))
           {var res$0=make(prec$0 + 1 | 0,48);
            caml_bytes_set(res$0,0,c);
            blit$0(str,1,res$0,(prec$0 - len | 0) + 2 | 0,len - 1 | 0);
            return res$0}
          var switch$0=1}}
      if(!switch$0)
       if(len < prec$0)
        {var res=make(prec$0,48);
         blit$0(str,0,res,prec$0 - len | 0,len);
         return res}
      return str}
    function string_to_caml_string(str)
     {var i$1=0;
      for(;;)
       {if(caml_ml_string_length(str) <= i$1)
         var _lL_=0;
        else
         {var match$0=caml_string_unsafe_get(str,i$1);
          if(32 <= match$0)
           {var _lK_=match$0 - 34 | 0;
            if(58 < _lK_ >>> 0)
             if(93 <= _lK_)var switch$0=0,switch$1=0;else var switch$1=1;
            else
             if(56 < (_lK_ - 1 | 0) >>> 0)
              var switch$0=1,switch$1=0;
             else
              var switch$1=1;
            if(switch$1){var i$2=i$1 + 1 | 0,i$1=i$2;continue}}
          else
           var switch$0=11 <= match$0?13 === match$0?1:0:8 <= match$0?1:0;
          var _lL_=switch$0?1:1}
        if(_lL_)
         {var n=[0,0],_lD_=caml_ml_bytes_length(str) - 1 | 0,_lC_=0;
          if(!(_lD_ < 0))
           {var i$0=_lC_;
            for(;;)
             {var match=caml_string_unsafe_get(str,i$0);
              if(32 <= match)
               {var _lH_=match - 34 | 0;
                if(58 < _lH_ >>> 0)
                 if(93 <= _lH_)var switch$2=0,switch$3=0;else var switch$3=1;
                else
                 if(56 < (_lH_ - 1 | 0) >>> 0)
                  var switch$2=1,switch$3=0;
                 else
                  var switch$3=1;
                if(switch$3)var _lI_=1,switch$2=2}
              else
               var switch$2=11 <= match?13 === match?1:0:8 <= match?1:0;
              switch(switch$2)
               {case 0:var _lI_=4;break;case 1:var _lI_=2;break}
              n[1] = n[1] + _lI_ | 0;
              var _lJ_=i$0 + 1 | 0;
              if(_lD_ !== i$0){var i$0=_lJ_;continue}
              break}}
          if(n[1] === caml_ml_bytes_length(str))
           {var len=caml_ml_bytes_length(str),r=caml_create_bytes(len);
            caml_blit_bytes(str,0,r,0,len);
            var str$0=r}
          else
           {var s=caml_create_bytes(n[1]);
            n[1] = 0;
            var _lF_=caml_ml_bytes_length(str) - 1 | 0,_lE_=0;
            if(!(_lF_ < 0))
             {var i=_lE_;
              for(;;)
               {var c=caml_string_unsafe_get(str,i);
                if(35 <= c)
                 var switch$4=92 === c?1:127 <= c?0:2;
                else
                 if(32 <= c)
                  var switch$4=34 <= c?1:2;
                 else
                  if(14 <= c)
                   var switch$4=0;
                  else
                   switch(c)
                    {case 8:
                      caml_string_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_string_unsafe_set(s,n[1],98);
                      var switch$4=3;
                      break;
                     case 9:
                      caml_string_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_string_unsafe_set(s,n[1],116);
                      var switch$4=3;
                      break;
                     case 10:
                      caml_string_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_string_unsafe_set(s,n[1],110);
                      var switch$4=3;
                      break;
                     case 13:
                      caml_string_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_string_unsafe_set(s,n[1],114);
                      var switch$4=3;
                      break;
                     default:var switch$4=0}
                switch(switch$4)
                 {case 0:
                   caml_string_unsafe_set(s,n[1],92);
                   n[1]++;
                   caml_string_unsafe_set(s,n[1],48 + (c / 100 | 0) | 0);
                   n[1]++;
                   caml_string_unsafe_set
                    (s,n[1],48 + ((c / 10 | 0) % 10 | 0) | 0);
                   n[1]++;
                   caml_string_unsafe_set(s,n[1],48 + (c % 10 | 0) | 0);
                   break;
                  case 1:
                   caml_string_unsafe_set(s,n[1],92);
                   n[1]++;
                   caml_string_unsafe_set(s,n[1],c);
                   break;
                  case 2:caml_string_unsafe_set(s,n[1],c);break
                  }
                n[1]++;
                var _lG_=i + 1 | 0;
                if(_lF_ !== i){var i=_lG_;continue}
                break}}
            var str$0=s}}
        else
         var str$0=str;
        var l=caml_ml_string_length(str$0),res=make(l + 2 | 0,34);
        caml_blit_string(str$0,0,res,1,l);
        return res}}
    function convert_int(iconv,n)
     {switch(iconv)
       {case 0:var _lB_=_ai_;break;
        case 1:var _lB_=_aj_;break;
        case 2:var _lB_=_ak_;break;
        case 3:var _lB_=_al_;break;
        case 4:var _lB_=_am_;break;
        case 5:var _lB_=_an_;break;
        case 6:var _lB_=_ao_;break;
        case 7:var _lB_=_ap_;break;
        case 8:var _lB_=_aq_;break;
        case 9:var _lB_=_ar_;break;
        case 10:var _lB_=_as_;break;
        case 11:var _lB_=_at_;break;
        default:var _lB_=_au_}
      return caml_format_int(_lB_,n)}
    function convert_int32(iconv,n)
     {switch(iconv)
       {case 0:var _lA_=_aI_;break;
        case 1:var _lA_=_aJ_;break;
        case 2:var _lA_=_aK_;break;
        case 3:var _lA_=_aL_;break;
        case 4:var _lA_=_aM_;break;
        case 5:var _lA_=_aN_;break;
        case 6:var _lA_=_aO_;break;
        case 7:var _lA_=_aP_;break;
        case 8:var _lA_=_aQ_;break;
        case 9:var _lA_=_aR_;break;
        case 10:var _lA_=_aS_;break;
        case 11:var _lA_=_aT_;break;
        default:var _lA_=_aU_}
      return caml_format_int(_lA_,n)}
    function convert_nativeint(iconv,n)
     {switch(iconv)
       {case 0:var _lz_=_aV_;break;
        case 1:var _lz_=_aW_;break;
        case 2:var _lz_=_aX_;break;
        case 3:var _lz_=_aY_;break;
        case 4:var _lz_=_aZ_;break;
        case 5:var _lz_=_a0_;break;
        case 6:var _lz_=_a1_;break;
        case 7:var _lz_=_a2_;break;
        case 8:var _lz_=_a3_;break;
        case 9:var _lz_=_a4_;break;
        case 10:var _lz_=_a5_;break;
        case 11:var _lz_=_a6_;break;
        default:var _lz_=_a7_}
      return caml_format_int(_lz_,n)}
    function convert_int64(iconv,n)
     {switch(iconv)
       {case 0:var _ly_=_av_;break;
        case 1:var _ly_=_aw_;break;
        case 2:var _ly_=_ax_;break;
        case 3:var _ly_=_ay_;break;
        case 4:var _ly_=_az_;break;
        case 5:var _ly_=_aA_;break;
        case 6:var _ly_=_aB_;break;
        case 7:var _ly_=_aC_;break;
        case 8:var _ly_=_aD_;break;
        case 9:var _ly_=_aE_;break;
        case 10:var _ly_=_aF_;break;
        case 11:var _ly_=_aG_;break;
        default:var _ly_=_aH_}
      return caml_int64_format(_ly_,n)}
    function convert_float(fconv,prec$0,x)
     {if(16 <= fconv)
       {if(17 <= fconv)
         switch(fconv - 17 | 0)
          {case 2:var switch$0=0;break;
           case 0:
           case 3:var sign=43,switch$0=1;break;
           default:var sign=32,switch$0=1}
        else
         var switch$0=0;
        if(!switch$0)var sign=45;
        var s=caml_hexstring_of_float(x,prec$0,sign);
        if(19 <= fconv)
         {var l=caml_ml_bytes_length(s);
          if(0 === l)return s;
          var r=caml_create_bytes(l),_ls_=l - 1 | 0,_lr_=0;
          if(!(_ls_ < 0))
           {var i=_lr_;
            for(;;)
             {var c=caml_string_unsafe_get(s,i);
              if(97 <= c)
               if(122 < c)var switch$1=0;else var _lt_=c - 32 | 0,switch$1=1;
              else
               var switch$1=0;
              if(!switch$1)var _lt_=c;
              caml_string_unsafe_set(r,i,_lt_);
              var _lu_=i + 1 | 0;
              if(_ls_ !== i){var i=_lu_;continue}
              break}}
          return r}
        return s}
      if(15 === fconv)
       var _lv_=_a8_;
      else
       {var prec=abs(prec$0);
        switch(fconv)
         {case 15:var symb=70;break;
          case 0:
          case 1:
          case 2:var symb=102;break;
          case 3:
          case 4:
          case 5:var symb=101;break;
          case 6:
          case 7:
          case 8:var symb=69;break;
          case 9:
          case 10:
          case 11:var symb=103;break;
          case 12:
          case 13:
          case 14:var symb=71;break;
          case 16:
          case 17:
          case 18:var symb=104;break;
          default:var symb=72}
        var buf=buffer_create(16);
        buffer_add_char(buf,37);
        switch(fconv)
         {case 1:
          case 4:
          case 7:
          case 10:
          case 13:
          case 17:
          case 20:buffer_add_char(buf,43);break;
          case 2:
          case 5:
          case 8:
          case 11:
          case 14:
          case 18:
          case 21:buffer_add_char(buf,32);break
          }
        buffer_add_char(buf,46);
        buffer_add_string(buf,caml_new_string("" + prec));
        buffer_add_char(buf,symb);
        var _lv_=buffer_contents(buf)}
      var str=caml_format_float(_lv_,x);
      if(15 === fconv)
       {var len=caml_ml_string_length(str),match$0=caml_classify_float(x);
        if(3 === match$0)return x < 0?_a9_:_a__;
        if(4 <= match$0)return _a$_;
        var i$0=0;
        for(;;)
         {if(i$0 === len)
           var _lx_=0;
          else
           {var
             match=caml_string_get(str,i$0),
             _lw_=match - 46 | 0,
             switch$2=
              23 < _lw_ >>> 0?55 === _lw_?1:0:21 < (_lw_ - 1 | 0) >>> 0?1:0;
            if(!switch$2){var i$1=i$0 + 1 | 0,i$0=i$1;continue}
            var _lx_=1}
          return _lx_?str:_a_(str,_ba_)}}
      return str}
    function make_int_padding_precision(k,o,acc,fmt,pad,match,trans,iconv)
     {if(typeof pad === "number")
       {if(typeof match === "number")
         return 0 === match
                 ?function(x)
                   {var str=caml_call2(trans,iconv,x);
                    return make_printf(k,o,[4,acc,str],fmt)}
                 :function(p,x)
                   {var str=fix_int_precision(p,caml_call2(trans,iconv,x));
                    return make_printf(k,o,[4,acc,str],fmt)};
        var p=match[1];
        return function(x)
         {var str=fix_int_precision(p,caml_call2(trans,iconv,x));
          return make_printf(k,o,[4,acc,str],fmt)}}
      else
       {if(0 === pad[0])
         {var _lo_=pad[2],_lp_=pad[1];
          if(typeof match === "number")
           return 0 === match
                   ?function(x)
                     {var str=fix_padding(_lp_,_lo_,caml_call2(trans,iconv,x));
                      return make_printf(k,o,[4,acc,str],fmt)}
                   :function(p,x)
                     {var
                       str=
                        fix_padding
                         (_lp_,_lo_,fix_int_precision(p,caml_call2(trans,iconv,x)));
                      return make_printf(k,o,[4,acc,str],fmt)};
          var p$0=match[1];
          return function(x)
           {var
             str=
              fix_padding
               (_lp_,_lo_,fix_int_precision(p$0,caml_call2(trans,iconv,x)));
            return make_printf(k,o,[4,acc,str],fmt)}}
        var _lq_=pad[1];
        if(typeof match === "number")
         return 0 === match
                 ?function(w,x)
                   {var str=fix_padding(_lq_,w,caml_call2(trans,iconv,x));
                    return make_printf(k,o,[4,acc,str],fmt)}
                 :function(w,p,x)
                   {var
                     str=
                      fix_padding
                       (_lq_,w,fix_int_precision(p,caml_call2(trans,iconv,x)));
                    return make_printf(k,o,[4,acc,str],fmt)};
        var p$1=match[1];
        return function(w,x)
         {var
           str=
            fix_padding
             (_lq_,w,fix_int_precision(p$1,caml_call2(trans,iconv,x)));
          return make_printf(k,o,[4,acc,str],fmt)}}}
    function make_padding(k,o,acc,fmt,pad,trans)
     {if(typeof pad === "number")
       return function(x)
        {var new_acc=[4,acc,caml_call1(trans,x)];
         return make_printf(k,o,new_acc,fmt)};
      else
       {if(0 === pad[0])
         {var width=pad[2],padty=pad[1];
          return function(x)
           {var new_acc=[4,acc,fix_padding(padty,width,caml_call1(trans,x))];
            return make_printf(k,o,new_acc,fmt)}}
        var padty$0=pad[1];
        return function(w,x)
         {var new_acc=[4,acc,fix_padding(padty$0,w,caml_call1(trans,x))];
          return make_printf(k,o,new_acc,fmt)}}}
    function make_printf$0(counter,k,o,acc,fmt)
     {var k$0=k,acc$0=acc,fmt$0=fmt;
      for(;;)
       if(typeof fmt$0 === "number")
        return caml_call2(k$0,o,acc$0);
       else
        switch(fmt$0[0])
         {case 0:
           var rest=fmt$0[1];
           return function(c)
            {var new_acc=[5,acc$0,c];return make_printf(k$0,o,new_acc,rest)};
          case 1:
           var rest$0=fmt$0[1];
           return function(c)
            {if(40 <= c)
              if(92 === c)
               var str=_i_,switch$0=2;
              else
               var switch$0=127 <= c?0:1;
             else
              if(32 <= c)
               if(39 <= c)var str=_j_,switch$0=2;else var switch$0=1;
              else
               if(14 <= c)
                var switch$0=0;
               else
                switch(c)
                 {case 8:var str=_k_,switch$0=2;break;
                  case 9:var str=_l_,switch$0=2;break;
                  case 10:var str=_m_,switch$0=2;break;
                  case 13:var str=_n_,switch$0=2;break;
                  default:var switch$0=0}
             switch(switch$0)
              {case 0:
                var s=caml_create_bytes(4);
                caml_string_unsafe_set(s,0,92);
                caml_string_unsafe_set(s,1,48 + (c / 100 | 0) | 0);
                caml_string_unsafe_set(s,2,48 + ((c / 10 | 0) % 10 | 0) | 0);
                caml_string_unsafe_set(s,3,48 + (c % 10 | 0) | 0);
                var str=s;
                break;
               case 1:
                var s$0=caml_create_bytes(1);
                caml_string_unsafe_set(s$0,0,c);
                var str=s$0;
                break
               }
             var l=caml_ml_string_length(str),res=make(l + 2 | 0,39);
             caml_blit_string(str,0,res,1,l);
             var new_acc=[4,acc$0,res];
             return make_printf(k$0,o,new_acc,rest$0)};
          case 2:
           var rest$1=fmt$0[2],pad=fmt$0[1];
           return make_padding
                   (k$0,o,acc$0,rest$1,pad,function(str){return str});
          case 3:
           var rest$2=fmt$0[2],pad$0=fmt$0[1];
           return make_padding(k$0,o,acc$0,rest$2,pad$0,string_to_caml_string);
          case 4:
           var rest$3=fmt$0[4],prec=fmt$0[3],pad$1=fmt$0[2],iconv=fmt$0[1];
           return make_int_padding_precision
                   (k$0,o,acc$0,rest$3,pad$1,prec,convert_int,iconv);
          case 5:
           var
            rest$4=fmt$0[4],
            prec$0=fmt$0[3],
            pad$2=fmt$0[2],
            iconv$0=fmt$0[1];
           return make_int_padding_precision
                   (k$0,o,acc$0,rest$4,pad$2,prec$0,convert_int32,iconv$0);
          case 6:
           var
            rest$5=fmt$0[4],
            prec$1=fmt$0[3],
            pad$3=fmt$0[2],
            iconv$1=fmt$0[1];
           return make_int_padding_precision
                   (k$0,o,acc$0,rest$5,pad$3,prec$1,convert_nativeint,iconv$1);
          case 7:
           var
            rest$6=fmt$0[4],
            prec$2=fmt$0[3],
            pad$4=fmt$0[2],
            iconv$2=fmt$0[1];
           return make_int_padding_precision
                   (k$0,o,acc$0,rest$6,pad$4,prec$2,convert_int64,iconv$2);
          case 8:
           var rest$7=fmt$0[4],prec$3=fmt$0[3],pad$5=fmt$0[2],fconv=fmt$0[1];
           if(typeof pad$5 === "number")
            {if(typeof prec$3 === "number")
              return 0 === prec$3
                      ?function(x)
                        {var str=convert_float(fconv,default_float_precision,x);
                         return make_printf(k$0,o,[4,acc$0,str],rest$7)}
                      :function(p,x)
                        {var str=convert_float(fconv,p,x);
                         return make_printf(k$0,o,[4,acc$0,str],rest$7)};
             var p=prec$3[1];
             return function(x)
              {var str=convert_float(fconv,p,x);
               return make_printf(k$0,o,[4,acc$0,str],rest$7)}}
           else
            {if(0 === pad$5[0])
              {var _lk_=pad$5[2],_ll_=pad$5[1];
               if(typeof prec$3 === "number")
                return 0 === prec$3
                        ?function(x)
                          {var
                            str=convert_float(fconv,default_float_precision,x),
                            str$0=fix_padding(_ll_,_lk_,str);
                           return make_printf(k$0,o,[4,acc$0,str$0],rest$7)}
                        :function(p,x)
                          {var str=fix_padding(_ll_,_lk_,convert_float(fconv,p,x));
                           return make_printf(k$0,o,[4,acc$0,str],rest$7)};
               var p$0=prec$3[1];
               return function(x)
                {var str=fix_padding(_ll_,_lk_,convert_float(fconv,p$0,x));
                 return make_printf(k$0,o,[4,acc$0,str],rest$7)}}
             var _lm_=pad$5[1];
             if(typeof prec$3 === "number")
              return 0 === prec$3
                      ?function(w,x)
                        {var
                          str=convert_float(fconv,default_float_precision,x),
                          str$0=fix_padding(_lm_,w,str);
                         return make_printf(k$0,o,[4,acc$0,str$0],rest$7)}
                      :function(w,p,x)
                        {var str=fix_padding(_lm_,w,convert_float(fconv,p,x));
                         return make_printf(k$0,o,[4,acc$0,str],rest$7)};
             var p$1=prec$3[1];
             return function(w,x)
              {var str=fix_padding(_lm_,w,convert_float(fconv,p$1,x));
               return make_printf(k$0,o,[4,acc$0,str],rest$7)}}
          case 9:
           var rest$8=fmt$0[2],pad$6=fmt$0[1];
           return make_padding(k$0,o,acc$0,rest$8,pad$6,string_of_bool);
          case 10:
           var fmt$1=fmt$0[1],acc$1=[7,acc$0],acc$0=acc$1,fmt$0=fmt$1;
           continue;
          case 11:
           var
            fmt$2=fmt$0[2],
            str=fmt$0[1],
            acc$2=[2,acc$0,str],
            acc$0=acc$2,
            fmt$0=fmt$2;
           continue;
          case 12:
           var
            fmt$3=fmt$0[2],
            chr=fmt$0[1],
            acc$3=[3,acc$0,chr],
            acc$0=acc$3,
            fmt$0=fmt$3;
           continue;
          case 13:
           var rest$9=fmt$0[3],sub_fmtty=fmt$0[2],buf=buffer_create(16);
           bprint_fmtty(buf,sub_fmtty);
           var ty=buffer_contents(buf);
           return function(str)
            {return make_printf(k$0,o,[4,acc$0,ty],rest$9)};
          case 14:
           var rest$10=fmt$0[3],fmtty=fmt$0[2];
           return function(param)
            {var
              fmt$0=param[1],
              fmtty$0=erase_rel(symm(fmtty)),
              _ln_=type_format_gen(fmt$0,fmtty$0);
             if(typeof _ln_[2] === "number")
              {var fmt=_ln_[1];
               return make_printf(k$0,o,acc$0,concat_fmt(fmt,rest$10))}
             throw Type_mismatch};
          case 15:
           var rest$11=fmt$0[1];
           return function(f,x)
            {return make_printf
                     (k$0,
                      o,
                      [6,acc$0,function(o){return caml_call2(f,o,x)}],
                      rest$11)};
          case 16:
           var rest$12=fmt$0[1];
           return function(f){return make_printf(k$0,o,[6,acc$0,f],rest$12)};
          case 17:
           var
            fmt$4=fmt$0[2],
            fmting_lit=fmt$0[1],
            acc$4=[0,acc$0,fmting_lit],
            acc$0=acc$4,
            fmt$0=fmt$4;
           continue;
          case 18:
           var _li_=fmt$0[1];
           if(0 === _li_[0])
            {var
              rest$13=fmt$0[2],
              match=_li_[1],
              fmt$5=match[1],
              k$3=
               function(acc,k,rest)
                {function k$0(koc,kacc)
                  {return make_printf(k,koc,[1,acc,[0,kacc]],rest)}
                 return k$0},
              k$1=k$3(acc$0,k$0,rest$13),
              k$0=k$1,
              acc$0=0,
              fmt$0=fmt$5;
             continue}
           var
            rest$14=fmt$0[2],
            match$0=_li_[1],
            fmt$6=match$0[1],
            k$4=
             function(acc,k,rest)
              {function k$0(koc,kacc)
                {return make_printf(k,koc,[1,acc,[1,kacc]],rest)}
               return k$0},
            k$2=k$4(acc$0,k$0,rest$14),
            k$0=k$2,
            acc$0=0,
            fmt$0=fmt$6;
           continue;
          case 19:throw [0,Assert_failure,_bb_];
          case 20:
           var rest$15=fmt$0[3],new_acc=[8,acc$0,_bc_];
           return function(param){return make_printf(k$0,o,new_acc,rest$15)};
          case 21:
           var rest$16=fmt$0[2];
           return function(n)
            {var new_acc=[4,acc$0,caml_format_int(_bd_,n)];
             return make_printf(k$0,o,new_acc,rest$16)};
          case 22:
           var rest$17=fmt$0[1];
           return function(c)
            {var new_acc=[5,acc$0,c];
             return make_printf(k$0,o,new_acc,rest$17)};
          case 23:
           var rest$18=fmt$0[2],ign=fmt$0[1];
           if(typeof ign === "number")
            switch(ign)
             {case 0:
               if(counter < 50)
                {var counter$1=counter + 1 | 0;
                 return make_invalid_arg(counter$1,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 1:
               if(counter < 50)
                {var counter$2=counter + 1 | 0;
                 return make_invalid_arg(counter$2,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 2:throw [0,Assert_failure,_be_];
              default:
               if(counter < 50)
                {var counter$3=counter + 1 | 0;
                 return make_invalid_arg(counter$3,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18])}
           else
            switch(ign[0])
             {case 0:
               if(counter < 50)
                {var counter$4=counter + 1 | 0;
                 return make_invalid_arg(counter$4,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 1:
               if(counter < 50)
                {var counter$5=counter + 1 | 0;
                 return make_invalid_arg(counter$5,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 2:
               if(counter < 50)
                {var counter$6=counter + 1 | 0;
                 return make_invalid_arg(counter$6,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 3:
               if(counter < 50)
                {var counter$7=counter + 1 | 0;
                 return make_invalid_arg(counter$7,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 4:
               if(counter < 50)
                {var counter$8=counter + 1 | 0;
                 return make_invalid_arg(counter$8,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 5:
               if(counter < 50)
                {var counter$9=counter + 1 | 0;
                 return make_invalid_arg(counter$9,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 6:
               if(counter < 50)
                {var counter$10=counter + 1 | 0;
                 return make_invalid_arg(counter$10,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 7:
               if(counter < 50)
                {var counter$11=counter + 1 | 0;
                 return make_invalid_arg(counter$11,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 8:
               if(counter < 50)
                {var counter$12=counter + 1 | 0;
                 return make_invalid_arg(counter$12,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 9:
               var fmtty$0=ign[2];
               if(counter < 50)
                {var counter$15=counter + 1 | 0;
                 return make_from_fmtty$0
                         (counter$15,k$0,o,acc$0,fmtty$0,rest$18)}
               return caml_trampoline_return
                       (make_from_fmtty$0,[0,k$0,o,acc$0,fmtty$0,rest$18]);
              case 10:
               if(counter < 50)
                {var counter$13=counter + 1 | 0;
                 return make_invalid_arg(counter$13,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              default:
               if(counter < 50)
                {var counter$14=counter + 1 | 0;
                 return make_invalid_arg(counter$14,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18])}
          default:
           var
            rest$19=fmt$0[3],
            f=fmt$0[2],
            arity=fmt$0[1],
            _lj_=caml_call1(f,0);
           if(counter < 50)
            {var counter$0=counter + 1 | 0;
             return make_custom$0(counter$0,k$0,o,acc$0,rest$19,arity,_lj_)}
           return caml_trampoline_return
                   (make_custom$0,[0,k$0,o,acc$0,rest$19,arity,_lj_])}}
    function make_from_fmtty$0(counter,k,o,acc,fmtty,fmt)
     {if(typeof fmtty === "number")
       {if(counter < 50)
         {var counter$0=counter + 1 | 0;
          return make_invalid_arg(counter$0,k,o,acc,fmt)}
        return caml_trampoline_return(make_invalid_arg,[0,k,o,acc,fmt])}
      else
       switch(fmtty[0])
        {case 0:
          var rest=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest,fmt)};
         case 1:
          var rest$0=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$0,fmt)};
         case 2:
          var rest$1=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$1,fmt)};
         case 3:
          var rest$2=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$2,fmt)};
         case 4:
          var rest$3=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$3,fmt)};
         case 5:
          var rest$4=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$4,fmt)};
         case 6:
          var rest$5=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$5,fmt)};
         case 7:
          var rest$6=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$6,fmt)};
         case 8:
          var rest$7=fmtty[2];
          return function(param){return make_from_fmtty(k,o,acc,rest$7,fmt)};
         case 9:
          var
           rest$8=fmtty[3],
           ty2=fmtty[2],
           ty1=fmtty[1],
           ty=trans(symm(ty1),ty2);
          return function(param)
           {return make_from_fmtty(k,o,acc,concat_fmtty(ty,rest$8),fmt)};
         case 10:
          var rest$9=fmtty[1];
          return function(param,_lh_)
           {return make_from_fmtty(k,o,acc,rest$9,fmt)};
         case 11:
          var rest$10=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$10,fmt)};
         case 12:
          var rest$11=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$11,fmt)};
         case 13:throw [0,Assert_failure,_bf_];
         default:throw [0,Assert_failure,_bg_]}}
    function make_invalid_arg(counter,k,o,acc,fmt)
     {var _lg_=[8,acc,_bh_];
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return make_printf$0(counter$0,k,o,_lg_,fmt)}
      return caml_trampoline_return(make_printf$0,[0,k,o,_lg_,fmt])}
    function make_custom$0(counter,k,o,acc,rest,arity,f)
     {if(arity)
       {var arity$0=arity[1];
        return function(x)
         {return make_custom(k,o,acc,rest,arity$0,caml_call1(f,x))}}
      var _lf_=[4,acc,f];
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return make_printf$0(counter$0,k,o,_lf_,rest)}
      return caml_trampoline_return(make_printf$0,[0,k,o,_lf_,rest])}
    function make_printf(k,o,acc,fmt)
     {return caml_trampoline(make_printf$0(0,k,o,acc,fmt))}
    function make_from_fmtty(k,o,acc,fmtty,fmt)
     {return caml_trampoline(make_from_fmtty$0(0,k,o,acc,fmtty,fmt))}
    function make_custom(k,o,acc,rest,arity,f)
     {return caml_trampoline(make_custom$0(0,k,o,acc,rest,arity,f))}
    function strput_acc(b,acc)
     {var acc$0=acc;
      for(;;)
       if(typeof acc$0 === "number")
        return 0;
       else
        switch(acc$0[0])
         {case 0:
           var fmting_lit=acc$0[2],p=acc$0[1];
           if(typeof fmting_lit === "number")
            switch(fmting_lit)
             {case 0:var s=_u_;break;
              case 1:var s=_v_;break;
              case 2:var s=_w_;break;
              case 3:var s=_x_;break;
              case 4:var s=_y_;break;
              case 5:var s=_z_;break;
              default:var s=_A_}
           else
            switch(fmting_lit[0])
             {case 0:var str=fmting_lit[1],s=str;break;
              case 1:var str$0=fmting_lit[1],s=str$0;break;
              default:var c=fmting_lit[1],s=_a_(_B_,make(1,c))}
           strput_acc(b,p);
           return add_string(b,s);
          case 1:
           var _ld_=acc$0[2],_le_=acc$0[1];
           if(0 === _ld_[0])
            {var acc$1=_ld_[1];
             strput_acc(b,_le_);
             add_string(b,_bi_);
             var acc$0=acc$1;
             continue}
           var acc$2=_ld_[1];
           strput_acc(b,_le_);
           add_string(b,_bj_);
           var acc$0=acc$2;
           continue;
          case 6:
           var f=acc$0[2],p$2=acc$0[1];
           strput_acc(b,p$2);
           return add_string(b,caml_call1(f,0));
          case 7:var acc$3=acc$0[1],acc$0=acc$3;continue;
          case 8:
           var msg=acc$0[2],p$3=acc$0[1];
           strput_acc(b,p$3);
           return invalid_arg(msg);
          case 2:
          case 4:
           var s$0=acc$0[2],p$0=acc$0[1];
           strput_acc(b,p$0);
           return add_string(b,s$0);
          default:
           var c$0=acc$0[2],p$1=acc$0[1];
           strput_acc(b,p$1);
           var pos=b[2];
           if(b[3] <= pos)resize(b,1);
           caml_string_unsafe_set(b[1],pos,c$0);
           b[2] = pos + 1 | 0;
           return 0}}
    function sprintf(fmt$0)
     {var fmt=fmt$0[1];
      function k(param,acc)
       {var
         n$0=64,
         n=max_string_length < 64?max_string_length:n$0,
         s=caml_create_bytes(n),
         buf=[0,s,0,n,s];
        strput_acc(buf,acc);
        return sub_string(buf[1],0,buf[2])}
      return make_printf(k,0,0,fmt)}
    var printers=[0,0];
    function register_printer(fn){printers[1] = [0,fn,printers[1]];return 0}
    try
     {var _jb_=caml_sys_getenv(_ja_),params=_jb_}
    catch(_lb_)
     {_lb_ = caml_wrap_exception(_lb_);
      if(_lb_ !== Not_found)throw _lb_;
      try
       {var _i$_=caml_sys_getenv(_i__),_bm_=_i$_}
      catch(_lc_)
       {_lc_ = caml_wrap_exception(_lc_);
        if(_lc_ !== Not_found)throw _lc_;
        var _bm_=_bl_}
      var params=_bm_}
    var
     randomized_default=contains(params,82),
     prng=
      [246,
       function(_la_)
        {var
          seed$0=caml_sys_random_seed(0),
          result=[0,caml_make_vect(55,0),0],
          seed=0 === seed$0.length - 1?[0,0]:seed$0,
          l=seed.length - 1,
          i$0=0;
         for(;;)
          {caml_check_bound(result[1],i$0)[i$0 + 1] = i$0;
           var _k$_=i$0 + 1 | 0;
           if(54 !== i$0){var i$0=_k$_;continue}
           var accu=[0,_bk_],_k7_=54 + max(55,l) | 0,_k6_=0;
           if(!(_k7_ < 0))
            {var i=_k6_;
             for(;;)
              {var
                j=i % 55 | 0,
                k=caml_mod(i,l),
                x=caml_check_bound(seed,k)[k + 1],
                str=_a_(accu[1],caml_new_string("" + x));
               accu[1] = caml_md5_string(str,0,caml_ml_string_length(str));
               var
                _k8_=accu[1],
                _k2_=caml_string_get(_k8_,3) << 24,
                _k3_=caml_string_get(_k8_,2) << 16,
                _k4_=caml_string_get(_k8_,1) << 8,
                _k5_=
                 ((caml_string_get(_k8_,0) + _k4_ | 0) + _k3_ | 0)
                 +
                 _k2_
                 |
                 0,
                _k9_=
                 (caml_check_bound(result[1],j)[j + 1] ^ _k5_)
                 &
                 1073741823;
               caml_check_bound(result[1],j)[j + 1] = _k9_;
               var _k__=i + 1 | 0;
               if(_k7_ !== i){var i=_k__;continue}
               break}}
           result[2] = 0;
           return result}}];
    function create(opt,initial_size)
     {if(opt)var sth=opt[1],random=sth;else var random=randomized_default;
      var x=16;
      for(;;)
       {if(!(initial_size <= x))
         if(!(max_array_length < (x * 2 | 0)))
          {var x$0=x * 2 | 0,x=x$0;continue}
        if(random)
         {var
           _k0_=caml_obj_tag(prng),
           _k1_=250 === _k0_?prng[1]:246 === _k0_?force_lazy_block(prng):prng;
          _k1_[2] = (_k1_[2] + 1 | 0) % 55 | 0;
          var
           _kX_=_k1_[2],
           curval=caml_check_bound(_k1_[1],_kX_)[_kX_ + 1],
           _kY_=(_k1_[2] + 24 | 0) % 55 | 0,
           newval=
            caml_check_bound(_k1_[1],_kY_)[_kY_ + 1]
            +
            (curval ^ (curval >>> 25 | 0) & 31)
            |
            0,
           newval30=newval & 1073741823,
           _kZ_=_k1_[2];
          caml_check_bound(_k1_[1],_kZ_)[_kZ_ + 1] = newval30;
          var seed=newval30}
        else
         var seed=0;
        return [0,0,caml_make_vect(x,0),seed,x]}}
    function register_exception(name,exn)
     {var slot=caml_obj_tag(exn) === 248?exn:exn[1];
      return caml_register_named_value(name,slot)}
    try
     {caml_sys_getenv(_i9_)}
    catch(_kW_)
     {_kW_ = caml_wrap_exception(_kW_);if(_kW_ !== Not_found)throw _kW_}
    try
     {caml_sys_getenv(_i8_)}
    catch(_kV_)
     {_kV_ = caml_wrap_exception(_kV_);if(_kV_ !== Not_found)throw _kV_}
    var
     switch$0=
      caml_string_notequal(os_type,_bn_)
       ?caml_string_notequal(os_type,_bo_)?1:0
       :0,
     window=joo_global_object,
     no_handler=null,
     undefined$0=undefined;
    function test(x){return 1 - (x == no_handler?1:0)}
    var
     true$0=true,
     array_constructor=window.Array,
     Error=[248,_bp_,caml_fresh_oo_id(0)];
    register_exception(_bq_,[0,Error,{}]);
    (function(exn){throw exn});
    register_printer
     (function(param)
       {if(param[1] === Error)
         {var e=param[2];return [0,caml_js_to_string(e.toString())]}
        return 0});
    register_printer
     (function(e)
       {return e instanceof array_constructor
                ?0
                :[0,caml_js_to_string(e.toString())]});
    function appendChild(p,n){p.appendChild(n);return 0}
    function handler(f)
     {return function(e)
       {if(test(e))
         {var res=caml_call1(f,e);
          if(1 - (res | 0))e.preventDefault();
          return res}
        var e$0=event,res$0=caml_call1(f,e$0);
        if(1 - (res$0 | 0))e$0.returnValue = res$0;
        return res$0}}
    function addEventListener(e,typ,h,capt)
     {if(e.addEventListener === undefined$0)
       {var
         ev="on".concat(typ),
         callback=
          function(e)
           {var _kS_=[0,h,e,[0]];
            return function(_kT_,_kU_){return caml_js_call(_kS_,_kT_,_kU_)}};
        e.attachEvent(ev,callback);
        return function(param){return e.detachEvent(ev,callback)}}
      e.addEventListener(typ,h,capt);
      return function(param){return e.removeEventListener(typ,h,capt)}}
    var
     mousedown="mousedown",
     mouseup="mouseup",
     mousemove="mousemove",
     keydown="keydown",
     doc=window.document,
     jsoo_1df5757a="2d";
    function unsafeCreateElement(doc,name)
     {return doc.createElement(name.toString())}
    function createImg(doc){return unsafeCreateElement(doc,_bt_)}
    function createAudio(doc){return unsafeCreateElement(doc,_bu_)}
    var
     Canvas_not_available=[248,_bv_,caml_fresh_oo_id(0)],
     html_element=window.HTMLElement;
    html_element === undefined$0;
    var Unix_error=[248,_bx_,caml_fresh_oo_id(0)];
    register_exception(_bA_,[0,Unix_error,0,_bz_,_by_]);
    register_printer
     (function(param)
       {if(param[1] === Unix_error)
         {var s=param[4],s$0=param[3],e=param[2];
          if(typeof e === "number")
           {var _kR_=e;
            if(34 <= _kR_)
             switch(_kR_)
              {case 34:var msg=_b__;break;
               case 35:var msg=_b$_;break;
               case 36:var msg=_ca_;break;
               case 37:var msg=_cb_;break;
               case 38:var msg=_cc_;break;
               case 39:var msg=_cd_;break;
               case 40:var msg=_ce_;break;
               case 41:var msg=_cf_;break;
               case 42:var msg=_cg_;break;
               case 43:var msg=_ch_;break;
               case 44:var msg=_ci_;break;
               case 45:var msg=_cj_;break;
               case 46:var msg=_ck_;break;
               case 47:var msg=_cl_;break;
               case 48:var msg=_cm_;break;
               case 49:var msg=_cn_;break;
               case 50:var msg=_co_;break;
               case 51:var msg=_cp_;break;
               case 52:var msg=_cq_;break;
               case 53:var msg=_cr_;break;
               case 54:var msg=_cs_;break;
               case 55:var msg=_ct_;break;
               case 56:var msg=_cu_;break;
               case 57:var msg=_cv_;break;
               case 58:var msg=_cw_;break;
               case 59:var msg=_cx_;break;
               case 60:var msg=_cy_;break;
               case 61:var msg=_cz_;break;
               case 62:var msg=_cA_;break;
               case 63:var msg=_cB_;break;
               case 64:var msg=_cC_;break;
               case 65:var msg=_cD_;break;
               case 66:var msg=_cE_;break;
               default:var msg=_cF_}
            else
             switch(_kR_)
              {case 0:var msg=_bB_;break;
               case 1:var msg=_bD_;break;
               case 2:var msg=_bE_;break;
               case 3:var msg=_bF_;break;
               case 4:var msg=_bG_;break;
               case 5:var msg=_bH_;break;
               case 6:var msg=_bI_;break;
               case 7:var msg=_bJ_;break;
               case 8:var msg=_bK_;break;
               case 9:var msg=_bL_;break;
               case 10:var msg=_bM_;break;
               case 11:var msg=_bN_;break;
               case 12:var msg=_bO_;break;
               case 13:var msg=_bP_;break;
               case 14:var msg=_bQ_;break;
               case 15:var msg=_bR_;break;
               case 16:var msg=_bS_;break;
               case 17:var msg=_bT_;break;
               case 18:var msg=_bU_;break;
               case 19:var msg=_bV_;break;
               case 20:var msg=_bW_;break;
               case 21:var msg=_bX_;break;
               case 22:var msg=_bY_;break;
               case 23:var msg=_bZ_;break;
               case 24:var msg=_b0_;break;
               case 25:var msg=_b1_;break;
               case 26:var msg=_b2_;break;
               case 27:var msg=_b3_;break;
               case 28:var msg=_b4_;break;
               case 29:var msg=_b5_;break;
               case 30:var msg=_b6_;break;
               case 31:var msg=_b7_;break;
               case 32:var msg=_b8_;break;
               default:var msg=_b9_}}
          else
           var x=e[1],msg=caml_call1(sprintf(_cG_),x);
          return [0,caml_call3(sprintf(_bC_),msg,s$0,s)]}
        return 0});
    unix_inet_addr_of_string(_cH_);
    unix_inet_addr_of_string(_cI_);
    try
     {unix_inet_addr_of_string(_i7_)}
    catch(_kQ_)
     {_kQ_ = caml_wrap_exception(_kQ_);if(_kQ_[1] !== Failure)throw _kQ_}
    try
     {unix_inet_addr_of_string(_i6_)}
    catch(_kP_)
     {_kP_ = caml_wrap_exception(_kP_);if(_kP_[1] !== Failure)throw _kP_}
    create(0,7);
    var
     cue_ball=[0,0,_cO_,_cN_,_cM_,_cL_,-100,_cK_,_cJ_,10],
     one_ball=[0,1,_cU_,_cT_,_cS_,_cR_,100,_cQ_,_cP_,10],
     two_ball=[0,2,_c0_,_cZ_,_cY_,_cX_,100,_cW_,_cV_,10],
     three_ball=[0,3,_c6_,_c5_,_c4_,_c3_,100,_c2_,_c1_,10],
     four_ball=[0,4,_da_,_c$_,_c__,_c9_,100,_c8_,_c7_,10],
     five_ball=[0,5,_dg_,_df_,_de_,_dd_,100,_dc_,_db_,10],
     six_ball=[0,6,_dm_,_dl_,_dk_,_dj_,100,_di_,_dh_,10],
     seven_ball=[0,7,_ds_,_dr_,_dq_,_dp_,100,_do_,_dn_,10],
     eight_ball=[0,8,_dy_,_dx_,_dw_,_dv_,100,_du_,_dt_,10],
     nine_ball=[0,9,_dE_,_dD_,_dC_,_dB_,100,_dA_,_dz_,10],
     ten_ball=[0,10,_dK_,_dJ_,_dI_,_dH_,100,_dG_,_dF_,10],
     eleven_ball=[0,11,_dQ_,_dP_,_dO_,_dN_,100,_dM_,_dL_,10],
     twelve_ball=[0,12,_dW_,_dV_,_dU_,_dT_,100,_dS_,_dR_,10],
     thirteen_ball=[0,13,_d2_,_d1_,_d0_,_dZ_,100,_dY_,_dX_,10],
     fourteen_ball=[0,14,_d8_,_d7_,_d6_,_d5_,100,_d4_,_d3_,10],
     fifteen_ball=[0,15,_ec_,_eb_,_ea_,_d$_,100,_d__,_d9_,10],
     command=[0,0,0,0,0,0,0,0,0,0,_ed_,0,0,0,0],
     player1=
      [0,
       [0,
        one_ball,
        [0,
         two_ball,
         [0,
          three_ball,
          [0,four_ball,[0,five_ball,[0,six_ball,[0,seven_ball,0]]]]]]],
       [0,
        one_ball,
        [0,
         two_ball,
         [0,
          three_ball,
          [0,four_ball,[0,five_ball,[0,six_ball,[0,seven_ball,0]]]]]]],
       _ee_,
       1,
       0,
       0,
       0],
     player2=
      [0,
       [0,
        nine_ball,
        [0,
         ten_ball,
         [0,
          eleven_ball,
          [0,
           twelve_ball,
           [0,thirteen_ball,[0,fourteen_ball,[0,fifteen_ball,0]]]]]]],
       [0,
        nine_ball,
        [0,
         ten_ball,
         [0,
          eleven_ball,
          [0,
           twelve_ball,
           [0,thirteen_ball,[0,fourteen_ball,[0,fifteen_ball,0]]]]]]],
       _ef_,
       0,
       0,
       0,
       0];
    function get_ball_img(suit,billiard,velocity,counter,egg)
     {if(0 === egg)
       {if
         (!(Math.sqrt(Math.pow(velocity[1],2) + Math.pow(velocity[2],2))
           <=
           50))
         if(5 <= (counter % 20 | 0))
          {if(Math.abs(velocity[1]) <= Math.abs(velocity[2]))
            if(4 < (counter % 20 | 0))
             if(!(10 <= (counter % 20 | 0)))
              if
               (50
                <
                Math.sqrt(Math.pow(velocity[1],2))
                +
                Math.pow(velocity[2],2))
               {var _kO_=billiard[1];
                if(15 < _kO_ >>> 0)return failwith(_hm_);
                switch(_kO_)
                 {case 0:
                   return [0,
                           billiard[1],
                           billiard[2],
                           billiard[3],
                           billiard[4],
                           billiard[5],
                           billiard[6],
                           [0,img,_ho_,_hn_],
                           billiard[8],
                           billiard[9]];
                  case 1:
                   return [0,
                           billiard[1],
                           billiard[2],
                           billiard[3],
                           billiard[4],
                           billiard[5],
                           billiard[6],
                           [0,img,_hq_,_hp_],
                           billiard[8],
                           billiard[9]];
                  case 2:
                   return [0,
                           billiard[1],
                           billiard[2],
                           billiard[3],
                           billiard[4],
                           billiard[5],
                           billiard[6],
                           [0,img,_hs_,_hr_],
                           billiard[8],
                           billiard[9]];
                  case 3:
                   return [0,
                           billiard[1],
                           billiard[2],
                           billiard[3],
                           billiard[4],
                           billiard[5],
                           billiard[6],
                           [0,img,_hu_,_ht_],
                           billiard[8],
                           billiard[9]];
                  case 4:
                   return [0,
                           billiard[1],
                           billiard[2],
                           billiard[3],
                           billiard[4],
                           billiard[5],
                           billiard[6],
                           [0,img,_hw_,_hv_],
                           billiard[8],
                           billiard[9]];
                  case 5:
                   return [0,
                           billiard[1],
                           billiard[2],
                           billiard[3],
                           billiard[4],
                           billiard[5],
                           billiard[6],
                           [0,img,_hy_,_hx_],
                           billiard[8],
                           billiard[9]];
                  case 6:
                   return [0,
                           billiard[1],
                           billiard[2],
                           billiard[3],
                           billiard[4],
                           billiard[5],
                           billiard[6],
                           [0,img,_hA_,_hz_],
                           billiard[8],
                           billiard[9]];
                  case 7:
                   return [0,
                           billiard[1],
                           billiard[2],
                           billiard[3],
                           billiard[4],
                           billiard[5],
                           billiard[6],
                           [0,img,_hC_,_hB_],
                           billiard[8],
                           billiard[9]];
                  case 8:
                   return [0,
                           billiard[1],
                           billiard[2],
                           billiard[3],
                           billiard[4],
                           billiard[5],
                           billiard[6],
                           [0,img,_hE_,_hD_],
                           billiard[8],
                           billiard[9]];
                  case 9:
                   return [0,
                           billiard[1],
                           billiard[2],
                           billiard[3],
                           billiard[4],
                           billiard[5],
                           billiard[6],
                           [0,img,_hG_,_hF_],
                           billiard[8],
                           billiard[9]];
                  case 10:
                   return [0,
                           billiard[1],
                           billiard[2],
                           billiard[3],
                           billiard[4],
                           billiard[5],
                           billiard[6],
                           [0,img,_hI_,_hH_],
                           billiard[8],
                           billiard[9]];
                  case 11:
                   return [0,
                           billiard[1],
                           billiard[2],
                           billiard[3],
                           billiard[4],
                           billiard[5],
                           billiard[6],
                           [0,img,_hK_,_hJ_],
                           billiard[8],
                           billiard[9]];
                  case 12:
                   return [0,
                           billiard[1],
                           billiard[2],
                           billiard[3],
                           billiard[4],
                           billiard[5],
                           billiard[6],
                           [0,img,_hM_,_hL_],
                           billiard[8],
                           billiard[9]];
                  case 13:
                   return [0,
                           billiard[1],
                           billiard[2],
                           billiard[3],
                           billiard[4],
                           billiard[5],
                           billiard[6],
                           [0,img,_hO_,_hN_],
                           billiard[8],
                           billiard[9]];
                  case 14:
                   return [0,
                           billiard[1],
                           billiard[2],
                           billiard[3],
                           billiard[4],
                           billiard[5],
                           billiard[6],
                           [0,img,_hQ_,_hP_],
                           billiard[8],
                           billiard[9]];
                  default:
                   return [0,
                           billiard[1],
                           billiard[2],
                           billiard[3],
                           billiard[4],
                           billiard[5],
                           billiard[6],
                           [0,img,_hS_,_hR_],
                           billiard[8],
                           billiard[9]]}}
           if(Math.abs(velocity[1]) <= Math.abs(velocity[2]))
            if(14 < (counter % 20 | 0))
             if(!(20 <= (counter % 20 | 0)))
              if
               (50
                <
                Math.sqrt(Math.pow(velocity[1],2))
                +
                Math.pow(velocity[2],2))
               {var _kN_=billiard[1];
                if(15 < _kN_ >>> 0)return failwith(_gR_);
                switch(_kN_)
                 {case 0:
                   return [0,
                           billiard[1],
                           billiard[2],
                           billiard[3],
                           billiard[4],
                           billiard[5],
                           billiard[6],
                           [0,img,_gT_,_gS_],
                           billiard[8],
                           billiard[9]];
                  case 1:
                   return [0,
                           billiard[1],
                           billiard[2],
                           billiard[3],
                           billiard[4],
                           billiard[5],
                           billiard[6],
                           [0,img,_gV_,_gU_],
                           billiard[8],
                           billiard[9]];
                  case 2:
                   return [0,
                           billiard[1],
                           billiard[2],
                           billiard[3],
                           billiard[4],
                           billiard[5],
                           billiard[6],
                           [0,img,_gX_,_gW_],
                           billiard[8],
                           billiard[9]];
                  case 3:
                   return [0,
                           billiard[1],
                           billiard[2],
                           billiard[3],
                           billiard[4],
                           billiard[5],
                           billiard[6],
                           [0,img,_gZ_,_gY_],
                           billiard[8],
                           billiard[9]];
                  case 4:
                   return [0,
                           billiard[1],
                           billiard[2],
                           billiard[3],
                           billiard[4],
                           billiard[5],
                           billiard[6],
                           [0,img,_g1_,_g0_],
                           billiard[8],
                           billiard[9]];
                  case 5:
                   return [0,
                           billiard[1],
                           billiard[2],
                           billiard[3],
                           billiard[4],
                           billiard[5],
                           billiard[6],
                           [0,img,_g3_,_g2_],
                           billiard[8],
                           billiard[9]];
                  case 6:
                   return [0,
                           billiard[1],
                           billiard[2],
                           billiard[3],
                           billiard[4],
                           billiard[5],
                           billiard[6],
                           [0,img,_g5_,_g4_],
                           billiard[8],
                           billiard[9]];
                  case 7:
                   return [0,
                           billiard[1],
                           billiard[2],
                           billiard[3],
                           billiard[4],
                           billiard[5],
                           billiard[6],
                           [0,img,_g7_,_g6_],
                           billiard[8],
                           billiard[9]];
                  case 8:
                   return [0,
                           billiard[1],
                           billiard[2],
                           billiard[3],
                           billiard[4],
                           billiard[5],
                           billiard[6],
                           [0,img,_g9_,_g8_],
                           billiard[8],
                           billiard[9]];
                  case 9:
                   return [0,
                           billiard[1],
                           billiard[2],
                           billiard[3],
                           billiard[4],
                           billiard[5],
                           billiard[6],
                           [0,img,_g$_,_g__],
                           billiard[8],
                           billiard[9]];
                  case 10:
                   return [0,
                           billiard[1],
                           billiard[2],
                           billiard[3],
                           billiard[4],
                           billiard[5],
                           billiard[6],
                           [0,img,_hb_,_ha_],
                           billiard[8],
                           billiard[9]];
                  case 11:
                   return [0,
                           billiard[1],
                           billiard[2],
                           billiard[3],
                           billiard[4],
                           billiard[5],
                           billiard[6],
                           [0,img,_hd_,_hc_],
                           billiard[8],
                           billiard[9]];
                  case 12:
                   return [0,
                           billiard[1],
                           billiard[2],
                           billiard[3],
                           billiard[4],
                           billiard[5],
                           billiard[6],
                           [0,img,_hf_,_he_],
                           billiard[8],
                           billiard[9]];
                  case 13:
                   return [0,
                           billiard[1],
                           billiard[2],
                           billiard[3],
                           billiard[4],
                           billiard[5],
                           billiard[6],
                           [0,img,_hh_,_hg_],
                           billiard[8],
                           billiard[9]];
                  case 14:
                   return [0,
                           billiard[1],
                           billiard[2],
                           billiard[3],
                           billiard[4],
                           billiard[5],
                           billiard[6],
                           [0,img,_hj_,_hi_],
                           billiard[8],
                           billiard[9]];
                  default:
                   return [0,
                           billiard[1],
                           billiard[2],
                           billiard[3],
                           billiard[4],
                           billiard[5],
                           billiard[6],
                           [0,img,_hl_,_hk_],
                           billiard[8],
                           billiard[9]]}}
           if(Math.abs(velocity[2]) < Math.abs(velocity[1]))
            if(4 < (counter % 20 | 0))
             if(!(10 <= (counter % 20 | 0)))
              if
               (50
                <
                Math.sqrt(Math.pow(velocity[1],2))
                +
                Math.pow(velocity[2],2))
               {var _kM_=billiard[1];
                if(15 < _kM_ >>> 0)return failwith(_gk_);
                switch(_kM_)
                 {case 0:
                   return [0,
                           billiard[1],
                           billiard[2],
                           billiard[3],
                           billiard[4],
                           billiard[5],
                           billiard[6],
                           [0,img,_gm_,_gl_],
                           billiard[8],
                           billiard[9]];
                  case 1:
                   return [0,
                           billiard[1],
                           billiard[2],
                           billiard[3],
                           billiard[4],
                           billiard[5],
                           billiard[6],
                           [0,img,_go_,_gn_],
                           billiard[8],
                           billiard[9]];
                  case 2:
                   return [0,
                           billiard[1],
                           billiard[2],
                           billiard[3],
                           billiard[4],
                           billiard[5],
                           billiard[6],
                           [0,img,_gq_,_gp_],
                           billiard[8],
                           billiard[9]];
                  case 3:
                   return [0,
                           billiard[1],
                           billiard[2],
                           billiard[3],
                           billiard[4],
                           billiard[5],
                           billiard[6],
                           [0,img,_gs_,_gr_],
                           billiard[8],
                           billiard[9]];
                  case 4:
                   return [0,
                           billiard[1],
                           billiard[2],
                           billiard[3],
                           billiard[4],
                           billiard[5],
                           billiard[6],
                           [0,img,_gu_,_gt_],
                           billiard[8],
                           billiard[9]];
                  case 5:
                   return [0,
                           billiard[1],
                           billiard[2],
                           billiard[3],
                           billiard[4],
                           billiard[5],
                           billiard[6],
                           [0,img,_gw_,_gv_],
                           billiard[8],
                           billiard[9]];
                  case 6:
                   return [0,
                           billiard[1],
                           billiard[2],
                           billiard[3],
                           billiard[4],
                           billiard[5],
                           billiard[6],
                           [0,img,_gy_,_gx_],
                           billiard[8],
                           billiard[9]];
                  case 7:
                   return [0,
                           billiard[1],
                           billiard[2],
                           billiard[3],
                           billiard[4],
                           billiard[5],
                           billiard[6],
                           [0,img,_gA_,_gz_],
                           billiard[8],
                           billiard[9]];
                  case 8:
                   return [0,
                           billiard[1],
                           billiard[2],
                           billiard[3],
                           billiard[4],
                           billiard[5],
                           billiard[6],
                           [0,img,_gC_,_gB_],
                           billiard[8],
                           billiard[9]];
                  case 9:
                   return [0,
                           billiard[1],
                           billiard[2],
                           billiard[3],
                           billiard[4],
                           billiard[5],
                           billiard[6],
                           [0,img,_gE_,_gD_],
                           billiard[8],
                           billiard[9]];
                  case 10:
                   return [0,
                           billiard[1],
                           billiard[2],
                           billiard[3],
                           billiard[4],
                           billiard[5],
                           billiard[6],
                           [0,img,_gG_,_gF_],
                           billiard[8],
                           billiard[9]];
                  case 11:
                   return [0,
                           billiard[1],
                           billiard[2],
                           billiard[3],
                           billiard[4],
                           billiard[5],
                           billiard[6],
                           [0,img,_gI_,_gH_],
                           billiard[8],
                           billiard[9]];
                  case 12:
                   return [0,
                           billiard[1],
                           billiard[2],
                           billiard[3],
                           billiard[4],
                           billiard[5],
                           billiard[6],
                           [0,img,_gK_,_gJ_],
                           billiard[8],
                           billiard[9]];
                  case 13:
                   return [0,
                           billiard[1],
                           billiard[2],
                           billiard[3],
                           billiard[4],
                           billiard[5],
                           billiard[6],
                           [0,img,_gM_,_gL_],
                           billiard[8],
                           billiard[9]];
                  case 14:
                   return [0,
                           billiard[1],
                           billiard[2],
                           billiard[3],
                           billiard[4],
                           billiard[5],
                           billiard[6],
                           [0,img,_gO_,_gN_],
                           billiard[8],
                           billiard[9]];
                  default:
                   return [0,
                           billiard[1],
                           billiard[2],
                           billiard[3],
                           billiard[4],
                           billiard[5],
                           billiard[6],
                           [0,img,_gQ_,_gP_],
                           billiard[8],
                           billiard[9]]}}
           if(Math.abs(velocity[2]) < Math.abs(velocity[1]))
            if(14 < (counter % 20 | 0))
             if(!(20 <= (counter % 20 | 0)))
              if
               (50
                <
                Math.sqrt(Math.pow(velocity[1],2))
                +
                Math.pow(velocity[2],2))
               {var _kL_=billiard[1];
                if(15 < _kL_ >>> 0)return failwith(_fP_);
                switch(_kL_)
                 {case 0:
                   return [0,
                           billiard[1],
                           billiard[2],
                           billiard[3],
                           billiard[4],
                           billiard[5],
                           billiard[6],
                           [0,img,_fR_,_fQ_],
                           billiard[8],
                           billiard[9]];
                  case 1:
                   return [0,
                           billiard[1],
                           billiard[2],
                           billiard[3],
                           billiard[4],
                           billiard[5],
                           billiard[6],
                           [0,img,_fT_,_fS_],
                           billiard[8],
                           billiard[9]];
                  case 2:
                   return [0,
                           billiard[1],
                           billiard[2],
                           billiard[3],
                           billiard[4],
                           billiard[5],
                           billiard[6],
                           [0,img,_fV_,_fU_],
                           billiard[8],
                           billiard[9]];
                  case 3:
                   return [0,
                           billiard[1],
                           billiard[2],
                           billiard[3],
                           billiard[4],
                           billiard[5],
                           billiard[6],
                           [0,img,_fX_,_fW_],
                           billiard[8],
                           billiard[9]];
                  case 4:
                   return [0,
                           billiard[1],
                           billiard[2],
                           billiard[3],
                           billiard[4],
                           billiard[5],
                           billiard[6],
                           [0,img,_fZ_,_fY_],
                           billiard[8],
                           billiard[9]];
                  case 5:
                   return [0,
                           billiard[1],
                           billiard[2],
                           billiard[3],
                           billiard[4],
                           billiard[5],
                           billiard[6],
                           [0,img,_f1_,_f0_],
                           billiard[8],
                           billiard[9]];
                  case 6:
                   return [0,
                           billiard[1],
                           billiard[2],
                           billiard[3],
                           billiard[4],
                           billiard[5],
                           billiard[6],
                           [0,img,_f3_,_f2_],
                           billiard[8],
                           billiard[9]];
                  case 7:
                   return [0,
                           billiard[1],
                           billiard[2],
                           billiard[3],
                           billiard[4],
                           billiard[5],
                           billiard[6],
                           [0,img,_f5_,_f4_],
                           billiard[8],
                           billiard[9]];
                  case 8:
                   return [0,
                           billiard[1],
                           billiard[2],
                           billiard[3],
                           billiard[4],
                           billiard[5],
                           billiard[6],
                           [0,img,_f7_,_f6_],
                           billiard[8],
                           billiard[9]];
                  case 9:
                   return [0,
                           billiard[1],
                           billiard[2],
                           billiard[3],
                           billiard[4],
                           billiard[5],
                           billiard[6],
                           [0,img,_f9_,_f8_],
                           billiard[8],
                           billiard[9]];
                  case 10:
                   return [0,
                           billiard[1],
                           billiard[2],
                           billiard[3],
                           billiard[4],
                           billiard[5],
                           billiard[6],
                           [0,img,_f$_,_f__],
                           billiard[8],
                           billiard[9]];
                  case 11:
                   return [0,
                           billiard[1],
                           billiard[2],
                           billiard[3],
                           billiard[4],
                           billiard[5],
                           billiard[6],
                           [0,img,_gb_,_ga_],
                           billiard[8],
                           billiard[9]];
                  case 12:
                   return [0,
                           billiard[1],
                           billiard[2],
                           billiard[3],
                           billiard[4],
                           billiard[5],
                           billiard[6],
                           [0,img,_gd_,_gc_],
                           billiard[8],
                           billiard[9]];
                  case 13:
                   return [0,
                           billiard[1],
                           billiard[2],
                           billiard[3],
                           billiard[4],
                           billiard[5],
                           billiard[6],
                           [0,img,_gf_,_ge_],
                           billiard[8],
                           billiard[9]];
                  case 14:
                   return [0,
                           billiard[1],
                           billiard[2],
                           billiard[3],
                           billiard[4],
                           billiard[5],
                           billiard[6],
                           [0,img,_gh_,_gg_],
                           billiard[8],
                           billiard[9]];
                  default:
                   return [0,
                           billiard[1],
                           billiard[2],
                           billiard[3],
                           billiard[4],
                           billiard[5],
                           billiard[6],
                           [0,img,_gj_,_gi_],
                           billiard[8],
                           billiard[9]]}}
           if(9 < (counter % 20 | 0))
            if(!(15 <= (counter % 20 | 0)))
             if
              (50
               <
               Math.sqrt(Math.pow(velocity[1],2))
               +
               Math.pow(velocity[2],2))
              {var _kK_=billiard[1];
               if(15 < _kK_ >>> 0)return failwith(_fi_);
               switch(_kK_)
                {case 0:
                  return [0,
                          billiard[1],
                          billiard[2],
                          billiard[3],
                          billiard[4],
                          billiard[5],
                          billiard[6],
                          [0,img,_fk_,_fj_],
                          billiard[8],
                          billiard[9]];
                 case 1:
                  return [0,
                          billiard[1],
                          billiard[2],
                          billiard[3],
                          billiard[4],
                          billiard[5],
                          billiard[6],
                          [0,img,_fm_,_fl_],
                          billiard[8],
                          billiard[9]];
                 case 2:
                  return [0,
                          billiard[1],
                          billiard[2],
                          billiard[3],
                          billiard[4],
                          billiard[5],
                          billiard[6],
                          [0,img,_fo_,_fn_],
                          billiard[8],
                          billiard[9]];
                 case 3:
                  return [0,
                          billiard[1],
                          billiard[2],
                          billiard[3],
                          billiard[4],
                          billiard[5],
                          billiard[6],
                          [0,img,_fq_,_fp_],
                          billiard[8],
                          billiard[9]];
                 case 4:
                  return [0,
                          billiard[1],
                          billiard[2],
                          billiard[3],
                          billiard[4],
                          billiard[5],
                          billiard[6],
                          [0,img,_fs_,_fr_],
                          billiard[8],
                          billiard[9]];
                 case 5:
                  return [0,
                          billiard[1],
                          billiard[2],
                          billiard[3],
                          billiard[4],
                          billiard[5],
                          billiard[6],
                          [0,img,_fu_,_ft_],
                          billiard[8],
                          billiard[9]];
                 case 6:
                  return [0,
                          billiard[1],
                          billiard[2],
                          billiard[3],
                          billiard[4],
                          billiard[5],
                          billiard[6],
                          [0,img,_fw_,_fv_],
                          billiard[8],
                          billiard[9]];
                 case 7:
                  return [0,
                          billiard[1],
                          billiard[2],
                          billiard[3],
                          billiard[4],
                          billiard[5],
                          billiard[6],
                          [0,img,_fy_,_fx_],
                          billiard[8],
                          billiard[9]];
                 case 8:
                  return [0,
                          billiard[1],
                          billiard[2],
                          billiard[3],
                          billiard[4],
                          billiard[5],
                          billiard[6],
                          [0,img,_fA_,_fz_],
                          billiard[8],
                          billiard[9]];
                 case 9:
                  return [0,
                          billiard[1],
                          billiard[2],
                          billiard[3],
                          billiard[4],
                          billiard[5],
                          billiard[6],
                          [0,img,_fC_,_fB_],
                          billiard[8],
                          billiard[9]];
                 case 10:
                  return [0,
                          billiard[1],
                          billiard[2],
                          billiard[3],
                          billiard[4],
                          billiard[5],
                          billiard[6],
                          [0,img,_fE_,_fD_],
                          billiard[8],
                          billiard[9]];
                 case 11:
                  return [0,
                          billiard[1],
                          billiard[2],
                          billiard[3],
                          billiard[4],
                          billiard[5],
                          billiard[6],
                          [0,img,_fG_,_fF_],
                          billiard[8],
                          billiard[9]];
                 case 12:
                  return [0,
                          billiard[1],
                          billiard[2],
                          billiard[3],
                          billiard[4],
                          billiard[5],
                          billiard[6],
                          [0,img,_fI_,_fH_],
                          billiard[8],
                          billiard[9]];
                 case 13:
                  return [0,
                          billiard[1],
                          billiard[2],
                          billiard[3],
                          billiard[4],
                          billiard[5],
                          billiard[6],
                          [0,img,_fK_,_fJ_],
                          billiard[8],
                          billiard[9]];
                 case 14:
                  return [0,
                          billiard[1],
                          billiard[2],
                          billiard[3],
                          billiard[4],
                          billiard[5],
                          billiard[6],
                          [0,img,_fM_,_fL_],
                          billiard[8],
                          billiard[9]];
                 default:
                  return [0,
                          billiard[1],
                          billiard[2],
                          billiard[3],
                          billiard[4],
                          billiard[5],
                          billiard[6],
                          [0,img,_fO_,_fN_],
                          billiard[8],
                          billiard[9]]}}
           var _kJ_=billiard[1];
           if(15 < _kJ_ >>> 0)return failwith(_eN_);
           switch(_kJ_)
            {case 0:
              return [0,
                      billiard[1],
                      billiard[2],
                      billiard[3],
                      billiard[4],
                      billiard[5],
                      billiard[6],
                      [0,img,_eP_,_eO_],
                      billiard[8],
                      billiard[9]];
             case 1:
              return [0,
                      billiard[1],
                      billiard[2],
                      billiard[3],
                      billiard[4],
                      billiard[5],
                      billiard[6],
                      [0,img,_eR_,_eQ_],
                      billiard[8],
                      billiard[9]];
             case 2:
              return [0,
                      billiard[1],
                      billiard[2],
                      billiard[3],
                      billiard[4],
                      billiard[5],
                      billiard[6],
                      [0,img,_eT_,_eS_],
                      billiard[8],
                      billiard[9]];
             case 3:
              return [0,
                      billiard[1],
                      billiard[2],
                      billiard[3],
                      billiard[4],
                      billiard[5],
                      billiard[6],
                      [0,img,_eV_,_eU_],
                      billiard[8],
                      billiard[9]];
             case 4:
              return [0,
                      billiard[1],
                      billiard[2],
                      billiard[3],
                      billiard[4],
                      billiard[5],
                      billiard[6],
                      [0,img,_eX_,_eW_],
                      billiard[8],
                      billiard[9]];
             case 5:
              return [0,
                      billiard[1],
                      billiard[2],
                      billiard[3],
                      billiard[4],
                      billiard[5],
                      billiard[6],
                      [0,img,_eZ_,_eY_],
                      billiard[8],
                      billiard[9]];
             case 6:
              return [0,
                      billiard[1],
                      billiard[2],
                      billiard[3],
                      billiard[4],
                      billiard[5],
                      billiard[6],
                      [0,img,_e1_,_e0_],
                      billiard[8],
                      billiard[9]];
             case 7:
              return [0,
                      billiard[1],
                      billiard[2],
                      billiard[3],
                      billiard[4],
                      billiard[5],
                      billiard[6],
                      [0,img,_e3_,_e2_],
                      billiard[8],
                      billiard[9]];
             case 8:
              return [0,
                      billiard[1],
                      billiard[2],
                      billiard[3],
                      billiard[4],
                      billiard[5],
                      billiard[6],
                      [0,img,_e5_,_e4_],
                      billiard[8],
                      billiard[9]];
             case 9:
              return [0,
                      billiard[1],
                      billiard[2],
                      billiard[3],
                      billiard[4],
                      billiard[5],
                      billiard[6],
                      [0,img,_e7_,_e6_],
                      billiard[8],
                      billiard[9]];
             case 10:
              return [0,
                      billiard[1],
                      billiard[2],
                      billiard[3],
                      billiard[4],
                      billiard[5],
                      billiard[6],
                      [0,img,_e9_,_e8_],
                      billiard[8],
                      billiard[9]];
             case 11:
              return [0,
                      billiard[1],
                      billiard[2],
                      billiard[3],
                      billiard[4],
                      billiard[5],
                      billiard[6],
                      [0,img,_e$_,_e__],
                      billiard[8],
                      billiard[9]];
             case 12:
              return [0,
                      billiard[1],
                      billiard[2],
                      billiard[3],
                      billiard[4],
                      billiard[5],
                      billiard[6],
                      [0,img,_fb_,_fa_],
                      billiard[8],
                      billiard[9]];
             case 13:
              return [0,
                      billiard[1],
                      billiard[2],
                      billiard[3],
                      billiard[4],
                      billiard[5],
                      billiard[6],
                      [0,img,_fd_,_fc_],
                      billiard[8],
                      billiard[9]];
             case 14:
              return [0,
                      billiard[1],
                      billiard[2],
                      billiard[3],
                      billiard[4],
                      billiard[5],
                      billiard[6],
                      [0,img,_ff_,_fe_],
                      billiard[8],
                      billiard[9]];
             default:
              return [0,
                      billiard[1],
                      billiard[2],
                      billiard[3],
                      billiard[4],
                      billiard[5],
                      billiard[6],
                      [0,img,_fh_,_fg_],
                      billiard[8],
                      billiard[9]]}}
        var _kI_=billiard[1];
        if(15 < _kI_ >>> 0)return failwith(_eg_);
        switch(_kI_)
         {case 0:
           return [0,
                   billiard[1],
                   billiard[2],
                   billiard[3],
                   billiard[4],
                   billiard[5],
                   billiard[6],
                   [0,img,_ei_,_eh_],
                   billiard[8],
                   billiard[9]];
          case 1:
           return [0,
                   billiard[1],
                   billiard[2],
                   billiard[3],
                   billiard[4],
                   billiard[5],
                   billiard[6],
                   [0,img,_ek_,_ej_],
                   billiard[8],
                   billiard[9]];
          case 2:
           return [0,
                   billiard[1],
                   billiard[2],
                   billiard[3],
                   billiard[4],
                   billiard[5],
                   billiard[6],
                   [0,img,_em_,_el_],
                   billiard[8],
                   billiard[9]];
          case 3:
           return [0,
                   billiard[1],
                   billiard[2],
                   billiard[3],
                   billiard[4],
                   billiard[5],
                   billiard[6],
                   [0,img,_eo_,_en_],
                   billiard[8],
                   billiard[9]];
          case 4:
           return [0,
                   billiard[1],
                   billiard[2],
                   billiard[3],
                   billiard[4],
                   billiard[5],
                   billiard[6],
                   [0,img,_eq_,_ep_],
                   billiard[8],
                   billiard[9]];
          case 5:
           return [0,
                   billiard[1],
                   billiard[2],
                   billiard[3],
                   billiard[4],
                   billiard[5],
                   billiard[6],
                   [0,img,_es_,_er_],
                   billiard[8],
                   billiard[9]];
          case 6:
           return [0,
                   billiard[1],
                   billiard[2],
                   billiard[3],
                   billiard[4],
                   billiard[5],
                   billiard[6],
                   [0,img,_eu_,_et_],
                   billiard[8],
                   billiard[9]];
          case 7:
           return [0,
                   billiard[1],
                   billiard[2],
                   billiard[3],
                   billiard[4],
                   billiard[5],
                   billiard[6],
                   [0,img,_ew_,_ev_],
                   billiard[8],
                   billiard[9]];
          case 8:
           return [0,
                   billiard[1],
                   billiard[2],
                   billiard[3],
                   billiard[4],
                   billiard[5],
                   billiard[6],
                   [0,img,_ey_,_ex_],
                   billiard[8],
                   billiard[9]];
          case 9:
           return [0,
                   billiard[1],
                   billiard[2],
                   billiard[3],
                   billiard[4],
                   billiard[5],
                   billiard[6],
                   [0,img,_eA_,_ez_],
                   billiard[8],
                   billiard[9]];
          case 10:
           return [0,
                   billiard[1],
                   billiard[2],
                   billiard[3],
                   billiard[4],
                   billiard[5],
                   billiard[6],
                   [0,img,_eC_,_eB_],
                   billiard[8],
                   billiard[9]];
          case 11:
           return [0,
                   billiard[1],
                   billiard[2],
                   billiard[3],
                   billiard[4],
                   billiard[5],
                   billiard[6],
                   [0,img,_eE_,_eD_],
                   billiard[8],
                   billiard[9]];
          case 12:
           return [0,
                   billiard[1],
                   billiard[2],
                   billiard[3],
                   billiard[4],
                   billiard[5],
                   billiard[6],
                   [0,img,_eG_,_eF_],
                   billiard[8],
                   billiard[9]];
          case 13:
           return [0,
                   billiard[1],
                   billiard[2],
                   billiard[3],
                   billiard[4],
                   billiard[5],
                   billiard[6],
                   [0,img,_eI_,_eH_],
                   billiard[8],
                   billiard[9]];
          case 14:
           return [0,
                   billiard[1],
                   billiard[2],
                   billiard[3],
                   billiard[4],
                   billiard[5],
                   billiard[6],
                   [0,img,_eK_,_eJ_],
                   billiard[8],
                   billiard[9]];
          default:
           return [0,
                   billiard[1],
                   billiard[2],
                   billiard[3],
                   billiard[4],
                   billiard[5],
                   billiard[6],
                   [0,img,_eM_,_eL_],
                   billiard[8],
                   billiard[9]]}}
      return 8 === billiard[1]
              ?[0,
                billiard[1],
                billiard[2],
                billiard[3],
                billiard[4],
                billiard[5],
                billiard[6],
                [0,img$0,_hU_,_hT_],
                billiard[8],
                billiard[9]]
              :[0,
                billiard[1],
                billiard[2],
                billiard[3],
                billiard[4],
                billiard[5],
                billiard[6],
                [0,img$1,_hW_,_hV_],
                billiard[8],
                billiard[9]]}
    function draw_image(context,img_src,coord)
     {var img=createImg(doc);
      img.src = img_src;
      return context.drawImage(img,coord[1],coord[2])}
    function draw_help(context,b,param)
     {var
       y=param[2],
       x=param[1],
       img=createImg(doc),
       match=b[7][3],
       sy=match[2],
       sx=match[1],
       match$0=b[7][2],
       sh=match$0[2],
       sw=match$0[1];
      img.src = b[7][1].toString();
      return context.drawImage(img,sx,sy,sw,sh,x,y,sw,sh)}
    function draw_stat(context,player,p,on_board,egg)
     {var legal_eight=mem(eight_ball,player[1]),_kH_=player[1];
      map
       (function(b)
         {var s=b[1];
          if(mem(b,on_board))
           {var p$0=p - 1 | 0;
            if(0 !== s)
             if(0 <= s)
              if(!(15 < s))
               {if(8 === s)
                 if(legal_eight)
                  return egg
                          ?draw_image
                            (context,"media/gries.png",[0,366 + p$0 * 613,59])
                          :draw_help(context,eight_ball,[0,366 + p$0 * 613,59]);
                var
                 legal_s=s % 8 | 0,
                 x=
                  (231 + (((legal_s - 1 | 0) % 4 | 0) * 45 | 0) | 0)
                  +
                  ((p$0 | 0) * 613 | 0)
                  |
                  0,
                 y=(((legal_s - 1 | 0) / 4 | 0) * 37 | 0) + 22 | 0,
                 choose_b=get_ball_img(s,b,_hZ_,0,egg);
                return draw_help(context,choose_b,[0,x,y])}
            return draw_help(context,b,_hY_)}
          return draw_image(context,"media/blank.png",_h0_)},
        _kH_);
      return 0}
    function draw_debug(context,str,y)
     {var text=str.toString();
      context.font = "10px  ";
      return context.fillText(text,1240,y)}
    function draw_rotated2(context,degrees,img,bx,by,gap)
     {context.save();
      context.translate(bx,by);
      context.rotate(degrees * 3.1416926 / 180);
      draw_image(context,img.toString(),[0,gap,-6]);
      draw_image(context,"media/fokn_laser_sight.png",_h3_);
      return context.restore()}
    var
     bottom_bd=175 + playing_field[1] - 30,
     right_bd=175 + playing_field[2] - 30,
     top_bd=175,
     left_bd=175;
    function distance_between(position1,position2)
     {var x1=position1[1],y1=position1[2],x2=position2[1],y2=position2[2];
      return Math.sqrt
              (Math.abs(x1 - x2)
               *
               Math.abs(x1 - x2)
               +
               Math.abs(y1 - y2)
               *
               Math.abs(y1 - y2))}
    function closest_billiard(cue_position,billiards,min_vector)
     {var billiards$0=billiards,min_vector$0=min_vector;
      for(;;)
       {if(billiards$0)
         {var
           xs=billiards$0[2],
           x=billiards$0[1],
           distance=distance_between(x[5],cue_position),
           min_dist=
            Math.sqrt
             (min_vector$0[1]
              *
              min_vector$0[1]
              +
              min_vector$0[2]
              *
              min_vector$0[2]);
          if(distance < min_dist)
           if(0 !== x[1])
            {var
              min_vector$1=
               [0,x[5][1] - cue_position[1],x[5][2] - cue_position[2]],
              billiards$0=xs,
              min_vector$0=min_vector$1;
             continue}
          var billiards$0=xs;
          continue}
        return min_vector$0}}
    function min_distance_to_pocket(position)
     {var
       distance1=distance_between(position,[0,left_bd,top_bd]),
       distance2=distance_between(position,[0,left_bd,bottom_bd]),
       distance3=distance_between(position,[0,(175 + right_bd) / 2,top_bd]),
       distance4=distance_between(position,[0,(175 + right_bd) / 2,bottom_bd]),
       distance5=distance_between(position,[0,right_bd,top_bd]),
       distance6=distance_between(position,[0,right_bd,bottom_bd]);
      function find_min(acc,b){return b < acc?b:acc}
      return fold_left
              (find_min,
               3e3,
               [0,
                distance1,
                [0,
                 distance2,
                 [0,distance3,[0,distance4,[0,distance5,[0,distance6,0]]]]]])}
    function billiard_between(position1,position2,billiard_list)
     {var
       x1=position1[1],
       y1=position1[2],
       x2=position2[1],
       y2=position2[2],
       m=(y2 - y1) / (x2 - x1),
       b=y1 - m * x1,
       billiard_list$0=billiard_list;
      for(;;)
       {if(billiard_list$0)
         {var xs=billiard_list$0[2],x=billiard_list$0[1];
          if(!caml_equal(x[5],position1))
           if(!caml_equal(x[5],position2))
            {var
              b_x=x[5][1],
              b_y=x[5][2],
              distance_to_line=
               Math.abs(m * b_x + -1 * b_y + b)
               /
               Math.sqrt(m * m + 1),
              _kC_=distance_to_line < 30?1:0;
             if(_kC_)
              {var _kD_=min(x1,x2) < b_x?1:0;
               if(_kD_)
                {var _kE_=b_x < max(x1,x2)?1:0;
                 if(_kE_)
                  var
                   _kF_=min(y1,y2) < b_y?1:0,
                   _kG_=_kF_?b_y < max(y1,y2)?1:0:_kF_;
                 else
                  var _kG_=_kE_}
               else
                var _kG_=_kD_}
             else
              var _kG_=_kC_;
             if(_kG_)return _kG_;
             var billiard_list$0=xs;
             continue}
          var billiard_list$0=xs;
          continue}
        return 0}}
    function find_pocket_distances_from
     (cue_position,billiard_list,all_billiards)
     {if(billiard_list)
       {var xs=billiard_list[2],x=billiard_list[1];
        if(billiard_between(cue_position,x[5],all_billiards))
         return [0,
                 -1,
                 find_pocket_distances_from(cue_position,xs,all_billiards)];
        var _kB_=find_pocket_distances_from(cue_position,xs,all_billiards);
        return [0,min_distance_to_pocket(x[5]),_kB_]}
      return 0}
    function find_billiard_position(billiard_list,suit)
     {var billiard_list$0=billiard_list;
      for(;;)
       {if(billiard_list$0)
         {var xs=billiard_list$0[2],x=billiard_list$0[1];
          if(x[1] === suit)return x[5];
          var billiard_list$0=xs;
          continue}
        return _iC_}}
    var
     bottom_bd$0=175 + playing_field$0[1] - 30,
     right_bd$0=175 + playing_field$0[2] - 30,
     radius=15,
     top_bd$0=175,
     left_bd$0=175;
    function check_wall_touching(ball)
     {var
       x_left=ball[5][1],
       y_top=ball[5][2],
       y_bottom=ball[5][2],
       x_right=ball[5][1];
      if(x_left < 175)
       {ball[5] = [0,left_bd$0,ball[5][2]];
        ball[4] = [0,(0 - ball[4][1]) * 0.99,ball[4][2] * 0.99]}
      if(y_top < 175)
       {ball[5] = [0,ball[5][1],top_bd$0];
        ball[4] = [0,ball[4][1] * 0.99,(0 - ball[4][2]) * 0.99]}
      if(right_bd$0 < x_right)
       {ball[5] = [0,right_bd$0,ball[5][2]];
        ball[4] = [0,(0 - ball[4][1]) * 0.99,ball[4][2] * 0.99]}
      if(bottom_bd$0 < y_bottom)
       {ball[5] = [0,ball[5][1],bottom_bd$0];
        ball[4] = [0,ball[4][1] * 0.99,(0 - ball[4][2]) * 0.99]}
      return ball}
    function move_ball_position(ball)
     {var
       tempx=ball[5][1] + ball[4][1] * 0.005,
       tempy=ball[5][2] + ball[4][2] * 0.005;
      ball[5] = [0,tempx,tempy];
      return ball}
    function move_ball_velocity(ball)
     {var tempx=[0,ball[4][1] * 0.983],tempy=[0,ball[4][2] * 0.983];
      if(Math.abs(tempx[1]) < 1.5)tempx[1] = 0;
      if(Math.abs(tempy[1]) < 1.5)tempy[1] = 0;
      ball[4] = [0,tempx[1],tempy[1]];
      return ball}
    function check_within_radius(a,b,distance)
     {var ax=a[1],ay=a[2],bx=b[1],by=b[2];
      return Math.abs((ax - bx) * (ax - bx))
              +
              Math.abs((ay - by) * (ay - by))
              <
              distance
              ?1
              :0}
    function remain_on_board(b)
     {var
       b_pos=b[5],
       _kw_=check_within_radius(b_pos,[0,180,180],100),
       distance=100;
      if(_kw_)
       var in_pocket_status=_kw_;
      else
       {var _kx_=check_within_radius(b_pos,[0,620,180],distance);
        if(_kx_)
         var in_pocket_status=_kx_;
        else
         {var _ky_=check_within_radius(b_pos,[0,right_bd$0 - 5,180],distance);
          if(_ky_)
           var in_pocket_status=_ky_;
          else
           {var
             _kz_=
              check_within_radius(b_pos,[0,180,bottom_bd$0 - 5],distance);
            if(_kz_)
             var in_pocket_status=_kz_;
            else
             var
              _kA_=check_within_radius(b_pos,[0,620,bottom_bd$0 - 5],distance),
              in_pocket_status=
               _kA_
               ||
               check_within_radius
                (b_pos,[0,right_bd$0 - 5,bottom_bd$0 - 5],distance)}}}
      return 1 - in_pocket_status}
    function remove_on_board(b)
     {var
       b_pos=b[5],
       _kr_=check_within_radius(b_pos,[0,180,180],100),
       distance=100;
      if(_kr_)
       var in_pocket_status=_kr_;
      else
       {var _ks_=check_within_radius(b_pos,[0,620,180],distance);
        if(_ks_)
         var in_pocket_status=_ks_;
        else
         {var _kt_=check_within_radius(b_pos,[0,right_bd$0 - 5,180],distance);
          if(_kt_)
           var in_pocket_status=_kt_;
          else
           {var
             _ku_=
              check_within_radius(b_pos,[0,180,bottom_bd$0 - 5],distance);
            if(_ku_)
             var in_pocket_status=_ku_;
            else
             var
              _kv_=check_within_radius(b_pos,[0,620,bottom_bd$0 - 5],distance),
              in_pocket_status=
               _kv_
               ||
               check_within_radius
                (b_pos,[0,right_bd$0 - 5,bottom_bd$0 - 5],distance)}}}
      return in_pocket_status}
    function make_d(r){return r * 180 / 3.1415926}
    function contain_cue_ball(billiards)
     {var billiards$0=billiards;
      for(;;)
       {if(billiards$0)
         {var xs=billiards$0[2],x=billiards$0[1];
          if(0 === x[1])return 1;
          var billiards$0=xs;
          continue}
        return 0}}
    function contain_8_ball_undone(billiards,player_target_balls)
     {var billiards$0=billiards;
      for(;;)
       {if(billiards$0)
         {var xs=billiards$0[2],x=billiards$0[1];
          if(8 === x[1])if(0 !== player_target_balls)return 1;
          var billiards$0=xs;
          continue}
        return 0}}
    function calc_score(st,p)
     {var p_score=(17 - length(st[2]) | 0) * 100 | 0;
      return 0 <= p_score?(p[5] = p_score,0):(p[5] = 0,0)}
    function get_player_by_name(name,players)
     {var players$0=players;
      for(;;)
       {if(players$0)
         {var xs=players$0[2],x=players$0[1];
          if(caml_string_equal(x[3],name))return x;
          var players$0=xs;
          continue}
        return failwith(_iV_)}}
    function change_state(st)
     {var
       billiards$0=map(check_wall_touching,map(move_ball_position,st[2])),
       _jv_=length(billiards$0) - 1 | 0,
       _ju_=0;
      if(!(_jv_ < 0))
       {var i=_ju_;
        for(;;)
         {var
           b1=nth(billiards$0,i),
           _jw_=i + 1 | 0,
           _jx_=length(billiards$0) - 1 | 0;
          if(!(_jx_ < _jw_))
           {var j=_jw_;
            for(;;)
             {var b2=nth(billiards$0,j);
              if(check_within_radius(b1[5],b2[5],900))
               {var
                 x1$0=[0,b1[5][1] + 15],
                 _jq_=b2[5][1] + 15,
                 y1$0=[0,b1[5][2] + 15],
                 _jr_=b2[5][2] + 15,
                 dx_wRadius=_jq_ - x1$0[1],
                 dy_wRadius=_jr_ - y1$0[1],
                 distance$0=
                  Math.sqrt(dx_wRadius * dx_wRadius + dy_wRadius * dy_wRadius),
                 dx=30 * dx_wRadius / distance$0,
                 dy=30 * dy_wRadius / distance$0;
                x1$0[1] = x1$0[1] - (dx - dx_wRadius);
                y1$0[1] = y1$0[1] - (dy - dy_wRadius);
                b1[5] = [0,x1$0[1] - 15,y1$0[1] - 15];
                var
                 dx1=(_jq_ - x1$0[1]) / 2,
                 dx2=(_jq_ - x1$0[1]) / 2,
                 dy1=(_jr_ - y1$0[1]) / 2,
                 dy2=(_jr_ - y1$0[1]) / 2,
                 straight_v=
                  function(velocity_x,velocity_y,dx,dy,radius)
                   {return velocity_x * dx / radius + velocity_y * dy / radius},
                 perpendicular_v=
                  function(velocity_x,velocity_y,dx,dy,radius)
                   {return velocity_y * dx / radius - velocity_x * dy / radius},
                 x_velocity=
                  function(velocity_st,velocity_per,dx,dy,radius)
                   {return velocity_st
                           *
                           dx
                           /
                           radius
                           -
                           velocity_per
                           *
                           dy
                           /
                           radius},
                 y_velocity=
                  function(velocity_st,velocity_per,dx,dy,radius)
                   {return velocity_st
                           *
                           dy
                           /
                           radius
                           +
                           velocity_per
                           *
                           dx
                           /
                           radius},
                 collision_v=
                  function(v1,v2,m1,m2)
                   {return v1
                           *
                           (m1 - m2)
                           /
                           (m1 + m2)
                           +
                           v2
                           *
                           (2 * m2)
                           /
                           (m1 + m2)},
                 velocity_st_1=straight_v(b1[4][1],b1[4][2],dx1,dy1,radius),
                 velocity_perpen_1=
                  perpendicular_v(b1[4][1],b1[4][2],dx1,dy1,radius),
                 velocity_st_2=straight_v(b2[4][1],b2[4][2],dx2,dy2,radius),
                 velocity_perpen_2=
                  perpendicular_v(b2[4][1],b2[4][2],dx2,dy2,radius),
                 newvelocity_st_1=
                  collision_v(velocity_st_1,velocity_st_2,b1[9],b2[9]),
                 newvelocity_st_2=
                  collision_v(velocity_st_2,velocity_st_1,b2[9],b1[9]),
                 b1_x_velocity=
                  x_velocity
                   (newvelocity_st_1,velocity_perpen_1,dx1,dy1,radius),
                 b1_y_velocity=
                  y_velocity
                   (newvelocity_st_1,velocity_perpen_1,dx1,dy1,radius);
                b1[4] = [0,b1_x_velocity,b1_y_velocity];
                var
                 b2_x_velocity=
                  x_velocity
                   (newvelocity_st_2,velocity_perpen_2,dx2,dy2,radius),
                 b2_y_velocity=
                  y_velocity
                   (newvelocity_st_2,velocity_perpen_2,dx2,dy2,radius);
                b2[4] = [0,b2_x_velocity,b2_y_velocity]}
              var _jz_=j + 1 | 0;
              if(_jx_ !== j){var j=_jz_;continue}
              break}}
          var _jy_=i + 1 | 0;
          if(_jv_ !== i){var i=_jy_;continue}
          break}}
      var
       position_on_board=map(move_ball_velocity,billiards$0),
       billiards_to_be_removed$0=
        caml_call1(find_all(remove_on_board),position_on_board);
      st[17] = append(st[17],billiards_to_be_removed$0);
      var
       new_on_board2=caml_call1(find_all(remain_on_board),position_on_board),
       billiards=new_on_board2;
      for(;;)
       {if(billiards)
         {var
           xs$0=billiards[2],
           x$0=billiards[1],
           _js_=x$0[4][1] != 0?1:0,
           _jt_=_js_ || (x$0[4][2] != 0?1:0);
          if(!_jt_){var billiards=xs$0;continue}
          var ball_move=_jt_}
        else
         var ball_move=0;
        var
         _jF_=st[18],
         check_start=_jF_ || (0 !== st[16]?1:0),
         _jG_=st[13],
         player_target_balls=
          caml_call1
           (find_all
             (function(b)
               {if(caml_string_equal(_jG_[3],_iR_))
                 {var _kn_=1 <= b[1]?1:0,_ko_=_kn_?b[1] <= 7?1:0:_kn_;
                  return _ko_}
                var _kp_=9 <= b[1]?1:0,_kq_=_kp_?b[1] <= 15?1:0:_kp_;
                return _kq_}),
            new_on_board2),
         check_foul_result=
          contain_cue_ball(billiards_to_be_removed$0)
           ?1
           :contain_8_ball_undone
             (billiards_to_be_removed$0,player_target_balls),
         ball_coord=cue_ball[5],
         x_offset=command[10][1] - ball_coord[1],
         y_offset=command[10][2] - ball_coord[2];
        if(st[18])
         var switch$0=0;
        else
         if(0 === st[16])
          if(0 <= x_offset)
           var new_bearing=make_d(Math.atan(y_offset / x_offset)),switch$0=1;
          else
           var
            new_bearing=180 + make_d(Math.atan(y_offset / x_offset)),
            switch$0=1;
         else
          var switch$0=0;
        if(!switch$0)var new_bearing=0;
        var check_start$0=check_start || ball_move;
        if(check_start$0)
         var switch$1=0;
        else
         if(st[18])
          var switch$1=0;
         else
          if(0 === st[16])
           var new_cue_pos=command[10],switch$1=1;
          else
           var switch$1=0;
        if(!switch$1)var new_cue_pos=_iK_;
        var _jH_=st[5];
        if(st[18])
         var switch$2=0;
        else
         if(0 === st[16])
          {var
            gap=
             Math.sqrt
              (Math.pow(command[10][1] - cue_ball[5][1],2)
               +
               Math.pow(command[10][2] - cue_ball[5][2],2))
             -
             45;
           if(gap < 35)
            var new_gap=35,switch$2=1;
           else
            if(200 < gap)
             var new_gap=200,switch$2=1;
            else
             var new_gap=gap,switch$2=1}
         else
          var switch$2=0;
        if(!switch$2)var new_gap=_jH_;
        var
         player_1=get_player_by_name(_iW_,st[8]),
         player_2=get_player_by_name(_iX_,st[8]);
        player_1[1]
        =
        caml_call1
         (find_all
           (function(b)
             {var _kl_=1 <= b[1]?1:0,_km_=_kl_?b[1] <= 7?1:0:_kl_;return _km_}),
          new_on_board2);
        player_2[1]
        =
        caml_call1
         (find_all
           (function(b)
             {var _kj_=9 <= b[1]?1:0,_kk_=_kj_?b[1] <= 15?1:0:_kj_;
              return _kk_}),
          new_on_board2);
        var
         switch$3=
          0 === player_1[1]
           ?mem(eight_ball,new_on_board2)?(player_1[1] = [0,eight_ball,0],1):0
           :0,
         switch$4=
          0 === player_2[1]
           ?mem(eight_ball,new_on_board2)?(player_2[1] = [0,eight_ball,0],1):0
           :0;
        if(0 === mem(cue_ball,st[2]))cue_ball[5] = _iQ_;
        st[2] = [0,cue_ball,st[2]];
        var
         g=st[5],
         bearing$0=st[4] * 3.1415926 / 180,
         bearing=st[4] % 360,
         quadrant=bearing <= 90?1:st[4] <= 180?2:st[4] <= 270?3:4;
        if(1 === quadrant)
         var
          xy_kinetic=
           [0,-1 * g * Math.cos(bearing$0),-1 * g * Math.sin(bearing$0)];
        else
         if(2 === quadrant)
          var
           angle=3.1415926 - bearing$0,
           xy_kinetic=[0,g * Math.cos(angle),-1 * g * Math.sin(angle)];
         else
          if(3 === quadrant)
           var
            angle$0=bearing$0 - 3.1415926,
            xy_kinetic=[0,g * Math.cos(angle$0),g * Math.sin(angle$0)];
          else
           var
            angle$1=6.2831852 - bearing$0,
            xy_kinetic=[0,-1 * g * Math.cos(angle$1),g * Math.sin(angle$1)];
        if(st[10])
         var switch$5=0;
        else
         if(st[18])
          var switch$5=0;
         else
          if(0 === st[16])
           {if(st[20])
             var switch$6=1;
            else
             {if(caml_string_equal(st[13][3],_iN_))
               if(0 === st[19])var switch$6=1,switch$7=0;else var switch$7=1;
              else
               var switch$7=1;
              if(switch$7)
               if(command[13])
                {var sound$0=st[23]?_iO_:_iP_,audio$0=createAudio(doc);
                 audio$0.src = sound$0.toString();
                 audio$0.play();
                 st[15] = [0,30 * xy_kinetic[1],30 * xy_kinetic[2]];
                 var
                  _jB_=[0,30 * xy_kinetic[1],30 * xy_kinetic[2]],
                  switch$5=1,
                  switch$6=0}
               else
                var _jB_=cue_ball[4],switch$5=1,switch$6=0}
            if(switch$6)
             {var sound=st[23]?_iL_:_iM_,audio=createAudio(doc);
              audio.src = sound.toString();
              audio.play();
              var cue_position=find_billiard_position(st[2],0);
              if(16 <= length(st[2]))
               if(1 <= st[3])
                var switch$8=0;
               else
                {var vector=closest_billiard(cue_position,player2[1],_iI_);
                 st[15] = _iJ_;
                 var _jC_=[0,30 * vector[1],30 * vector[2]],switch$8=1}
              else
               var switch$8=0;
              if(!switch$8)
               {var
                 white_position=find_billiard_position(st[2],0),
                 param=rev(st[8]);
                if(param)var a=param[1],_jj_=a;else var _jj_=failwith(_f_);
                var
                 legal_pot=_jj_[1],
                 _jk_=st[2],
                 billiards_on_board=
                  caml_call1
                   (find_all(function(b){return 0 !== b[1]?1:0}),_jk_);
                if(0 < length(billiards_on_board))
                 {var
                   distance_list$0=
                    find_pocket_distances_from
                     (white_position,legal_pot,billiards_on_board),
                   _jl_=4e3,
                   distance=
                    fold_left
                     (function(acc,e){return e < acc?e:acc},_jl_,distance_list$0);
                  if(distance < 4e3)
                   {var distance_list=distance_list$0,index=0;
                    for(;;)
                     {if(distance_list)
                       {var xs=distance_list[2],x=distance_list[1];
                        if(x != distance)
                         {var index$0=index + 1 | 0,distance_list=xs,index=index$0;
                          continue}
                        var search1=index}
                      else
                       var search1=failwith(_iD_);
                      break}}
                  else
                   var search1=-1}
                else
                 var search1=failwith(_iE_);
                if(-1 === search1)
                 {st[15] = _iG_;
                  var _jC_=closest_billiard(cue_position,player2[1],_iH_)}
                else
                 {var
                   search1_suit=nth(player2[1],search1)[1],
                   ball_position=
                    find_billiard_position(player2[1],search1_suit);
                  st[15] = [0,1,search1_suit];
                  var
                   _jp_=st[2],
                   min_dist=min_distance_to_pocket(ball_position),
                   pocket_to_be_hit=
                    min_dist
                     ==
                     distance_between(ball_position,[0,left_bd,top_bd])
                     ?[0,left_bd,top_bd]
                     :min_dist
                       ==
                       distance_between(ball_position,[0,left_bd,bottom_bd])
                       ?[0,left_bd,bottom_bd]
                       :min_dist
                         ==
                         distance_between
                          (ball_position,[0,(175 + right_bd) / 2,top_bd])
                         ?[0,(175 + right_bd) / 2,top_bd]
                         :min_dist
                           ==
                           distance_between
                            (ball_position,[0,(175 + right_bd) / 2,bottom_bd])
                           ?[0,(175 + right_bd) / 2,bottom_bd]
                           :min_dist
                             ==
                             distance_between(ball_position,[0,right_bd,top_bd])
                             ?[0,right_bd,top_bd]
                             :min_dist
                               ==
                               distance_between(ball_position,[0,right_bd,bottom_bd])
                               ?[0,right_bd,bottom_bd]
                               :failwith(_iF_),
                   x1=ball_position[1] - pocket_to_be_hit[1],
                   y1=ball_position[2] - pocket_to_be_hit[2],
                   ratio=
                    (Math.sqrt(x1 * x1 + y1 * y1) + 30)
                    /
                    Math.sqrt(x1 * x1 + y1 * y1),
                   _jm_=pocket_to_be_hit[2] + y1 * ratio,
                   _jn_=pocket_to_be_hit[1] + x1 * ratio,
                   _jo_=distance_between(cue_position,ball_position),
                   force_magnifier=
                    distance_between(ball_position,pocket_to_be_hit)
                    /
                    _jo_,
                   force_magnifier$0=force_magnifier < 1?1.5:force_magnifier,
                   force_magnifier$1=
                    billiard_between(ball_position,pocket_to_be_hit,_jp_)
                     ?force_magnifier$0 * 2
                     :force_magnifier$0,
                   vector_x=(_jn_ - cue_position[1]) * 20 * force_magnifier$1,
                   vector_y=(_jm_ - cue_position[2]) * 20 * force_magnifier$1,
                   _jC_=
                    3e3 < Math.abs(vector_x)
                     ?0 < vector_x
                       ?[0,3e3,3e3 * vector_y / vector_x]
                       :[0,-3e3,-3e3 * vector_y / vector_x]
                     :3e3 < Math.abs(vector_x)
                       ?0 < vector_y
                         ?[0,3e3 * vector_x / vector_y,3e3]
                         :[0,-3e3 * vector_x / vector_y,-3e3]
                       :[0,vector_x,vector_y]}}
              var _jB_=_jC_,switch$5=1}}
          else
           var switch$5=0;
        if(!switch$5)var _jB_=cue_ball[4];
        cue_ball[4] = _jB_;
        calc_score(st,player1);
        calc_score(st,player2);
        st[18] = command[3]?0:st[18];
        if(command[1]){st[18] = 0;st[19] = 1}else st[18] = st[18];
        if(command[9]){st[18] = 0;st[20] = 1}else st[18] = st[18];
        var choose_cue=command[8];
        st[21] = choose_cue;
        st[23] = 42 === command[14]?1:st[23];
        if(ball_move)
         var switch$9=0;
        else
         {if(1 === st[10])
           var switch$10=1;
          else
           if(ball_move)var switch$10=1;else var switch$9=0,switch$10=0;
          if(switch$10)
           {var players$0=st[8],current_player=st[13],players=players$0;
            for(;;)
             {if(players)
               {var t$0=players[2],h=players[1];
                if(caml_equal(h,current_player)){var players=t$0;continue}
                var another_player=h}
              else
               var another_player=failwith(_iS_);
              var
               billiards_to_be_removed=st[17],
               switch$11=
                0 === current_player[1]
                 ?mem(eight_ball,billiards_to_be_removed)
                   ?caml_string_equal(current_player[3],_iT_)
                     ?(st[16] = 1,1)
                     :(st[16] = 2,1)
                   :0
                 :0;
              if(!switch$11)
               {var
                 ball_removed=billiards_to_be_removed,
                 _jD_=current_player[2];
                for(;;)
                 {if(ball_removed)
                   {var xs$1=ball_removed[2],x$1=ball_removed[1];
                    if(!mem(x$1,_jD_)){var ball_removed=xs$1;continue}
                    var _jE_=1}
                  else
                   var _jE_=0;
                  if(_jE_)
                   {if(contain_cue_ball(billiards_to_be_removed))
                     {current_player[4] = 0;
                      another_player[4] = 1;
                      st[13] = another_player;
                      st[14] = 1;
                      st[3] = st[3] + 1 | 0}
                    else
                     if
                      (contain_8_ball_undone
                        (billiards_to_be_removed,current_player[2]))
                      if(caml_string_equal(current_player[3],_iU_))
                       {st[16] = 2;
                        current_player[4] = 0;
                        another_player[4] = 1;
                        st[14] = 0}
                      else
                       {st[16] = 1;
                        current_player[4] = 0;
                        another_player[4] = 1;
                        st[14] = 0}}
                  else
                   {current_player[4] = 0;
                    another_player[4] = 1;
                    st[13] = another_player;
                    st[3] = st[3] + 1 | 0}
                  break}}
              st[17] = 0;
              var switch$9=1;
              break}}}
        if(check_foul_result)
         {var
           current_player$0=st[13],
           player_target_balls$0=
            caml_call1
             (find_all
               (function(b)
                 {if(caml_string_equal(current_player$0[3],_iY_))
                   {var _kf_=1 <= b[1]?1:0,_kg_=_kf_?b[1] <= 7?1:0:_kf_;
                    return _kg_}
                  var _kh_=9 <= b[1]?1:0,_ki_=_kh_?b[1] <= 15?1:0:_kh_;
                  return _ki_}),
              new_on_board2);
          if(contain_cue_ball(billiards_to_be_removed$0))
           {var
             temp_cue_position=[0,_iZ_],
             _jK_=st[23],
             _jL_=st[22],
             _jM_=st[21],
             _jN_=st[20],
             _jO_=st[19],
             _jP_=st[18],
             _jQ_=st[17],
             _jR_=st[16],
             _jS_=st[15],
             _jT_=1,
             _jU_=st[13],
             _jV_=st[12],
             _jW_=st[11],
             _jX_=st[9],
             _jY_=st[8],
             _jZ_=st[6],
             _j0_=st[3];
            a:
            for(;;)
             {var balls_on_board=st[2],_jI_=temp_cue_position[1];
              for(;;)
               {if(balls_on_board)
                 {var xs$2=balls_on_board[2],x$2=balls_on_board[1];
                  if(!check_within_radius(x$2[5],_jI_,900))
                   {var balls_on_board=xs$2;continue}
                  var _jJ_=1}
                else
                 var _jJ_=0;
                if(_jJ_)
                 {temp_cue_position[1]
                  =
                  [0,temp_cue_position[1][1] + 30,temp_cue_position[1][2]];
                  continue a}
                cue_ball[5] = temp_cue_position[1];
                cue_ball[4] = _i0_;
                return [0,
                        st[1] + 1 | 0,
                        [0,cue_ball,new_on_board2],
                        _j0_,
                        new_bearing,
                        new_gap,
                        _jZ_,
                        new_cue_pos,
                        _jY_,
                        _jX_,
                        ball_move,
                        _jW_,
                        _jV_,
                        _jU_,
                        _jT_,
                        _jS_,
                        _jR_,
                        _jQ_,
                        _jP_,
                        _jO_,
                        _jN_,
                        _jM_,
                        _jL_,
                        _jK_]}}}
          return contain_8_ball_undone
                   (billiards_to_be_removed$0,player_target_balls$0)
                  ?caml_string_equal(current_player$0[3],_i1_)
                    ?[0,
                      st[1],
                      st[2],
                      st[3],
                      st[4],
                      st[5],
                      st[6],
                      st[7],
                      st[8],
                      st[9],
                      st[10],
                      st[11],
                      st[12],
                      st[13],
                      st[14],
                      st[15],
                      2,
                      st[17],
                      st[18],
                      st[19],
                      st[20],
                      st[21],
                      st[22],
                      st[23]]
                    :[0,
                      st[1],
                      st[2],
                      st[3],
                      st[4],
                      st[5],
                      st[6],
                      st[7],
                      st[8],
                      st[9],
                      st[10],
                      st[11],
                      st[12],
                      st[13],
                      st[14],
                      st[15],
                      1,
                      st[17],
                      st[18],
                      st[19],
                      st[20],
                      st[21],
                      st[22],
                      st[23]]
                  :failwith(_i2_)}
        var
         l=st[2],
         _j1_=st[23],
         _j2_=st[22],
         _j3_=st[21],
         _j4_=st[20],
         _j5_=st[19],
         _j6_=st[18],
         _j7_=st[17],
         _j8_=st[16],
         _j9_=st[15],
         _j__=st[14],
         _j$_=st[13],
         _ka_=st[12],
         _kb_=st[10],
         _kc_=st[9],
         _kd_=st[8];
        for(;;)
         {if(l)
           {var _jA_=l[2];
            if(_jA_)
             {var t=_jA_[2],h2=_jA_[1],h1=l[1];
              if(check_within_radius(h1[5],h2[5],910))
               if(caml_notequal(h1,h2))
                if(caml_notequal(h1[4],h2[4]))
                 var _ke_=1,switch$12=1,switch$13=0;
                else
                 var switch$13=1;
               else
                var switch$13=1;
              else
               var switch$13=1;
              if(switch$13){var l$0=[0,h2,t],l=l$0;continue}}
            else
             var switch$12=0}
          else
           var switch$12=0;
          if(!switch$12)var _ke_=0;
          return [0,
                  st[1] + 1 | 0,
                  new_on_board2,
                  st[3],
                  new_bearing,
                  new_gap,
                  _ke_,
                  new_cue_pos,
                  _kd_,
                  _kc_,
                  ball_move,
                  _kb_,
                  _ka_,
                  _j$_,
                  _j__,
                  _j9_,
                  _j8_,
                  _j7_,
                  _j6_,
                  _j5_,
                  _j4_,
                  _j3_,
                  _j2_,
                  _j1_]}}}
    var
     initial_state=
      [0,
       0,
       [0,
        cue_ball,
        [0,
         one_ball,
         [0,
          two_ball,
          [0,
           three_ball,
           [0,
            four_ball,
            [0,
             five_ball,
             [0,
              six_ball,
              [0,
               seven_ball,
               [0,
                eight_ball,
                [0,
                 nine_ball,
                 [0,
                  ten_ball,
                  [0,
                   eleven_ball,
                   [0,
                    twelve_ball,
                    [0,thirteen_ball,[0,fourteen_ball,[0,fifteen_ball,0]]]]]]]]]]]]]]]],
       0,
       0,
       45,
       0,
       [0,cue_ball[5][1] + 45,cue_ball[5][2]],
       [0,player1,[0,player2,0]],
       0,
       0,
       0,
       _i4_,
       player1,
       2,
       _i3_,
       0,
       0,
       1,
       0,
       0,
       0,
       0,
       0],
     state=[0,initial_state];
    function keydown$0(event)
     {var
       new_state=change_state(state[1]),
       match=event.keyCode,
       switcher=match - 48 | 0;
      if(40 < switcher >>> 0)
       var switch$0=0;
      else
       {switch(switcher)
         {case 0:command[8] = 0;state[1] = new_state;var switch$1=1;break;
          case 1:command[8] = 1;state[1] = new_state;var switch$1=1;break;
          case 2:command[8] = 2;state[1] = new_state;var switch$1=1;break;
          case 3:command[8] = 3;state[1] = new_state;var switch$1=1;break;
          case 4:command[8] = 4;state[1] = new_state;var switch$1=1;break;
          case 5:command[8] = 5;state[1] = new_state;var switch$1=1;break;
          case 6:command[8] = 6;state[1] = new_state;var switch$1=1;break;
          case 7:command[8] = 7;state[1] = new_state;var switch$1=1;break;
          case 8:command[8] = 8;state[1] = new_state;var switch$1=1;break;
          case 9:command[8] = 9;state[1] = new_state;var switch$1=1;break;
          case 17:
           command[14] = command[14] - 4 | 0;
           state[1] = new_state;
           var switch$1=1;
           break;
          case 19:
           command[14] = command[14] * 10 | 0;
           state[1] = new_state;
           var switch$1=1;
           break;
          case 20:command[4] = 1;state[1] = new_state;var switch$1=1;break;
          case 21:command[7] = 1;state[1] = new_state;var switch$1=1;break;
          case 26:command[5] = 1;state[1] = new_state;var switch$1=1;break;
          case 28:
           command[14] = command[14] - 6 | 0;
           state[1] = new_state;
           var switch$1=1;
           break;
          case 29:
           command[14] = command[14] * 8 | 0;
           state[1] = new_state;
           var switch$1=1;
           break;
          case 31:command[14] = 1;state[1] = new_state;var switch$1=1;break;
          case 33:command[6] = 1;state[1] = new_state;var switch$1=1;break;
          case 35:command[3] = 1;state[1] = new_state;var switch$1=1;break;
          case 39:command[1] = 1;state[1] = new_state;var switch$1=1;break;
          case 40:command[9] = 1;state[1] = new_state;var switch$1=1;break;
          default:var switch$0=0,switch$1=0}
        if(switch$1)var switch$0=1}
      if(!switch$0){command[4] = 0;state[1] = new_state}
      return true$0}
    function keyup(event)
     {var
       new_state=change_state(state[1]),
       match=event.keyCode,
       switcher=match - 48 | 0;
      if(40 < switcher >>> 0)
       var switch$0=0;
      else
       {switch(switcher)
         {case 0:command[8] = 0;state[1] = new_state;var switch$1=1;break;
          case 1:command[8] = 1;state[1] = new_state;var switch$1=1;break;
          case 2:command[8] = 2;state[1] = new_state;var switch$1=1;break;
          case 3:command[8] = 3;state[1] = new_state;var switch$1=1;break;
          case 4:command[8] = 4;state[1] = new_state;var switch$1=1;break;
          case 5:command[8] = 5;state[1] = new_state;var switch$1=1;break;
          case 6:command[8] = 6;state[1] = new_state;var switch$1=1;break;
          case 7:command[8] = 7;state[1] = new_state;var switch$1=1;break;
          case 8:command[8] = 8;state[1] = new_state;var switch$1=1;break;
          case 9:command[8] = 9;state[1] = new_state;var switch$1=1;break;
          case 17:
           command[14] = command[14];
           state[1] = new_state;
           var switch$1=1;
           break;
          case 19:
           command[14] = command[14];
           state[1] = new_state;
           var switch$1=1;
           break;
          case 20:command[4] = 0;state[1] = new_state;var switch$1=1;break;
          case 21:command[7] = 0;state[1] = new_state;var switch$1=1;break;
          case 26:command[5] = 0;state[1] = new_state;var switch$1=1;break;
          case 28:
           command[14] = command[14];
           state[1] = new_state;
           var switch$1=1;
           break;
          case 29:
           command[14] = command[14];
           state[1] = new_state;
           var switch$1=1;
           break;
          case 31:
           command[14] = command[14];
           state[1] = new_state;
           var switch$1=1;
           break;
          case 33:command[6] = 0;state[1] = new_state;var switch$1=1;break;
          case 35:command[3] = 0;state[1] = new_state;var switch$1=1;break;
          case 39:command[1] = 0;state[1] = new_state;var switch$1=1;break;
          case 40:command[9] = 0;state[1] = new_state;var switch$1=1;break;
          default:var switch$0=0,switch$1=0}
        if(switch$1)var switch$0=1}
      if(!switch$0){command[4] = 0;state[1] = new_state}
      return true$0}
    function mousemove$0(event)
     {var
       new_state=change_state(state[1]),
       x=event.clientX,
       match=event.clientY;
      command[10] = [0,x,match];
      state[1] = new_state;
      return true$0}
    function mousedown$0(event)
     {var new_state=change_state(state[1]),match=event.button;
      if(0 === match)
       {command[13] = 1;state[1] = new_state}
      else
       {command[13] = 0;state[1] = new_state}
      return true$0}
    function mouseup$0(event)
     {var new_state=change_state(state[1]),match=event.button;
      if(0 === match)
       {command[13] = 0;state[1] = new_state}
      else
       {command[13] = 0;state[1] = new_state}
      return true$0}
    function main(param)
     {var gui=doc.getElementById("gui");
      if(gui == no_handler)throw [0,Assert_failure,_i5_];
      var
       h1=unsafeCreateElement(doc,_bs_),
       p=unsafeCreateElement(doc,_br_),
       audio=createAudio(doc);
      audio.src = "media/billiards.mp3";
      audio.play();
      appendChild(gui,h1);
      appendChild(gui,p);
      var canvas=unsafeCreateElement(doc,_bw_);
      if(1 - test(canvas.getContext))throw Canvas_not_available;
      canvas.width = 1331;
      canvas.height = 741;
      appendChild(gui,canvas);
      var context=canvas.getContext(jsoo_1df5757a);
      addEventListener(doc,keydown,handler(keydown$0),true$0);
      addEventListener(doc,keydown,handler(keyup),true$0);
      addEventListener(doc,mousemove,handler(mousemove$0),true$0);
      addEventListener(doc,mousedown,handler(mousedown$0),true$0);
      addEventListener(doc,mouseup,handler(mouseup$0),true$0);
      function game_loop_helper(param)
       {state[1] = change_state(state[1]);
        var _ji_=state[1];
        context.clearRect(0,0,1331,741);
        draw_image(context,"media/pool_table_sm.png",_hX_);
        if(_ji_[23])
         draw_image(context,"media/cheats.png",_h4_);
        else
         draw_image(context,"media/blank.png",_iB_);
        var p=caml_equal(_ji_[13],player1);
        if(p)
         draw_image(context,"media/turnp1.png",_h1_);
        else
         draw_image(context,"media/turnp2.png",_h2_);
        var _jc_=_ji_[23],_jd_=_ji_[1],_je_=_ji_[2];
        map
         (function(b)
           {var
             suit=b[1],
             choose_b=get_ball_img(suit,b,b[4],_jd_,_jc_),
             pos=[0,b[5][1] - 15,b[5][2] - 15];
            return draw_help(context,choose_b,pos)},
          _je_);
        if(_ji_[19])
         draw_image(context,"media/p2.png",_h5_);
        else
         draw_image(context,"media/blank.png",_iA_);
        if(_ji_[20])
         draw_image(context,"media/ai.png",_h6_);
        else
         draw_image(context,"media/blank.png",_iz_);
        var _jf_=_a_(_h8_,_a_(string_of_float(cue_ball[5][2]),_h7_));
        draw_debug
         (context,_a_(_h9_,_a_(string_of_float(cue_ball[5][1]),_jf_)),10);
        var _jg_=_a_(_h$_,_a_(string_of_float(_ji_[7][2]),_h__));
        draw_debug(context,_a_(_ia_,_a_(string_of_float(_ji_[7][1]),_jg_)),22);
        draw_debug(context,_a_(_ib_,caml_new_string("" + _ji_[1])),34);
        draw_debug(context,_a_(_ic_,_ji_[13][3]),46);
        draw_debug(context,_a_(_id_,string_of_bool(_ji_[10])),58);
        var _jh_=_a_(_ie_,string_of_float(_ji_[15][2]));
        draw_debug
         (context,_a_(_if_,_a_(string_of_float(_ji_[15][1]),_jh_)),70);
        draw_debug(context,_a_(_ig_,caml_new_string("" + _ji_[21])),82);
        draw_debug(context,_a_(_ih_,string_of_bool(_ji_[23])),94);
        var a1=cue_ball[5][1],a2=cue_ball[5][2],gap=_ji_[5],bearing=_ji_[4];
        if(0 === _ji_[10])
         draw_image(context,"media/power_bar.png",[0,35,640 - gap * 2.3]);
        else
         draw_image(context,"media/empty.png",_iy_);
        draw_image(context,"media/left.png",_ii_);
        var str=string_of_float((10 * _ji_[4] | 0) / 10),text=str.toString();
        context.font = "30px  ";
        context.fillText(text,20,171);
        draw_stat(context,player1,1,_ji_[2],_ji_[23]);
        draw_stat(context,player2,2,_ji_[2],_ji_[23]);
        if(0 === _ji_[21])
         if(0 === _ji_[10])
          draw_rotated2(context,bearing,_ij_,a1,a2,gap);
         else
          draw_image(context,"media/pool_cue_vert.png",_ip_);
        else
         if(1 === _ji_[21])
          if(0 === _ji_[10])
           draw_rotated2(context,bearing,_iq_,a1,a2,gap);
          else
           draw_image(context,"media/pool_cue1_vert.png",_ir_);
         else
          if(2 === _ji_[21])
           if(0 === _ji_[10])
            draw_rotated2(context,bearing,_is_,a1,a2,gap);
           else
            draw_image(context,"media/pool_cue2_vert.png",_it_);
          else
           if(3 === _ji_[21])
            if(0 === _ji_[10])
             draw_rotated2(context,bearing,_iu_,a1,a2,gap);
            else
             draw_image(context,"media/pool_cue3_vert.png",_iv_);
           else
            if(0 === _ji_[10])
             draw_rotated2(context,bearing,_iw_,a1,a2,gap);
            else
             draw_image(context,"media/pool_cue_vert.png",_ix_);
        if(_ji_[18])
         draw_image(context,"media/start.png",_ik_);
        else
         draw_image(context,"media/blank.png",_io_);
        if(1 === _ji_[16])
         draw_image(context,"media/win.png",_il_);
        else
         if(2 === _ji_[16])
          draw_image(context,"media/lose.png",_im_);
         else
          draw_image(context,"media/blank.png",_in_);
        window.requestAnimationFrame
         (caml_js_wrap_callback(function(t){return game_loop_helper(0)}));
        return 0}
      return game_loop_helper(0)}
    main(0);
    do_at_exit(0);
    return}
  (function(){return this}()));
